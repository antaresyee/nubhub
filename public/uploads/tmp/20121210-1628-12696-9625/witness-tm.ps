%!PS-Adobe-2.0
%%Creator: dvips 5.58 Copyright 1986, 1994 Radical Eye Software
%%Title: witness.dvi
%%CreationDate: Thu Jan  5 16:22:14 1995
%%Pages: 48
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips -f witness.dvi
%DVIPSParameters: dpi=300, comments removed
%DVIPSSource:  TeX output 1995.01.05:1621
%%BeginProcSet: tex.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]{ch-image}imagemask restore}B /D{/cc X dup type /stringtype ne{]}
if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300
(/home/mll/proj/pomdp/witness.dvi) @start /Fa 3 50 df<020408103020604040
C0C0C0C0C0C0C0C0404060203010080402071A7F920C>40 D<8040201018080C04040606
06060606060604040C081810204080071A7E920C>I<0C003C00CC000C000C000C000C00
0C000C000C000C000C000C000C000C00FF8009107E8F0F>49 D E
/Fb 3 122 df<08181818FF30303030606062646438080F7E8E0C>116
D<0F381144218C218001800300030003084310C73079C00E0B7F8A11>120
D<381048308C309830183030603060306030E031C00EC000C04180C18086007C000C107E
8A10>I E /Fc 1 51 df<7FFFFFC0FFFFFFE0C0000060C0000060C0000060C0000060C0
000060C0000060C0000060C0000060C0000060C0000060C0000060C0000060C0000060C0
000060C0000060C0000060C0000060C0000060C0000060C0000060C0000060C0000060C0
000060FFFFFFE0FFFFFFE01B1B7B9E25>50 D E /Fd 36 121 df<387CFEFEFE7C380707
7C8610>46 D<00180000780001F800FFF800FFF80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F8007FFFE07FFFE013207C9F1C>
49 D<03FC000FFF003C1FC07007E07C07F0FE03F0FE03F8FE03F8FE01F87C01F83803F8
0003F80003F00003F00007E00007C0000F80001F00003E0000380000700000E01801C018
0380180700180E00380FFFF01FFFF03FFFF07FFFF0FFFFF0FFFFF015207D9F1C>I<00FE
0007FFC00F07E01E03F03F03F03F81F83F81F83F81F81F03F81F03F00003F00003E00007
C0001F8001FE0001FF000007C00001F00001F80000FC0000FC3C00FE7E00FEFF00FEFF00
FEFF00FEFF00FC7E01FC7801F81E07F00FFFC001FE0017207E9F1C>I<0000E00001E000
03E00003E00007E0000FE0001FE0001FE00037E00077E000E7E001C7E00187E00307E007
07E00E07E00C07E01807E03807E07007E0E007E0FFFFFEFFFFFE0007E00007E00007E000
07E00007E00007E00007E000FFFE00FFFE17207E9F1C>I<1000201E01E01FFFC01FFF80
1FFF001FFE001FF8001BC00018000018000018000018000019FC001FFF001E0FC01807E0
1803E00003F00003F00003F80003F83803F87C03F8FE03F8FE03F8FC03F0FC03F07007E0
3007C01C1F800FFF0003F80015207D9F1C>I<001F8000FFE003F07007C0F00F01F81F01
F83E01F83E01F87E00F07C00007C0000FC0800FC7FC0FCFFE0FD80F0FF00F8FE007CFE00
7CFC007EFC007EFC007EFC007E7C007E7C007E7C007E3C007C3E007C1E00F80F00F00783
E003FFC000FF0017207E9F1C>I<6000007800007FFFFE7FFFFE7FFFFC7FFFF87FFFF87F
FFF0E00060E000C0C00180C00300C00300000600000C00001C0000180000380000780000
780000F00000F00000F00001F00001F00001F00003F00003F00003F00003F00003F00003
F00003F00001E00017227DA11C>I<00FE0003FFC00703E00E00F01C00F01C00783C0078
3E00783F00783F80783FE0F01FF9E01FFFC00FFF8007FFC003FFE007FFF01E7FF83C1FFC
7807FC7801FEF000FEF0003EF0001EF0001EF0001CF8001C7800383C00381F01F00FFFC0
01FF0017207E9F1C>I<07FC001FFF00380F807007C0F807E0FC07E0FC07E0FC07E07807
E0000FC0001F80001F00003C0000780000700000E00000E00000C00000C00000C00000C0
0000C00000C00000000000000000000000000000000001C00003E00007F00007F00007F0
0003E00001C00013237DA21A>63 D<000070000000007000000000F800000000F8000000
00F800000001FC00000001FC00000003FE00000003FE00000003FE00000006FF00000006
7F0000000E7F8000000C3F8000000C3F800000183FC00000181FC00000381FE00000300F
E00000300FE00000600FF000006007F00000E007F80000FFFFF80000FFFFF800018001FC
00018001FC00038001FE00030000FE00030000FE000600007F000600007F00FFE00FFFF8
FFE00FFFF825227EA12A>65 D<FFFFE000FFFFE00007F0000007F0000007F0000007F000
0007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F000
0007F0000007F0000007F0000007F0000007F0000007F0000007F0001807F0001807F000
1807F0001807F0003807F0003807F0007007F0007007F000F007F001F007F007F0FFFFFF
F0FFFFFFF01D227EA122>76 D<FFF000000FFFFFF800001FFF07F800001FE006FC000037
E006FC000037E006FC000037E0067E000067E0067E000067E0063F0000C7E0063F0000C7
E0061F800187E0061F800187E0060FC00307E0060FC00307E0060FC00307E00607E00607
E00607E00607E00603F00C07E00603F00C07E00601F81807E00601F81807E00601F81807
E00600FC3007E00600FC3007E006007E6007E006007E6007E006003FC007E006003FC007
E006001F8007E006001F8007E006001F8007E006000F0007E0FFF00F00FFFFFFF00600FF
FF30227EA135>I<7FFFFFFF807FFFFFFF807E03F80F807803F807807003F803806003F8
0180E003F801C0E003F801C0C003F800C0C003F800C0C003F800C0C003F800C00003F800
000003F800000003F800000003F800000003F800000003F800000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000003F800000003F8000000
03F800000003F800000003F800000003F800000003F8000003FFFFF80003FFFFF8002222
7EA127>84 D<07FC001FFF803F07C03F03E03F01E03F01F01E01F00001F00001F0003FF0
03FDF01FC1F03F01F07E01F0FC01F0FC01F0FC01F0FC01F07E02F07E0CF81FF87F07E03F
18167E951B>97 D<FF000000FF0000001F0000001F0000001F0000001F0000001F000000
1F0000001F0000001F0000001F0000001F0000001F0000001F0FE0001F3FF8001FF07C00
1F801E001F001F001F000F801F000F801F000FC01F000FC01F000FC01F000FC01F000FC0
1F000FC01F000FC01F000FC01F000F801F001F801F801F001FC03E001EE07C001C3FF800
180FC0001A237EA21F>I<00FF8007FFE00F83F01F03F03E03F07E03F07C01E07C0000FC
0000FC0000FC0000FC0000FC0000FC00007C00007E00007E00003E00301F00600FC0E007
FF8000FE0014167E9519>I<0001FE000001FE0000003E0000003E0000003E0000003E00
00003E0000003E0000003E0000003E0000003E0000003E0000003E0001FC3E0007FFBE00
0F81FE001F007E003E003E007E003E007C003E00FC003E00FC003E00FC003E00FC003E00
FC003E00FC003E00FC003E00FC003E007C003E007C003E003E007E001E00FE000F83BE00
07FF3FC001FC3FC01A237EA21F>I<00FE0007FF800F87C01E01E03E01F07C00F07C00F8
FC00F8FC00F8FFFFF8FFFFF8FC0000FC0000FC00007C00007C00007E00003E00181F0030
0FC07003FFC000FF0015167E951A>I<003F8000FFC001E3E003C7E007C7E00F87E00F83
C00F80000F80000F80000F80000F80000F8000FFFC00FFFC000F80000F80000F80000F80
000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80
000F80000F80007FF8007FF80013237FA211>I<03FC1E0FFF7F1F0F8F3E07CF3C03C07C
03E07C03E07C03E07C03E07C03E03C03C03E07C01F0F801FFF0013FC0030000030000038
00003FFF801FFFF00FFFF81FFFFC3800FC70003EF0001EF0001EF0001EF0001E78003C7C
007C3F01F80FFFE001FF0018217E951C>I<FF000000FF0000001F0000001F0000001F00
00001F0000001F0000001F0000001F0000001F0000001F0000001F0000001F0000001F07
E0001F1FF8001F307C001F403C001F803E001F803E001F003E001F003E001F003E001F00
3E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F00
3E001F003E00FFE1FFC0FFE1FFC01A237EA21F>I<1C003E007F007F007F003E001C0000
00000000000000000000000000FF00FF001F001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F00FFE0FFE00B247EA310>I<FF000000FF000000
1F0000001F0000001F0000001F0000001F0000001F0000001F0000001F0000001F000000
1F0000001F0000001F00FF801F00FF801F0038001F0060001F01C0001F0380001F070000
1F0E00001F1C00001F7E00001FFF00001FCF00001F0F80001F07C0001F03E0001F01E000
1F01F0001F00F8001F007C001F003C00FFE0FFC0FFE0FFC01A237EA21E>107
D<FF00FF001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00FFE0FFE00B
237EA210>I<FF07F007F000FF1FFC1FFC001F303E303E001F403E403E001F801F801F00
1F801F801F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F001F001F001F001F001F001F001F001F00FFE0FFE0FFE0FFE0FFE0FFE02B167E9530>
I<FF07E000FF1FF8001F307C001F403C001F803E001F803E001F003E001F003E001F003E
001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E
001F003E001F003E00FFE1FFC0FFE1FFC01A167E951F>I<00FE0007FFC00F83E01E00F0
3E00F87C007C7C007C7C007CFC007EFC007EFC007EFC007EFC007EFC007EFC007E7C007C
7C007C3E00F81F01F00F83E007FFC000FE0017167E951C>I<FF0FE000FF3FF8001FF07C
001F803E001F001F001F001F801F001F801F000FC01F000FC01F000FC01F000FC01F000F
C01F000FC01F000FC01F000FC01F001F801F001F801F803F001FC03E001FE0FC001F3FF8
001F0FC0001F0000001F0000001F0000001F0000001F0000001F0000001F0000001F0000
00FFE00000FFE000001A207E951F>I<FE1F00FE3FC01E67E01EC7E01E87E01E87E01F83
C01F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00
001F0000FFF000FFF00013167E9517>114 D<0FF3003FFF00781F00600700E00300E003
00F00300FC00007FE0007FF8003FFE000FFF0001FF00000F80C00780C00380E00380E003
80F00700FC0E00EFFC00C7F00011167E9516>I<01800001800001800001800003800003
80000780000780000F80003F8000FFFF00FFFF000F80000F80000F80000F80000F80000F
80000F80000F80000F80000F80000F80000F81800F81800F81800F81800F81800F830007
C30003FE0000F80011207F9F16>I<FF01FE00FF01FE001F003E001F003E001F003E001F
003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F
003E001F003E001F003E001F007E001F00FE000F81BE0007FF3FC001FC3FC01A167E951F
>I<FFE01FE0FFE01FE00F8006000F8006000FC00E0007C00C0007E01C0003E0180003E0
180001F0300001F0300000F8600000F86000007CC000007CC000007FC000003F8000003F
8000001F0000001F0000000E0000000E00001B167F951E>I<FFE7FF07F8FFE7FF07F81F
007800C00F807801800F807C01800F807C018007C07E030007C0DE030007E0DE070003E0
DF060003E18F060001F18F0C0001F38F8C0001FB079C0000FB07D80000FE03D800007E03
F000007E03F000007C01F000003C01E000003800E000001800C00025167F9528>I<FFE0
7FC0FFE07FC00F801C0007C0380003E0700003F0600001F8C00000F98000007F8000003F
0000001F0000001F8000003FC0000037C0000063E00000C1F00001C0F8000380FC000700
7E000E003E00FF80FFE0FF80FFE01B167F951E>I E /Fe 4 107
df<FFFFC0FFFFC012027D8618>0 D<081C1C3838383070706060C0C0060D7E8D09>48
D<018F800631E0084060108070218030610030400030C00030C00030C00020C00060C000
40E000806001007006003C18000FE00014117D9018>79 D<C0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C002197C9209>106 D E /Ff 24 121
df<7FE000FFF0007FE0000E00000E00000E00000E00000E00000E00000E00000E00000E
00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E001C0E
001C0E001C0E001C0E001C7FFFFCFFFFFC7FFFFC161E7F9D1A>76
D<FFFE00FFFF80FFFFC01C03E01C00F01C00701C00781C00381C00381C00381C00381C00
781C00701C00F01C03E01FFFC01FFF801FFE001C00001C00001C00001C00001C00001C00
001C00001C00001C0000FF8000FF8000FF8000151E7E9D1A>80 D<1FF0003FFC007FFE00
780F00300700000380000380007F8007FF801FFF803F8380780380700380E00380E00380
E00380700780780F803FFFFC1FFDFC07F0FC16157D941A>97 D<FE0000FE0000FE00000E
00000E00000E00000E00000E00000E00000E3E000EFF800FFFE00FC1F00F80700F00380E
00380E001C0E001C0E001C0E001C0E001C0E001C0E001C0F00380F00780F80F00FC1E00F
FFC00EFF80063E00161E7F9D1A>I<00FF8003FFC00FFFE01F01E03C00C0780000700000
700000E00000E00000E00000E00000E000007000007000007800703C00701F01F00FFFE0
03FFC000FE0014157D941A>I<001FC0001FC0001FC00001C00001C00001C00001C00001
C00001C001F1C007FDC00FFFC01E0FC03C07C07803C07001C0E001C0E001C0E001C0E001
C0E001C0E001C0E001C07003C07003C03807C03E0FC01FFFFC07FDFC01F1FC161E7E9D1A
>I<01F80007FF000FFF801E07C03C01C07800E07000E0E00070E00070FFFFF0FFFFF0FF
FFF0E000007000007000007800703C00701F01F00FFFE003FFC000FE0014157D941A>I<
0007E0001FF0003FF800787800F03000E00000E00000E00000E0007FFFF0FFFFF0FFFFF0
00E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E000
00E00000E00000E0003FFF807FFFC03FFF80151E7F9D1A>I<01F87C07FFFE0FFFFE1E07
8C1C03803801C03801C03801C03801C03801C01C03801E07801FFF001FFE0039F8003800
003800001C00001FFF801FFFE03FFFF878007C70001CE0000EE0000EE0000EE0000E7000
1C78003C3E00F81FFFF007FFC001FF0017217F941A>I<FE0000FE0000FE00000E00000E
00000E00000E00000E00000E00000E3E000EFF800FFFC00FC1C00F80E00F00E00E00E00E
00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E0FFE3FEFF
E7FEFFE3FE171E7F9D1A>I<00C00001E00001E00000C000000000000000000000000000
0000000000007FE0007FE0007FE00000E00000E00000E00000E00000E00000E00000E000
00E00000E00000E00000E00000E00000E00000E00000E0007FFF80FFFFC07FFF80121F7C
9E1A>I<FE0000FE0000FE00000E00000E00000E00000E00000E00000E00000E0FFC0E1F
FE0E0FFC0E03C00E07800E0F000E1E000E3C000E78000EFC000FFC000FDE000F8F000E07
800E03800E01C00E01E00E00F0FFE3FEFFE3FFFFE3FE181E7F9D1A>107
D<FFE000FFE000FFE00000E00000E00000E00000E00000E00000E00000E00000E00000E0
0000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E0
0000E00000E00000E000FFFFE0FFFFE0FFFFE0131E7D9D1A>I<7CE0E000FFFBF8007FFF
F8001F1F1C001E1E1C001E1E1C001C1C1C001C1C1C001C1C1C001C1C1C001C1C1C001C1C
1C001C1C1C001C1C1C001C1C1C001C1C1C001C1C1C001C1C1C007F1F1F00FF9F9F807F1F
1F00191580941A>I<FE3E00FEFF80FFFFC00FC1C00F80E00F00E00E00E00E00E00E00E0
0E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E0FFE3FEFFE7FEFFE3FE
17157F941A>I<01F00007FC001FFF003E0F803C07807803C07001C0E000E0E000E0E000
E0E000E0E000E0E000E0F001E07001C07803C03C07803E0F801FFF0007FC0001F0001315
7D941A>I<FE3E00FEFF80FFFFE00FC1F00F80700F00380E00380E001C0E001C0E001C0E
001C0E001C0E001C0E001C0F00380F00780F80F00FC1E00FFFC00EFF800E3E000E00000E
00000E00000E00000E00000E00000E00000E0000FFE000FFE000FFE00016207F941A>I<
7F83F0FF8FF87FBFFC03FC3C03F01803E00003C00003C000038000038000038000038000
0380000380000380000380000380000380007FFF00FFFF007FFF0016157E941A>114
D<07FB801FFF807FFF80780780E00380E00380E003807800007FC0003FFC0007FE00003F
800007806001C0E001C0E001C0F003C0FC0780FFFF00EFFE00E3F80012157C941A>I<00
C00001C00001C00001C00001C00001C00001C0007FFFE0FFFFE0FFFFE001C00001C00001
C00001C00001C00001C00001C00001C00001C00001C00001C07001C07001C07001C07000
E0E000FFE0007FC0001F00141C7F9B1A>I<FE0FE0FE0FE0FE0FE00E00E00E00E00E00E0
0E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E00E01E00F03E0
07FFFE03FFFE00FCFE17157F941A>I<7F83FCFFC7FE7F83FC0E00E00E00E00E00E00701
C00701C00701C003838003838003838001C70001C70001C70000EE0000EE0000EE00007C
00007C0000380017157F941A>I<FF83FEFFC7FEFF83FE3800383800381C00701C00701C
00701C38701C7C701C7C700E6CE00E6CE00EEEE00EEEE00EEEE00EC6E006C6C007C7C007
C7C003838017157F941A>I<7FC7F87FCFFC7FC7F80703C003838003C70001EF0000FE00
007C00007800003800007C0000EE0001EE0001C7000383800783C00F01C07FC7FCFFC7FE
7FC7FC17157F941A>I E /Fg 1 14 df<0780101FC0103FE0207FF020603040C0108080
1080000900000900000A00000A00000A00000C00000C0000080000080000080000180000
1800001800003000003000003000003000006000006000004000141B7F9115>13
D E /Fh 3 52 df<0C001C00EC000C000C000C000C000C000C000C000C000C000C000C00
0C000C000C000C00FFC00A137D9211>49 D<1F0060C06060F070F0306030007000700060
00C001C00180020004000810101020207FE0FFE00C137E9211>I<0FC030707038703870
380038003000E00FC0007000380018001C601CF01CF018E03860701FC00E137F9211>I
E /Fi 12 126 df<0000180000300000600000E00000C000018000038000070000060000
0E00000C00001C0000380000380000700000700000E00000E00001E00001C00001C00003
80000380000380000780000700000700000F00000E00000E00001E00001E00001E00001C
00001C00003C00003C00003C00003C000038000078000078000078000078000078000078
0000780000780000700000F00000F00000F00000F00000F00000F00000F00000F00000F0
0000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F0
0000F00000F00000F00000F00000F0000070000078000078000078000078000078000078
00007800007800003800003C00003C00003C00003C00001C00001C00001E00001E00001E
00000E00000E00000F000007000007000007800003800003800003800001C00001C00001
E00000E00000E000007000007000003800003800001C00000C00000E0000060000070000
03800001800000C00000E0000060000030000018157C768121>32
D<C000006000003000003800001800000C00000E000007000003000003800001800001C0
0000E00000E000007000007000003800003800003C00001C00001C00000E00000E00000E
00000F000007000007000007800003800003800003C00003C00003C00001C00001C00001
E00001E00001E00001E00000E00000F00000F00000F00000F00000F00000F00000F00000
F00000700000780000780000780000780000780000780000780000780000780000780000
780000780000780000780000780000780000780000780000780000780000780000780000
780000780000780000780000700000F00000F00000F00000F00000F00000F00000F00000
F00000E00001E00001E00001E00001E00001C00001C00003C00003C00003C00003800003
80000780000700000700000F00000E00000E00000E00001C00001C00003C000038000038
0000700000700000E00000E00001C0000180000380000300000700000E00000C00001800
00380000300000600000C00000157C7F8121>I<FFF0FFF0FFF0E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
E000E000E000E000E000FFF0FFF0FFF00C7C758118>I<FFF0FFF0FFF000700070007000
700070007000700070007000700070007000700070007000700070007000700070007000
700070007000700070007000700070007000700070007000700070007000700070007000
700070007000700070007000700070007000700070007000700070007000700070007000
700070007000700070007000700070007000700070007000700070007000700070007000
700070007000700070007000700070007000700070007000700070007000700070007000
700070007000700070007000700070007000700070007000700070007000700070007000
70007000700070007000700070FFF0FFF0FFF00C7C808118>I<FFFFFFFFE0FFFFFFFFF0
7000001FF078000001F03C000000781C000000180E0000000C0F00000004070000000403
8000000203C000000001E000000000E0000000007000000000780000000038000000001C
000000001E000000000F0000000007000000000380000000038000000003000000000700
00000006000000000C000000001800000000380000000030000000006000000000C00000
0001C00000000180000002030000000406000000040E0000000C0C000000181800000078
30000001F07000001FF07FFFFFFFF0FFFFFFFFE0272A7E7F2C>80
D<E000001CE000001CE000001CE000001CE000001CE000001CE000001CE000001CE00000
1CE000001CE000001CE000001CE000001CE000001CE000001CE000001CE000001CE00000
1CE000001CE000001CE000001CE000001CE000001CE000001CE000001CE000001CE00000
1CE000001CE000001CE000001CE000001C700000387000003838000070380000701C0000
E01E0001E00F8007C007E01F8001FFFE00007FF800001FE0001E2A7E7F23>83
D<FFFFFFFFFFFFC0FFFFFFFFFFFFE07F00000001FFE07F000000001FE03F8000000003F0
1FC000000000F00FC000000000380FE0000000001807F0000000000C03F8000000000403
F8000000000401FC000000000200FE0000000000007F0000000000007F0000000000003F
8000000000001FC000000000000FC000000000000FE0000000000007F0000000000003F8
000000000003F8000000000001FC000000000000FE0000000000007E0000000000007F00
00000000003F8000000000001FC000000000001FC000000000000FC00000000000078000
0000000003800000000000070000000000000E0000000000001C00000000000038000000
0000007000000000000070000000000000E0000000000001C00000000000038000000000
00070000000000000E0000000000000E0000000000001C00000000020038000000000400
70000000000400E0000000000C01E0000000001801C00000000038038000000000F80700
00000001F00E000000000FF01C00000001FFF03FFFFFFFFFFFE03FFFFFFFFFFFE07FFFFF
FFFFFFE0FFFFFFFFFFFFC0373A7E7F3C>88 D<E00000000380E00000000380E000000003
80E00000000380E00000000380E00000000380E00000000380E00000000380E000000003
80E00000000380E00000000380E00000000380E00000000380E00000000380E000000003
80E00000000380E00000000380E00000000380E00000000380E00000000380E000000003
80E00000000380E00000000380E00000000380E00000000380E00000000380E000000003
80E00000000380E00000000380E00000000380E00000000380E00000000380E000000003
80E00000000380E00000000380E00000000380E00000000380E00000000380E000000003
80E00000000380E00000000380E000000003807000000007007000000007007000000007
00380000000E00380000000E001C0000001C001E0000003C000E00000038000700000070
0007C00001F00003E00003E00000F8000F8000007F007F0000001FFFFC00000007FFF000
000000FF800000293A7E7F2E>91 D<0001F8000FF8003FF800FFF801FFF803FE0007E000
0F80001E0000380000700000600000E00000C00000150E818413>122
D<FC0000FF8000FFE000FFF800FFFC0003FE00003F00000F800003C00000E00000700000
30000038000018150E818413>I<C00000E000006000007000003800001E00000F800007
E00003FE0001FFF800FFF8003FF8000FF80001F8150E818D13>I<000018000038000030
0000700000E00003C0000F80003F0003FE00FFFC00FFF800FFE000FF8000FC0000150E81
8D13>I E /Fj 13 127 df<001800001800003C00003C00004E00004E00008700008700
0103800303C00201C00601E00400E00C00F008007010007810003820003C20001C40001E
7FFFFEFFFFFFFFFFFF18177E961D>1 D<00300000300000300000300000300000300000
3000003000003000003000003000FFFFFCFFFFFC00300000300000300000300000300000
300000300000300000300000300000300016187E931B>43 D<07C018303018701C600C60
0CE00EE00EE00EE00EE00EE00EE00EE00EE00E600C600C701C30181C7007C00F157F9412
>48 D<03000700FF00070007000700070007000700070007000700070007000700070007
000700070007007FF00C157E9412>I<0F8030E040708030C038E0384038003800700070
006000C00180030006000C08080810183FF07FF0FFF00D157E9412>I<0FE03030601870
1C701C001C00180038006007E000300018000C000E000EE00EE00EC00C401830300FE00F
157F9412>I<FFFFFCFFFFFC000000000000000000000000000000000000FFFFFCFFFFFC
160A7E8C1B>61 D<FCFCC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0FCFC06217D980A>91 D<FCFC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C
0C0C0C0C0C0C0C0CFCFC062180980A>93 D<0FC0186030307038E018FFF8E000E000E000
600070083010183007C00D0E7F8D10>101 D<FC7C001D8E001E07001C07001C07001C07
001C07001C07001C07001C07001C07001C07001C0700FF9FE0130E808D14>110
D<FCFE7C3838383838101C3C201C3C201C4C200E4E400E4E400E86400787800787800703
80030300030300160E7F8D19>119 D<3C207FC087800B037D9512>126
D E /Fk 15 122 df<07C0000C3040101040201880601880C00C80C00D00C00E00800E00
800C00C01C00C02C0060C4803F0300120E7E8D17>11 D<000F0000308000C0C000804001
00600200C00400C0040080040180083F00083E0008010008018010018010018010018010
0180300300300300300600280C0044180043E00040000040000080000080000080000080
0000131D7F9614>I<0780401FC0403CE080603080C01080801100000900000A00000A00
000A00000C00000C00000C00000800000800000800001000001000001000001000121480
8D12>I<07C01C00300060006000FF00C000C000C000C000C000400030C01F000A0E7E8D
0E>15 D<080E183E184C198032003C003FC030706030603160316032C032C01C100E7E8D
14>20 D<60F0F070101020204040040A7D830A>59 D<071018F0307060706060C060C060
C06080C080C480C4C1C446C838700E0E7E8D13>97 D<7C00180018001800180030003000
30003000678068C070406060C060C060C060C06080C080C08180C10046003C000B177E96
0F>I<0300038003000000000000000000000000001C002400460046008C000C00180018
00180031003100320032001C0009177F960C>105 D<07C00C20101020186018C018C018
C01880308030C060C0C061803E000D0E7E8D11>111 D<1C3C2246238223034603060306
0306030C060C060C0C0C081A3019E018001800300030003000FC001014808D12>I<07C0
0C201870187038001E000FC003E000606060E060C0C0C1803F000C0E7E8D10>115
D<030003000600060006000600FFC00C000C000C00180018001800180030003080308031
0031001E000A147F930D>I<0F1F0011A18020C38020C300418000018000018000018000
030000030200C30200E70400C5080078F000110E7F8D14>120 D<1C0226064606460686
0C0C0C0C0C0C0C18181818181818380C7007B000300060706070C021801E000F147F8D11
>I E /Fl 13 107 df<FFFFF0FFFFF014027D881B>0 D<020002000200C218F2783AE00F
800F803AE0F278C2180200020002000D0E7E8E12>3 D<060F0F0E1E1E1C3C3838307070
60E0C04008117F910A>48 D<0F8007C019E01C202070301040184008C00C800480078004
8007000480038004800780048004C00C400860082030381010E01E600F8007C01E0E7E8D
23>I<01FF8007FF800E0000180000300000600000600000600000C00000C00000FFFF80
FFFF80C00000C000006000006000006000003000001800000E000007FF8001FF8011167D
9218>I<0003000300060006000C000C00180018003000300060006000C000C001800180
03000300060006000C000C00180018003000300060006000C0004000101E7B9600>54
D<001F80007F800183800203800403000C03001806001004003000007000006000006000
00E00000E00000E00000E00000E00000F00100F002007804007E18003FF0000F80001117
809613>67 D<01FFE00FFFF818E0FC20E03E60E01EC0E00E00E00E00E00C00C00C00C018
01C01001C02001804001818003BE000378000300000700000600000600000E00000C0000
0C000018000017187F9619>80 D<0007E0003FF80060F800803801803003800003800003
C00003E00001F80000FF00003F800007C00003E01801E03000E06000E0E000C0F00080F8
01007E06003FF8000FE0001517809615>83 D<700040F800E07C00F03E00301E00100E00
100E00100F00200F00200700600700C00700C0070180070300070700070E00071C000738
0007700007E00007C00007800007000004000014187E9616>86 D<0078038001FC078003
3C0380001C0300001C0200001C0400001C0800001C3000001E4000001F8000000E000000
0E0000003E000000CE0000010E0000060E0000080E0000100E0000200E0000600F0800E0
0F1000F007E000E007800019177E9619>88 D<07801C1FC01E23E00301F00100F0010070
01007801007802003802003804003804003C08003C08001C10001C30001C60001CC0001D
80001F00001E00001C00001800003000C0E00061C0003F00001E0000181B7F9617>I<C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C002217C98
0A>106 D E /Fm 38 122 df<003F000000E180000380C020070060400E0070401C0070
403C0070803C003880780039007800390078003A00F0003A00F0003C00F0003800F00038
0070003800700078003000B800380338401C1C188007E00F001B157E941F>11
D<00007C00000183000002018000040180000801C0001001C0002001C0002001C0004001
C00040038000800380008003000080070001000E000107FC0001083800010FDC0002000E
0002000E0002000F0002000F0004000F0004000F0004000F0004000F0008001E0008001E
0008001C0008003C0014003800140070001400E0001201C00021838000207C0000200000
002000000040000000400000004000000040000000800000008000000080000000800000
001A2D7EA21C>I<01F00107F8010FFC021FFC02380E0460020440030880010880010800
00900000900000A00000A00000A00000C00000C00000C000008000008000008000018000
018000018000030000030000030000030000060000060000060000040000040018207F94
19>I<000F8000186000602000401000C00001800001800001800001800001C00001E000
01F00000F800003C00003E0000EF000387000703800E03801C01803C01803C0180780180
780180780180F00100F00100F00300F00200700600700400300C003808001C300007C000
14237EA216>I<007E038007000E001C00380078007000FFF8F000F000E000E000E000E0
00E0007000700038061C1807E00F157D9414>I<0300700701F80702780E04700E08000E
30000E40001C80001F00001FF0001C3C00380E00380E00380700380704700E08700E0870
0E08700610E003206001C016157D941C>20 D<03800000E00000F0000070000070000078
00003800003800003C00001C00001C00001C00001E00000E00000E00000F000007000007
00000780000780000F80001B800031C00021C00041C000C1E00180E00300E00600F00C00
701C0070380078700038E00038C0001C16237DA21C>I<07FFFF1FFFFF3FFFFF30410040
410080410080C3000082000082000182000182000106000306000307000707000607000E
07000E07001C03801C038018030018157E941C>25 D<000F800018E000707000E07000C0
380180380380780380780700780700780700780E00F00E00F00E00F00E01E01C01C01C01
C01E03801E0700390C0038F000380000380000700000700000700000700000E00000E000
00E00000E00000C0000015207E9419>I<70F8F8F87005057C840E>58
D<70F8FCFC7404040404080810102040060F7C840E>I<0000001800000078000001E000
00078000001E00000078000003E000000F8000003C000000F0000003C000000F0000003C
000000F0000000F00000003C0000000F00000003C0000000F00000003C0000000F800000
03E0000000780000001E0000000780000001E000000078000000181D1C7C9926>I<0000
80000180000180000300000300000300000600000600000600000C00000C00000C000018
0000180000180000300000300000300000600000600000600000C00000C00000C0000180
000180000180000180000300000300000300000600000600000600000C00000C00000C00
00180000180000180000300000300000300000600000600000600000C00000C00000C000
0011317DA418>I<C0000000F00000003C0000000F00000003C0000000F00000003E0000
000F80000001E0000000780000001E0000000780000001E00000007800000078000001E0
0000078000001E00000078000001E000000F8000003E000000F0000003C000000F000000
3C000000F0000000C00000001D1C7C9926>I<00000080000000018000000001C0000000
03C000000003C000000007C00000000BC00000000BC000000013C000000033C000000023
C000000043C000000043E000000081E000000181E000000101E000000201E000000201E0
00000401E000000C01E000000801E000001001E000001FFFF000002000F000006000F000
004000F000008000F000008000F000010000F000030000F000020000F000040000F8000C
0000F8001E0000F800FF800FFF8021237EA225>65 D<007FFFFFC000078003C000078000
C000078000C0000F0000C0000F0000C0000F000080000F000080001E000080001E000080
001E008080001E008000003C010000003C010000003C030000003C070000007FFE000000
780600000078060000007806000000F004000000F004000000F004010000F000020001E0
00020001E000020001E000040001E0000C0003C000080003C000180003C000300003C000
700007C003F000FFFFFFE00022227EA124>69 D<007FC00001FF0007C00003E00007C000
05E00007C00005E00009E0000BC00009E0000BC00009E00013C00009E00023C00011E000
27800011E00047800011E00047800011E00087800021E0010F000020F0010F000020F002
0F000020F0040F000040F0041E000040F0081E000040F0081E000040F0101E000080F020
3C00008078203C00008078403C00008078803C0001007880780001007900780001007900
780001007A00780002007C00F00002007C00F00002003800F00006003800F0000F003001
F000FFE0203FFF0030227EA12F>77 D<00007F00000381C0000E00600038003800700038
00E0001C01C0001E0380000E0700000E0F00000F0E00000F1C00000F3C00000F3C00000F
7800000F7800000F7800000FF000001EF000001EF000001EF000003CF000003CF000003C
E0000078E0000078E00000F0F00000E0F00001E0F00003C0700007807800070038000E00
1C0038000E0070000783C00000FE000020247DA225>79 D<00007F00000381C0000E0060
003800380070003800E0001C01C0001E0380000E0700000E0F00000F0E00000F1E00000F
3C00000F3C00000F7800000F7800000F7800000FF000001EF000001EF000001EF000001C
F000003CE000003CE0000078E0000078E00000F0E00000E0F00001E0F01E03C070210380
7840870038408E001C40B8000E40F00007C1C02000FEC0200000C0200001C0400001C0C0
0001C0800001C3800001FF000000FF000000FE0000007800202D7DA227>81
D<007FFFE0000007803C000007800E000007800700000F000780000F000380000F0003C0
000F0003C0001E000780001E000780001E000780001E000F00003C001E00003C003C0000
3C007000003C01C000007FFE00000078078000007801C000007801E00000F000F00000F0
00F00000F000F00000F000F00001E001E00001E001E00001E001E00001E001E00003C003
C00003C003C04003C003C04003C001C08007C001C080FFFC00E3000000003C0022237EA1
25>I<1FFFFFFE1E01E00E1801E0063001E0062003C0062003C0064003C0044003C00440
078004800780048007800400078000000F0000000F0000000F0000000F0000001E000000
1E0000001E0000001E0000003C0000003C0000003C0000003C0000007800000078000000
7800000078000000F0000000F0000000F0000000F0000001F00000FFFFC0001F227EA11D
>84 D<FFF8007FC00F80000F000F00000C000F000008000F000010000F80001000078000
200007800060000780004000078000800007800080000780010000078002000007C00200
0003C004000003C00C000003C008000003C010000003C010000003C020000003E0400000
03E040000001E080000001E180000001E100000001E200000001E200000001E400000001
F800000000F800000000F000000000E000000000E000000000C000000000C00000002223
7DA11C>86 D<007FFC03FF0007E000F80007C000E00003C000800003E001000001E00200
0001F006000001F00C000000F018000000F81000000078200000007C400000007C800000
003D000000003E000000001E000000001F000000001F000000002F000000006F80000000
C78000000187C000000103C000000203C000000403E000000801E000001001F000002000
F000004000F800008000F80001800078000300007C000F8000FC00FFE007FFC028227FA1
28>88 D<FFF8003FE00F80000F000F80000C000F80000800078000100007C000200007C0
00400003C000800003E001800001E003000001E002000001F004000000F008000000F010
000000F82000000078400000007CC00000007C800000003D000000003E000000003C0000
00003C000000003C000000003C0000000078000000007800000000780000000078000000
00F000000000F000000000F000000000F000000001F00000003FFF00000023227EA11C>
I<00786001C4E00302E00601C00E01C01C01C03C01C0380380780380780380780380F007
00F00700F00700F00708F00E10700E10701E1030262018C6200F01C015157E941A>97
D<03C0003F80000380000380000380000700000700000700000700000E00000E00000E00
000E00001C00001C78001D8E001E07003C07003803803803803807807007807007807007
80700780E00F00E00F00E00F00E01E00E01C00601C0060380030700030C0000F00001123
7DA215>I<003F0000E0800380C00701C00E03C01C03C03C00003C000078000078000078
0000F00000F00000F00000F000007000407000403001803802001C1C0007E00012157E94
15>I<007C000382000701000E01001C0100380100780200700400FFF800F00000F00000
E00000E00000E00000E00000E00080E000807003003004001838000FC00011157D9417>
101 D<00E000E001E000C00000000000000000000000000000000000001E002300438043
8083808380870007000E000E000E001C001C0038003820384070407040308031001E000B
227EA111>105 D<0000E00001E00001E00000C000000000000000000000000000000000
0000000000000000000000001E0000230000438000838001038001038001038000070000
0700000700000700000E00000E00000E00000E00001C00001C00001C00001C0000380000
380000380000380000700000700000700070E000F0C000F180006300003E0000132C81A1
14>I<003E0000C1800380C00700E00E00E01C00F03C00F03C00F07800F07800F07800F0
F001E0F001E0F001C0F003C0700380700700700600381C001C380007E00014157E9417>
111 D<03C0F004631C04740E08780E08700708700708700F00E00F00E00F00E00F00E00F
01C01E01C01E01C01E01C03C03803803803803C07003C0E0072180071E00070000070000
0E00000E00000E00000E00001C00001C00001C0000FFC000181F819418>I<3C0F004630
C04741C08783C08783C08701808700000E00000E00000E00000E00001C00001C00001C00
001C000038000038000038000038000070000030000012157E9416>114
D<007E0000810003008002018006038006030006000007000007F80003FE0001FF00003F
00000780000380700380F00300F00300E002004004003018000FE00011157E9417>I<00
6000E000E000E000E001C001C001C001C00380FFFC0380038007000700070007000E000E
000E000E001C001C001C001C08381038103820182018C007000E1F7F9E12>I<1E00C023
01E04381F04380F08380708380308700300700200E00200E00200E00201C00401C00401C
00801C00801C01001C01001C02000C040006080003F00014157E9418>118
D<01E0F006310C081A1C101A3C201C3C201C18201C000038000038000038000038000070
0000700000700000700860E010F0E010F0E020E170404230803C1F0016157E941C>120
D<1E00302300704380704380E08380E08380E08700E00701C00E01C00E01C00E01C01C03
801C03801C03801C03801C07001C07001C07001C0F000C3E0003CE00000E00000E00001C
00601C00F03800F03000E0600080C0004180003E0000141F7E9418>I
E /Fn 31 107 df<FFFFFFFCFFFFFFFC1E027C8C27>0 D<70F8F8F87005057C8E0E>I<80
0002C0000660000C3000181800300C00600600C003018001830000C600006C0000380000
3800006C0000C6000183000301800600C00C006018003030001860000CC0000680000217
18789727>I<00C00000C00000C00000C00000C000C0C0C0F0C3C038C7000EDC0003F000
00C00003F0000EDC0038C700F0C3C0C0C0C000C00000C00000C00000C00000C00012157D
9619>I<000FFFFC007FFFFC01F0000003800000060000000C0000001800000030000000
300000006000000060000000C0000000C0000000C0000000C0000000C0000000C0000000
C000000060000000600000003000000030000000180000000C0000000600000003800000
01F00000007FFFFC000FFFFC000000000000000000000000000000000000000000000000
00000000000000007FFFFFFC7FFFFFFC1E277C9F27>18 D<0000000C0000003C000000F0
000003C000000F0000003C000000F0000007C000001F00000078000001E0000007800000
1E00000078000000E0000000780000001E0000000780000001E0000000780000001F0000
0007C0000000F00000003C0000000F00000003C0000000F00000003C0000000C00000000
000000000000000000000000000000000000000000000000000000007FFFFFF8FFFFFFFC
1E277C9F27>20 D<C0000000F00000003C0000000F00000003C0000000F00000003C0000
000F80000003E0000000780000001E0000000780000001E0000000780000001C00000078
000001E00000078000001E00000078000003E000000F8000003C000000F0000003C00000
0F0000003C00000070000000C00000000000000000000000000000000000000000000000
0000000000000000000000007FFFFFF8FFFFFFFC1E277C9F27>I<07E000011FF800013F
FE0001781F000360078003C001E006C000F81E80007FFC80001FF8800007E00000000000
00000007E000011FF800013FFE0001781F000360078003C001E006C000F81E80007FFC80
001FF8800007E020167D9727>25 D<80000000C0000000C0000000C00000006000000060
0000003000000030000000180000000C0000000700000003C0000000FC0000003FE00000
03FFFC0003FFFC003FE00000FC000003C00000070000000C000000180000003000000060
0000006000000060000000C0000000C0000000C00000001E1D7C9A27>31
D<000000006000000000003000000000003000000000001800000000001800000000000C
00000000000600000000000380FFFFFFFFFFE0FFFFFFFFFFC00000000003800000000006
00000000000C000000000018000000000018000000000030000000000030000000000060
002B127D9432>33 D<03F80001F80007FE000FFE001E3F801C0300380FC03001802003E0
6000804001F0C000404000F9800040C0007F00002080003F00002080003E00002080001F
00002080000F80002080001F80002080001FC00060400033E00040400061F000402000C0
F800803001807E03801807003F8F000FFE000FFC0003F00003F8002B157D9432>49
D<001FFF007FFF01E0000380000600000C00001800003000003000006000006000006000
00C00000C00000FFFFFFFFFFFFC00000C000006000006000006000003000003000001800
000C000006000003800001E000007FFF001FFF181E7C9A21>I<00000300000300000600
000600000C00000C0000180000180000300000300000600000600000C00000C00000C000
0180000180000300000300000600000600000C00000C0000180000180000300000300000
600000600000C00000C0000180000180000300000300000300000600000600000C00000C
0000180000180000300000300000600000600000C00000400000183079A300>54
D<00000780000F803FC00010C07BC0002071C3E000203B81E000403B00F000401E00F800
401E007800601E007C00301E003E00181E001E000C1E001F00061E000F00021E000F8003
1F000F00011F003C00011F00F000011FFFE000011FFF0000431F0F0000431F0F0000421F
0F0000261F0F0000181E0F0000001E0F0000001E0F0000001E0F0000001E0F0000001E07
8000001E078000701C0F0000E01C0F0000201807830010380786001030078C000C6003F8
0003C000F00021257EA324>60 D<00000006000000000E000000001E000000003E000000
003E000000007E000000005E00000000DE000000009E000000019E000000011E00000003
1E000000021E000000061E0000000C1E0000000C1E000000181E000000181E000000301E
000000601E000000601E000000C01E000001C01E000001801E000003001E0000077FFF00
0007FFFF00000FFFFF00001C000F000038000F004070000F0040F0000F80E1E0000F80FF
C0000780FF800007F8FF000007F07E000003C03C0000000025267EA328>65
D<00003F000001FF800007FFC0000E07C0003003C00060038000C0038001800780030007
00070006000E000E000E0018001C0010001C0000003C0000003800000038000000780000
007000000070000000F0000000F0000000F0000000F0000000F0000000F0000000F00000
00F8000300F80006007C000C007C0018003E0030003F80C0001FFF80000FFE000003F800
001A2480A21A>67 D<0000180000001000007800000030000078000000600000F8000000
600000F8000000E00000F8000001E00000FC000003E00000FC000007C00000BC00000FC0
00013C00000FC000013C00001FC000013C00003BC000013E000073C000023E0000E3C000
021E0001E38000021E0003C38000041E0003878000041F0007078000041F000E07800008
0F001C078000080F0038078000080F8078070000100F80F0070000100781E00F00001007
83C00F00002007C7800F00002007CF000F00004003FE000F00004003FC000F0000C001F8
000F00008001F0000F00618000E0000F007F0000C0000F00FF000000000FF0FE00000000
0FE0FE0000000007803C00000000000034257EA23C>77 D<000181F800000207FE00000C
0FFF000010303F800060600FC000C0C007C00181C003C003038003E007030003E00E0700
01E00E0E0001E01C0E0001E01C180001E038000001E038000001E078000001E070000001
C070000001C0F0000003C0F000000380F000000380F000000780F000000700F000000600
F000000E00F800001C00F80000180078000030007C000060007E0000C0003F000180001F
800600000FE03C000007FFF0000003FFC0000000FE00000023247DA228>79
D<000FFFE000007FFFFC0001FFFFFF00038780FF800C07801FC018078007C038070003E0
70070003E0600F0001E0C00F0001E0000F0001E0000F0001C0000E0001C0000E00038000
1E000380001E000700001E000600001C000C00001C001000003C00600000380380000038
7F00000079FC0000007BE000000070000000007000000000F000000000E000000000E000
000001E000000001C000000001C000000003800000000380000000070000000006000000
0023247FA123>I<00003F800001FFE00007FFF0000E03F8003000FC0040007E0180003E
0300001E0700001F0E00001F0C00000F1C00000F3800000F3800000F7800000F7000000F
7000000EF000000EF000001EF000001CF000001CF0000038F8000038F80000707C000060
7E0060E03F0181C01FFF01800FFC030007F0040000001800000060000007C0000FFF0000
3FFC00017FFE000703FFC00E007FF80C000FFFF00001FFE000003F8020297BA229>I<00
001FC00000FFF00001FFF8000701FC000C007C0018003C0030003C0070003800F0002000
F0000000F0000000F8000000FC0000007E0000003F8000001FE000000FF8000003FC0000
00FE0000003F0000001F8000000FC0060007C00C0003C0380003C0700003C070000380F0
000380F0000700F8000600F8000C007E0018007F80F0003FFFC0000FFF000003F800001E
247FA21E>83 D<00F000004003F80001C00FF80003C01878000380207800078000700007
00007000070000F0000F0000E0000E0000E0001E0001C0001E0001C0003C000380003C00
0380007C000700007C00070000F8000E0000F8000E0001F8001E0003F0001C000370001C
0007F00038000EF00038000CE000780018E000700031E000700061E000F000C1C000F001
81C000F00303C000F00603C000F80C03C000FC3003C0007FE003F8003F8003F0001E0001
C000222381A11F>85 D<7C0000C0FF0000F03F8001F00F8001F807C001F807C0007803E0
003803E0001801E0001001E0001001F0001001F0003000F0002000F0006000F0004000F0
00C000F0018000F0038000F0030000F0070000F00E0000F01C0000F0380000F0780000F0
F00000E1E00000E3C00001E7800001EF000001FE000001FC000001F8000001F0000001E0
000003800000030000001D247EA11F>I<7C000018000CFE000078000E3F00007C001F1F
80007C001F0F80007C001F07C000FC000707C001BE000303C001BE000303E0031E000203
E0031E000201E0061F000201E0041F000201E00C0F000401E0180F000401E0180F800801
E0300F801801E07007801801E06007803001E0C007803001E1C007806001E18007C0C001
E30007C0C001E70003C18001E60003C38001CC0003C30001DC0003C60003F80003CE0003
F00003DC0003F00003D80003E00003F80003C00003F00003800003E00003800003C00007
000003C00006000001800004000001000030247EA131>I<0003E00030000FF00078001F
F001F80030F800780060F800780000780070000078006000007800C00000780180000078
02000000780C0000007C100000007C600000003D800000003F000000003C000000003C00
0000007C00000001BC000000063C0000000C3C000000303E000000403E000001801E0000
02001E00000C001E000018001E000030001E000070001E0000F0001F0600F0001F0C00FC
000FF800F8000FF000600007C00025227EA124>I<03F0000E000FF8000F8018FC001F80
207E001FC0003F0007C0001F0001C0000F8001C0000F8000C00007C000800007C0008000
03C000800003C001000003C001000003E001000003E002000001E002000001E004000001
E00C000001E008000001E018000001E030000001E020000001E060000001E0C0000001E1
80000001E380000001E700000001EE00000001FC00000001F800000001F000000001E000
004003C000004003800000E00F000000E01E000000F87C000000FFF80000007FE0000000
7FC00000001F0000000022297EA121>I<40000040C00000C0C00000C0C00000C0C00000
C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000
C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000
C0600001806000018030000300180006000E001C000780780001FFE000007F80001A1F7D
9D21>91 D<007F800001FFE000078078000E001C00180006003000030060000180600001
80C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000
C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000C0C00000
C0C00000C0C00000C0C00000C0C00000C0400000401A1F7D9D21>I<000F0038007000E0
01C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00380
07001E00F0001E000700038001C001C001C001C001C001C001C001C001C001C001C001C0
01C001C001C001C001C000E000700038000F10317CA419>102 D<F0001E000700038001
C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C000E000
700038000F0038007000E001C001C001C001C001C001C001C001C001C001C001C001C001
C001C001C001C001C0038007001E00F00010317CA419>I<C0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C002317AA40E>106 D E /Fo 40 123 df<007E0001C1800301800703C00E03C00E0180
0E00000E00000E00000E00000E0000FFFFC00E01C00E01C00E01C00E01C00E01C00E01C0
0E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C07F87F8151D80
9C17>12 D<003F07E00001C09C18000380F018000701F03C000E01E03C000E00E018000E
00E000000E00E000000E00E000000E00E000000E00E00000FFFFFFFC000E00E01C000E00
E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E0
1C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C
007FC7FCFF80211D809C23>14 D<60F0F0701010101020204080040C7C830C>44
D<FFE0FFE00B0280890E>I<60F0F06004047C830C>I<03C00C301818300C300C700E6006
6006E007E007E007E007E007E007E007E007E007E007E007E007E00760066006700E300C
300C18180C3007E0101D7E9B15>48 D<7FFFFFC0FFFFFFE0000000000000000000000000
0000000000000000000000000000000000000000FFFFFFE07FFFFFC01B0C7E8F20>61
D<000600000006000000060000000F0000000F0000000F00000017800000178000001780
000023C0000023C0000023C0000041E0000041E0000041E0000080F0000080F0000180F8
000100780001FFF80003007C0002003C0002003C0006003E0004001E0004001E000C001F
001E001F00FF80FFF01C1D7F9C1F>65 D<001F808000E0618001801980070007800E0003
801C0003801C00018038000180780000807800008070000080F0000000F0000000F00000
00F0000000F0000000F0000000F0000000F0000000700000807800008078000080380000
801C0001001C0001000E000200070004000180080000E03000001FC000191E7E9C1E>67
D<FFF00F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F
000F000F000F000F000F000F000F000F000F00FFF00C1C7F9B0F>73
D<FFF03FE00F000F000F000C000F0008000F0010000F0020000F0040000F0080000F0100
000F0200000F0400000F0E00000F1F00000F2F00000F2780000F4780000F83C0000F01E0
000F01E0000F00F0000F00F8000F0078000F003C000F003C000F001E000F001F000F001F
80FFF07FF01C1C7E9B20>75 D<FFF8000F80000F00000F00000F00000F00000F00000F00
000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00080F00
080F00080F00180F00180F00100F00300F00700F01F0FFFFF0151C7E9B1A>I<07E0801C
1980300580700380600180E00180E00080E00080E00080F00000F800007C00007FC0003F
F8001FFE0007FF0000FF80000F800007C00003C00001C08001C08001C08001C0C00180C0
0180E00300D00200CC0C0083F800121E7E9C17>83 D<7FFFFFC0700F01C0600F00C0400F
0040400F0040C00F0020800F0020800F0020800F0020000F0000000F0000000F0000000F
0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F
0000000F0000000F0000000F0000000F0000001F800003FFFC001B1C7F9B1E>I<1FC000
307000783800781C00301C00001C00001C0001FC000F1C00381C00701C00601C00E01C40
E01C40E01C40603C40304E801F870012127E9115>97 D<FC00001C00001C00001C00001C
00001C00001C00001C00001C00001C00001C00001C7C001D86001E03001C01801C01C01C
00C01C00E01C00E01C00E01C00E01C00E01C00E01C00C01C01C01C01801E030019060010
F800131D7F9C17>I<07E00C301878307870306000E000E000E000E000E000E000600070
04300418080C3007C00E127E9112>I<003F000007000007000007000007000007000007
0000070000070000070000070003E7000C1700180F00300700700700600700E00700E007
00E00700E00700E00700E00700600700700700300700180F000C370007C7E0131D7E9C17
>I<03E00C301818300C700E6006E006FFFEE000E000E000E00060007002300218040C18
03E00F127F9112>I<00F8018C071E061E0E0C0E000E000E000E000E000E00FFE00E000E
000E000E000E000E000E000E000E000E000E000E000E000E000E000E007FE00F1D809C0D
>I<00038003C4C00C38C01C3880181800381C00381C00381C00381C001818001C38000C
300013C0001000003000001800001FF8001FFF001FFF803003806001C0C000C0C000C0C0
00C06001803003001C0E0007F800121C7F9215>I<FC00001C00001C00001C00001C0000
1C00001C00001C00001C00001C00001C00001C7C001C87001D03001E03801C03801C0380
1C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C0380FF9FF0
141D7F9C17>I<18003C003C0018000000000000000000000000000000FC001C001C001C
001C001C001C001C001C001C001C001C001C001C001C001C001C00FF80091D7F9C0C>I<
00C001E001E000C000000000000000000000000000000FE000E000E000E000E000E000E0
00E000E000E000E000E000E000E000E000E000E000E000E000E000E060E0F0C0F1C06180
3E000B25839C0D>I<FC00001C00001C00001C00001C00001C00001C00001C00001C0000
1C00001C00001C3FC01C0F001C0C001C08001C10001C20001C40001CE0001DE0001E7000
1C78001C38001C3C001C1C001C0E001C0F001C0F80FF9FE0131D7F9C16>I<FC001C001C
001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C
001C001C001C001C001C001C001C00FF80091D7F9C0C>I<FC7E07E0001C838838001D01
9018001E01E01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C0
1C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C
00FF8FF8FF8021127F9124>I<FC7C001C87001D03001E03801C03801C03801C03801C03
801C03801C03801C03801C03801C03801C03801C03801C03801C0380FF9FF014127F9117
>I<03F0000E1C00180600300300700380600180E001C0E001C0E001C0E001C0E001C0E0
01C06001807003803003001806000E1C0003F00012127F9115>I<FC7C001D86001E0300
1C01801C01C01C00C01C00E01C00E01C00E01C00E01C00E01C00E01C01C01C01C01C0180
1E03001D06001CF8001C00001C00001C00001C00001C00001C00001C0000FF8000131A7F
9117>I<03C1000C3300180B00300F00700700700700E00700E00700E00700E00700E007
00E00700600700700700300F00180F000C370007C7000007000007000007000007000007
00000700000700003FE0131A7E9116>I<FCE01D301E781E781C301C001C001C001C001C
001C001C001C001C001C001C001C00FFC00D127F9110>I<1F9030704030C010C010E010
F8007F803FE00FF000F880388018C018C018E010D0608FC00D127F9110>I<0400040004
0004000C000C001C003C00FFE01C001C001C001C001C001C001C001C001C001C101C101C
101C101C100C100E2003C00C1A7F9910>I<FC1F801C03801C03801C03801C03801C0380
1C03801C03801C03801C03801C03801C03801C03801C03801C07800C07800E1B8003E3F0
14127F9117>I<FF07E03C03801C01001C01000E02000E02000704000704000704000388
0003880003D80001D00001D00000E00000E00000E00000400013127F9116>I<FF3FCFE0
3C0F03801C0701801C0701001C0B01000E0B82000E0B82000E1182000711C4000711C400
0720C40003A0E80003A0E80003C0680001C0700001C0700001803000008020001B127F91
1E>I<7F8FF00F03800F030007020003840001C80001D80000F00000700000780000F800
009C00010E00020E000607000403801E07C0FF0FF81512809116>I<FF07E03C03801C01
001C01000E02000E020007040007040007040003880003880003D80001D00001D00000E0
0000E00000E000004000004000008000008000F08000F10000F300006600003C0000131A
7F9116>I<7FFC70386038407040F040E041C003C0038007000F040E041C043C0C380870
087038FFF80E127F9112>I E /Fp 1 4 df<040004000400C460E4E03F800E003F80E4E0
C4600400040004000B0D7E8D11>3 D E /Fq 47 122 df<0001FF803FE000001FFFE3FF
F800007F80FFF01E0000FE007F801F0001F800FF003F0003F801FF007F8007F001FE007F
8007F001FE007F8007F001FE007F8007F000FE003F0007F000FE001E0007F000FE000000
07F000FE00000007F000FE00000007F000FE000000FFFFFFFFFFFF80FFFFFFFFFFFF80FF
FFFFFFFFFF8007F000FE003F8007F000FE003F8007F000FE003F8007F000FE003F8007F0
00FE003F8007F000FE003F8007F000FE003F8007F000FE003F8007F000FE003F8007F000
FE003F8007F000FE003F8007F000FE003F8007F000FE003F8007F000FE003F8007F000FE
003F8007F000FE003F8007F000FE003F8007F000FE003F8007F000FE003F8007F000FE00
3F8007F000FE003F807FFF0FFFE3FFF87FFF0FFFE3FFF87FFF0FFFE3FFF8352A7FA939>
14 D<1C003E007F00FF80FF80FF807F003E001C0009097B8813>46
D<000E00001E00007E0007FE00FFFE00FFFE00F8FE0000FE0000FE0000FE0000FE0000FE
0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
007FFFFE7FFFFE7FFFFE17277BA622>49 D<00FF800003FFF0000FFFFC001F03FE003800
FF007C007F80FE003FC0FF003FC0FF003FE0FF001FE0FF001FE07E001FE03C003FE00000
3FE000003FC000003FC000007F8000007F000000FE000000FC000001F8000003F0000003
E00000078000000F0000001E0000003C00E0007000E000E000E001C001C0038001C00700
01C00FFFFFC01FFFFFC03FFFFFC07FFFFFC0FFFFFF80FFFFFF80FFFFFF801B277DA622>
I<007F800003FFF00007FFFC000F81FE001F00FF003F80FF003F807F803F807F803F807F
801F807F800F007F800000FF000000FF000000FE000001FC000001F8000007F00000FFC0
0000FFF0000001FC0000007E0000007F0000007F8000003FC000003FC000003FE000003F
E03C003FE07E003FE0FF003FE0FF003FE0FF003FC0FF007FC07E007F807C007F003F01FE
001FFFFC0007FFF00000FF80001B277DA622>I<00000E0000001E0000003E0000007E00
0000FE000000FE000001FE000003FE0000077E00000E7E00000E7E00001C7E0000387E00
00707E0000E07E0000E07E0001C07E0003807E0007007E000E007E000E007E001C007E00
38007E0070007E00E0007E00FFFFFFF8FFFFFFF8FFFFFFF80000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE00007FFFF8007FFFF8007FFFF81D277EA6
22>I<0C0003000F803F000FFFFE000FFFFC000FFFF8000FFFF0000FFFE0000FFFC0000F
FE00000E0000000E0000000E0000000E0000000E0000000E0000000E7FC0000FFFF8000F
80FC000E003E000C003F0000001F8000001FC000001FC000001FE000001FE018001FE07C
001FE0FE001FE0FE001FE0FE001FE0FE001FC0FC001FC078003F8078003F803C007F001F
01FE000FFFF80003FFF00000FF80001B277DA622>I<0007F000003FFC0000FFFE0001FC
0F0003F01F8007E03F800FC03F801FC03F801F803F803F801F003F8000007F0000007F00
00007F000000FF000000FF0FC000FF3FF800FF707C00FFC03E00FFC03F00FF801F80FF80
1FC0FF001FC0FF001FE0FF001FE0FF001FE07F001FE07F001FE07F001FE07F001FE03F00
1FE03F001FC01F801FC01F803F800FC03F0007E07E0003FFFC0000FFF000003FC0001B27
7DA622>I<380000003E0000003FFFFFF03FFFFFF03FFFFFF07FFFFFE07FFFFFC07FFFFF
807FFFFF0070000E0070000E0070001C00E0003800E0007000E000E0000000E0000001C0
00000380000007800000078000000F0000000F0000001F0000001F0000003F0000003E00
00003E0000007E0000007E0000007E0000007E000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE0000007C0000003800001C297CA822>I<00000380
0000000007C00000000007C0000000000FE0000000000FE0000000000FE0000000001FF0
000000001FF0000000003FF8000000003FF8000000003FF80000000073FC0000000073FC
00000000F3FE00000000E1FE00000000E1FE00000001C0FF00000001C0FF00000003C0FF
80000003807F80000007807FC0000007003FC0000007003FC000000E003FE000000E001F
E000001E001FF000001C000FF000001FFFFFF000003FFFFFF800003FFFFFF80000780007
FC0000700003FC0000700003FC0000E00001FE0000E00001FE0001E00001FF0001C00000
FF0001C00000FF00FFFE001FFFFEFFFE001FFFFEFFFE001FFFFE2F297EA834>65
D<FFFFFFF80000FFFFFFFF8000FFFFFFFFC00003F8001FF00003F8000FF80003F80007FC
0003F80003FC0003F80003FC0003F80003FE0003F80001FE0003F80001FE0003F80001FE
0003F80003FE0003F80003FC0003F80003FC0003F80007F80003F8000FF00003F8001FE0
0003F800FFC00003FFFFFE000003FFFFFFE00003F80007F00003F80003FC0003F80001FE
0003F80001FE0003F80000FF0003F80000FF0003F80000FF8003F80000FF8003F80000FF
8003F80000FF8003F80000FF8003F80000FF8003F80000FF0003F80001FF0003F80003FE
0003F80007FC0003F8001FF800FFFFFFFFF000FFFFFFFFC000FFFFFFFE000029297DA831
>I<00003FF001800003FFFE0380000FFFFF8780003FF007DF8000FF8001FF8001FE0000
7F8003FC00003F8007F000001F800FF000000F801FE0000007801FE0000007803FC00000
07803FC0000003807FC0000003807F80000003807F8000000000FF8000000000FF800000
0000FF8000000000FF8000000000FF8000000000FF8000000000FF8000000000FF800000
0000FF80000000007F80000000007F80000000007FC0000003803FC0000003803FC00000
03801FE0000003801FE0000007000FF00000070007F000000E0003FC00001E0001FE0000
3C0000FF8000F800003FF007E000000FFFFFC0000003FFFF000000003FF8000029297CA8
32>I<FFFFFFF80000FFFFFFFF8000FFFFFFFFE00003FC001FF80003FC0007FC0003FC00
01FE0003FC0000FF0003FC00007F8003FC00003FC003FC00001FC003FC00001FE003FC00
001FE003FC00000FF003FC00000FF003FC00000FF003FC00000FF003FC00000FF803FC00
000FF803FC00000FF803FC00000FF803FC00000FF803FC00000FF803FC00000FF803FC00
000FF803FC00000FF803FC00000FF803FC00000FF003FC00000FF003FC00000FF003FC00
001FE003FC00001FE003FC00001FC003FC00003FC003FC00007F8003FC00007F0003FC00
01FE0003FC0003FC0003FC001FF800FFFFFFFFE000FFFFFFFF8000FFFFFFFC00002D297D
A835>I<FFFFFFFFE0FFFFFFFFE0FFFFFFFFE003FC001FE003FC0007F003FC0001F003FC
0001F003FC0000F003FC00007003FC00007003FC00007003FC01C07803FC01C03803FC01
C03803FC01C03803FC03C00003FC03C00003FC0FC00003FFFFC00003FFFFC00003FFFFC0
0003FC0FC00003FC03C00003FC03C00003FC01C00E03FC01C00E03FC01C00E03FC01C01C
03FC00001C03FC00001C03FC00001C03FC00003C03FC00003803FC00007803FC0000F803
FC0001F803FC0003F803FC001FF8FFFFFFFFF0FFFFFFFFF0FFFFFFFFF027297DA82D>I<
FFFFFCFFFFFCFFFFFC01FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE00
01FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE00
01FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE00
01FE0001FE00FFFFFCFFFFFCFFFFFC16297EA81A>73 D<FFFC0000FFFEFFFE0000FFFEFF
FF0000FFFE03FF8000038003FF8000038003BFC0000380039FE0000380039FF000038003
8FF80003800387F80003800383FC0003800381FE0003800381FF0003800380FF80038003
807FC0038003803FC0038003801FE0038003800FF0038003800FF80380038007FC038003
8003FC0380038001FE0380038000FF0380038000FF83800380007FC3800380003FE38003
80001FE3800380000FF38003800007FB8003800007FF8003800003FF8003800001FF8003
800000FF80038000007F80038000007F80038000003F80038000001F80038000000F80FF
FE00000780FFFE00000380FFFE000003802F297DA836>78 D<0000FFE000000007FFFC00
00003FC07F8000007F001FC00001FC0007F00003F80003F80007F00001FC000FF00001FE
001FE00000FF001FE00000FF003FC000007F803FC000007F807FC000007FC07F8000003F
C07F8000003FC07F8000003FC0FF8000003FE0FF8000003FE0FF8000003FE0FF8000003F
E0FF8000003FE0FF8000003FE0FF8000003FE0FF8000003FE0FF8000003FE0FF8000003F
E07F8000003FC07FC000007FC07FC000007FC03FC000007F803FC000007F801FE00000FF
001FE00000FF000FF00001FE0007F00001FC0003F80003F80001FC0007F00000FF001FE0
00003FC07F8000000FFFFE00000000FFE000002B297CA834>I<FFFFFFF800FFFFFFFF00
FFFFFFFFC003FC003FE003FC000FF003FC0007F803FC0007FC03FC0003FC03FC0003FE03
FC0003FE03FC0003FE03FC0003FE03FC0003FE03FC0003FE03FC0003FE03FC0003FC03FC
0007FC03FC0007F803FC000FF003FC003FE003FFFFFF8003FFFFFE0003FC00000003FC00
000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC0000
0003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC000000
FFFFF00000FFFFF00000FFFFF0000027297DA82F>I<007F806003FFF0E007FFF9E00F80
7FE01F001FE03E0007E07C0003E07C0001E0FC0001E0FC0001E0FC0000E0FE0000E0FE00
00E0FF000000FFC000007FFE00007FFFE0003FFFFC001FFFFE000FFFFF8007FFFFC003FF
FFE000FFFFE00007FFF000007FF000000FF8000007F8000003F8600001F8E00001F8E000
01F8E00001F8F00001F0F00001F0F80003F0FC0003E0FF0007C0FFE01F80F3FFFF00E0FF
FE00C01FF0001D297CA826>83 D<7FFFFFFFFFC07FFFFFFFFFC07FFFFFFFFFC07F803FC0
3FC07E003FC007C078003FC003C078003FC003C070003FC001C0F0003FC001E0F0003FC0
01E0E0003FC000E0E0003FC000E0E0003FC000E0E0003FC000E0E0003FC000E000003FC0
000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0
000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0
000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0
000000003FC0000000003FC0000000003FC00000007FFFFFE000007FFFFFE000007FFFFF
E0002B287EA730>I<FFFFF0003FFF80FFFFF0003FFF80FFFFF0003FFF8003FE000001E0
0001FE000001C00001FF000003C00000FF000003800000FF0000038000007F8000070000
007F8000070000007FC0000F0000003FC0000E0000003FE0001E0000001FE0001C000000
1FF0001C0000000FF000380000000FF0003800000007F8007000000007F8007000000007
FC00F000000003FC00E000000003FE01E000000001FE01C000000001FF01C000000000FF
038000000000FF038000000000FF8780000000007F8700000000007FCF00000000003FCE
00000000003FFE00000000001FFC00000000001FFC00000000000FF800000000000FF800
000000000FF8000000000007F0000000000007F0000000000003E0000000000003E00000
00000001C000000031297FA834>86 D<FFFFE07FFFF007FFF0FFFFE07FFFF007FFF0FFFF
E07FFFF007FFF003FC0001FE00001C0003FC0001FE00001C0001FE0001FF0000380001FE
0000FF0000380001FF0000FF0000780000FF0000FF8000700000FF0000FF8000700000FF
8000FF8000F000007F8001FFC000E000007F8001FFC000E000003FC003FFE001C000003F
C0039FE001C000003FE0039FE003C000001FE0070FF0038000001FE0070FF0038000001F
F00F0FF0078000000FF00E07F8070000000FF00E07F80700000007F81E07FC0E00000007
F81C03FC0E00000007FC1C03FC1E00000003FC3801FE1C00000003FC3801FE1C00000001
FE7801FF3800000001FE7000FF3800000001FE7000FF3800000000FFF000FFF000000000
FFE0007FF000000000FFE0007FF0000000007FC0003FE0000000007FC0003FE000000000
3FC0003FC0000000003F80001FC0000000003F80001FC0000000001F80001F8000000000
1F00000F80000000001F00000F80000000000E00000700000044297FA847>I<01FF8000
07FFF0000F81F8001FC07E001FC07E001FC03F000F803F8007003F8000003F8000003F80
00003F80000FFF8000FFFF8007FC3F800FE03F803F803F803F003F807F003F80FE003F80
FE003F80FE003F80FE003F807E007F807F00DF803F839FFC0FFF0FFC01FC03FC1E1B7E9A
21>97 D<FFE0000000FFE0000000FFE00000000FE00000000FE00000000FE00000000FE0
0000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000
00000FE00000000FE1FE00000FE7FF80000FFE07E0000FF801F0000FF000F8000FE000FC
000FE000FE000FE0007F000FE0007F000FE0007F000FE0007F800FE0007F800FE0007F80
0FE0007F800FE0007F800FE0007F800FE0007F800FE0007F000FE0007F000FE0007F000F
E000FE000FE000FC000FF001F8000FF803F0000F9E07E0000F07FF80000E01FC0000212A
7EA926>I<001FF80000FFFE0003F01F0007E03F800FC03F801F803F803F801F007F800E
007F0000007F000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000
007F0000007F0000007F8000003F8001C01F8001C00FC0038007E0070003F01E0000FFFC
00001FE0001A1B7E9A1F>I<00003FF80000003FF80000003FF800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F800000003F800
000003F800000003F800000003F800001FE3F80000FFFBF80003F03FF80007E00FF8000F
C007F8001F8003F8003F8003F8007F0003F8007F0003F8007F0003F800FF0003F800FF00
03F800FF0003F800FF0003F800FF0003F800FF0003F800FF0003F8007F0003F8007F0003
F8007F0003F8003F8003F8001F8003F8000F8007F80007C00FF80003F03BFF8000FFF3FF
80003FC3FF80212A7EA926>I<003FE00001FFF80003F07E0007C01F000F801F801F800F
803F800FC07F000FC07F0007C07F0007E0FF0007E0FF0007E0FFFFFFE0FFFFFFE0FF0000
00FF000000FF0000007F0000007F0000007F0000003F8000E01F8000E00FC001C007E003
8003F81F0000FFFE00001FF0001B1B7E9A20>I<0007F0003FFC00FE3E01F87F03F87F03
F07F07F07F07F03E07F00007F00007F00007F00007F00007F00007F000FFFFC0FFFFC0FF
FFC007F00007F00007F00007F00007F00007F00007F00007F00007F00007F00007F00007
F00007F00007F00007F00007F00007F00007F00007F00007F00007F0007FFF807FFF807F
FF80182A7EA915>I<00FF81F003FFE7F80FC1FE7C1F80FC7C1F007C383F007E107F007F
007F007F007F007F007F007F007F007F007F007F003F007E001F007C001F80FC000FC1F8
001FFFE00018FF800038000000380000003C0000003E0000003FFFF8001FFFFF001FFFFF
800FFFFFC007FFFFE01FFFFFF03E0007F07C0001F8F80000F8F80000F8F80000F8F80000
F87C0001F03C0001E01F0007C00FC01F8003FFFE00007FF0001E287E9A22>I<FFE00000
00FFE0000000FFE00000000FE00000000FE00000000FE00000000FE00000000FE0000000
0FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000F
E07F00000FE1FFC0000FE787E0000FEE03F0000FF803F0000FF803F8000FF003F8000FF0
03F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003
F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8
000FE003F8000FE003F800FFFE3FFF80FFFE3FFF80FFFE3FFF80212A7DA926>I<07000F
801FC03FE03FE03FE01FC00F8007000000000000000000000000000000FFE0FFE0FFE00F
E00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00F
E00FE00FE0FFFEFFFEFFFE0F2B7DAA14>I<000700000F80001FC0003FE0003FE0003FE0
001FC0000F8000070000000000000000000000000000000000000000000001FFE001FFE0
01FFE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0
000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0
000FE0000FE0000FE0000FE0000FE07C0FE0FE0FE0FE0FC0FE1F80FE1F007C3E003FFC00
0FF000133784AA15>I<FFE00000FFE00000FFE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0
1FFC0FE01FFC0FE01FFC0FE007800FE00F000FE01E000FE03C000FE078000FE0E0000FE3
C0000FE7C0000FEFE0000FFFE0000FFFF0000FF3F8000FE3F8000FC1FC000FC0FE000FC0
7F000FC07F000FC03F800FC01FC00FC00FC00FC00FE0FFFC3FFEFFFC3FFEFFFC3FFE1F2A
7EA924>I<FFE0FFE0FFE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00F
E00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00F
E00FE00FE00FE00FE00FE0FFFEFFFEFFFE0F2A7DA914>I<FFC07F800FF000FFC1FFE03F
FC00FFC383F0707E000FC603F8C07F000FCC01F9803F000FD801FF003F800FF001FE003F
800FF001FE003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F80
0FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800F
E001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE0
01FC003F800FE001FC003F80FFFE1FFFC3FFF8FFFE1FFFC3FFF8FFFE1FFFC3FFF8351B7D
9A3A>I<FFC07F0000FFC1FFC000FFC787E0000FCE03F0000FD803F0000FD803F8000FF0
03F8000FF003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003
F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8
000FE003F8000FE003F8000FE003F800FFFE3FFF80FFFE3FFF80FFFE3FFF80211B7D9A26
>I<003FE00001FFFC0003F07E000FC01F801F800FC03F800FE03F0007E07F0007F07F00
07F07F0007F0FF0007F8FF0007F8FF0007F8FF0007F8FF0007F8FF0007F8FF0007F8FF00
07F87F0007F07F0007F03F800FE03F800FE01F800FC00FC01F8007F07F0001FFFC00003F
E0001D1B7E9A22>I<FFE1FE0000FFE7FF8000FFFE07E0000FF803F0000FF001F8000FE0
00FC000FE000FE000FE000FF000FE0007F000FE0007F000FE0007F800FE0007F800FE000
7F800FE0007F800FE0007F800FE0007F800FE0007F800FE0007F000FE000FF000FE000FF
000FE000FE000FE001FC000FF001F8000FF803F0000FFE0FE0000FE7FF80000FE1FC0000
0FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000F
E00000000FE0000000FFFE000000FFFE000000FFFE00000021277E9A26>I<001FC03800
00FFF0780003F838F80007E00DF8000FC007F8001FC007F8003F8003F8007F8003F8007F
8003F8007F0003F800FF0003F800FF0003F800FF0003F800FF0003F800FF0003F800FF00
03F800FF0003F8007F0003F8007F0003F8007F8003F8003F8003F8001F8007F8000FC007
F80007E01FF80003F07BF80000FFF3F800003FC3F800000003F800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F80000003FFF80
00003FFF8000003FFF8021277E9A24>I<FFC1F0FFC7FCFFCE3E0FD87F0FD87F0FF07F0F
F03E0FF01C0FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000F
E0000FE0000FE0000FE0000FE0000FE000FFFF00FFFF00FFFF00181B7E9A1C>I<03FE30
0FFFF01E03F03800F0700070F00070F00070F80070FC0000FFE0007FFE007FFF803FFFE0
1FFFF007FFF800FFF80003FC0000FC60007CE0003CF0003CF00038F80038FC0070FF01E0
F7FFC0C1FF00161B7E9A1B>I<00700000700000700000700000F00000F00000F00001F0
0003F00003F00007F0001FFFF0FFFFF0FFFFF007F00007F00007F00007F00007F00007F0
0007F00007F00007F00007F00007F00007F00007F00007F03807F03807F03807F03807F0
3807F03803F03803F87001F86000FFC0001F8015267FA51B>I<FFE03FF800FFE03FF800
FFE03FF8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000F
E003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE0
03F8000FE003F8000FE003F8000FE003F8000FE003F8000FE007F80007E007F80007E00F
F80003F03BFF8001FFF3FF80003FC3FF80211B7D9A26>I<FFFE03FF80FFFE03FF80FFFE
03FF8007F000700007F000700007F800F00003F800E00003FC01E00001FC01C00001FC01
C00000FE03800000FE038000007F070000007F070000007F8F0000003F8E0000003FDE00
00001FDC0000001FDC0000000FF80000000FF80000000FF800000007F000000007F00000
0003E000000003E000000001C00000211B7F9A24>I<FFFE7FFC0FFEFFFE7FFC0FFEFFFE
7FFC0FFE0FE007E000E007F003F001C007F003F001C007F807F803C003F807F8038003F8
07F8038001FC0EFC070001FC0EFC070001FE1EFC0F0000FE1C7E0E0000FE1C7E0E0000FF
383F1E00007F383F1C00007F783F3C00003FF01FB800003FF01FB800003FF01FF800001F
E00FF000001FE00FF000000FC007E000000FC007E000000FC007E00000078003C0000007
8003C0002F1B7F9A32>I<FFFC0FFF00FFFC0FFF00FFFC0FFF0007F003C00003F8078000
01FC07800000FE0F000000FF1E0000007F3C0000003FF80000001FF00000000FF0000000
0FF000000007F000000007F80000000FFC0000001FFE0000001EFE0000003C7F00000078
3F800000F01FC00001E01FE00001C00FE00003C007F000FFF01FFF80FFF01FFF80FFF01F
FF80211B7F9A24>I<FFFE03FF80FFFE03FF80FFFE03FF8007F000700007F000700007F8
00F00003F800E00003FC01E00001FC01C00001FC01C00000FE03800000FE038000007F07
0000007F070000007F8F0000003F8E0000003FDE0000001FDC0000001FDC0000000FF800
00000FF80000000FF800000007F000000007F000000003E000000003E000000001C00000
0001C000000003800000000380000038078000007C07000000FE0F000000FE0E000000FE
1E000000FE3C0000007C780000003FE00000000FC000000021277F9A24>I
E /Fr 52 123 df<00000FC0F8000030718E0000E0F31E0000C0F71E0001C0660C000180
0E000003800E000003800E000003800E000007001C000007001C000007001C000007001C
000007001C0000FFFFFFC0000E003800000E003800000E003800000E003800001C007000
001C007000001C007000001C007000001C007000001C00E000003800E000003800E00000
3800E000003800E000003801C000007001C000007001C000007001C000007001C0000060
03800000E003800000E003800000E003000000C003000001C0070000718E060000F19E0C
0000F31E180000620C3000003C07C00000272D82A21E>11 D<00000FE0000030180000E0
1C0001C03C0001803C000380380003800000038000000700000007000000070000000700
0000070000000E000000FFFFE0000E00E0000E00E0000E01C0001C01C0001C01C0001C01
C0001C0380001C038000380380003803800038070000380700003807000070070800700E
1000700E1000700E1000700E2000E0062000E003C000E0000000E0000000C0000001C000
0001C0000071800000F1800000F3000000620000003C0000001E2D82A21B>I<0C1E3F3F
1D02020204040810204080080F75A20F>39 D<0000800001000002000004000008000010
0000300000600000C00000C0000180000300000300000600000600000E00000C00001C00
00180000180000380000300000300000700000700000600000600000E00000E00000E000
00C00000C00000C00000C00000C00000C00000C00000C00000C00000C00000C00000C000
00C00000400000600000600000200000300000100000080000113278A414>I<00080000
040000060000020000030000030000010000018000018000018000018000018000018000
018000018000018000018000018000018000018000038000038000038000030000030000
0700000700000600000600000E00000C00000C00001C0000180000380000300000300000
600000600000C00001800001800003000006000004000008000010000020000040000080
0000113280A414>I<0E1E1E1E1E02020404080810204080070F7D840F>44
D<FFF0FFF0FFE00C037C8B11>I<70F8F8F0E005057A840F>I<07000F800F800F000E0000
0000000000000000000000000000000000000000007000F800F800F000E00009157A940F
>58 D<0000030000000300000007000000070000000F0000000F0000001F0000002F0000
002F0000004F0000004F8000008780000087800001078000020780000207800004078000
0407800008078000080780001007800030078000200780007FFF80004007C0008007C000
8003C0010003C0030003C0020003C0040003C0040003C00C0003C03C0007C0FF003FFC1E
237DA224>65 D<00FFFFE0000F0038000F001C000F001E001E000E001E000F001E000F00
1E000F003C000E003C001E003C001E003C003C00780078007800F0007801E00078078000
FFFF8000F001E000F000F000F0007801E0007801E0003801E0003C01E0003C03C0007803
C0007803C0007803C000F0078000F0078001E0078003C0078007000F801E00FFFFF00020
227DA122>I<00007F00800003808100000E00630000380027000070001F0000E0000E00
01C0000E000380000E000700000E000F000004000E000004001E000004003C000004003C
00000800780000000078000000007800000000F000000000F000000000F000000000F000
000000F000000000E000000000E000002000E000002000E000004000E000004000F00000
800070000080007000010000380002000018000400001C0008000006003000000381C000
0000FE000000212479A223>I<00FFFFF000000F003C00000F000E00000F000700001E00
0380001E000380001E0001C0001E0001C0003C0001C0003C0001E0003C0001E0003C0001
E000780001E000780001E000780001E000780001E000F00003C000F00003C000F00003C0
00F00003C001E000078001E000078001E000070001E0000F0003C0000E0003C0001C0003
C0003C0003C00038000780007000078000E000078001C00007800700000F801C0000FFFF
F0000023227DA125>I<00FFFFFF000F000F000F0003000F0003001E0003001E0003001E
0002001E0002003C0002003C0002003C0102003C01000078020000780200007806000078
0E0000FFFC0000F00C0000F00C0000F00C0001E0080001E0080001E0080001E0000003C0
000003C0000003C0000003C00000078000000780000007800000078000000F800000FFFC
000020227DA120>70 D<00FFF8000F00000F00000F00001E00001E00001E00001E00003C
00003C00003C00003C0000780000780000780000780000F00000F00000F00000F00001E0
0001E00001E00001E00003C00003C00003C00003C0000780000780000780000780000F80
00FFF80015227DA113>73 D<0007FFC000003C0000003C0000003C000000780000007800
00007800000078000000F0000000F0000000F0000000F0000001E0000001E0000001E000
0001E0000003C0000003C0000003C0000003C00000078000000780000007800000078000
000F0000000F0000380F0000780F0000F81E0000F81E0000F03C00004038000040700000
21E000001F8000001A237CA11A>I<00FFFC00000F8000000F0000000F0000001E000000
1E0000001E0000001E0000003C0000003C0000003C0000003C0000007800000078000000
7800000078000000F0000000F0000000F0000000F0000001E0000001E0000001E0002001
E0002003C0004003C0004003C0008003C0008007800180078001000780030007800F000F
803E00FFFFFE001B227DA11F>76 D<00FF800007FC000F80000F80000F80001780000F80
001780001780002F000013C0002F000013C0004F000013C0008F000023C0009E000023C0
011E000023C0011E000023C0021E000043C0043C000043C0043C000043C0083C000041E0
083C000081E01078000081E02078000081E02078000081E04078000101E040F0000101E0
80F0000101E100F0000101E100F0000200F201E0000200F201E0000200F401E0000200F8
01E0000400F803C0000400F003C0000400F003C0000C00E003C0001E00C007C000FFC0C0
7FFC002E227DA12C>I<00FF000FFC000F8001E0000F800180000FC000800013C0010000
13C001000011E001000011E001000021E002000020F002000020F002000020F002000040
7804000040780400004078040000403C040000803C080000803E080000801E080000801E
080001001F100001000F100001000F10000100079000020007A000020007A000020003E0
00020003E000040003C000040001C000040001C0000C0001C0001E00008000FFC0008000
26227DA124>I<0000FE0000078380000C00E0003800700070003800E0003801C0001C03
80001C0700001C0F00001E1E00001E1C00001E3C00001E3C00001E7800001E7800001E78
00001EF000003CF000003CF000003CF0000078F0000078E0000078E00000F0E00000F0E0
0001E0E00001C0F00003C0F00007807000070078000E0038001C001C0038000E00E00007
03800001FC00001F2479A225>I<00FFFFE0000F0038000F001E000F000E001E0007001E
0007001E0007001E0007003C000F003C000F003C000F003C001E0078001E0078003C0078
0078007800E000F003C000FFFE0000F0000000F0000001E0000001E0000001E0000001E0
000003C0000003C0000003C0000003C00000078000000780000007800000078000000F80
0000FFF8000020227DA121>I<00FFFFC0000F0070000F003C000F001C001E000E001E00
0E001E000F001E000F003C001E003C001E003C001E003C003C0078003800780070007801
E00078078000FFFC0000F00E0000F0070000F0038001E003C001E003C001E003C001E003
C003C0078003C0078003C0078003C0078007800F0007800F0107800F01078007020F8007
02FFF8038C000000F020237DA124>82 D<0001F020000E0C40001802C0003001C0006001
C000E0018000C0018001C0018001C0018003C0010003C0010003C0000003C0000003E000
0001F8000001FF000000FFE000007FF000001FF8000003FC0000007C0000003C0000001E
0000001E0000001E0020001C0020001C0020001C00200018006000380060003000700060
007000C000C8018000C607000081FC00001B247DA21B>I<1FFFFFF81E03C0381803C018
3003C01820078018200780184007801040078010400F0010800F0010800F0010000F0000
001E0000001E0000001E0000001E0000003C0000003C0000003C0000003C000000780000
00780000007800000078000000F0000000F0000000F0000000F0000001E0000001E00000
01E0000001E0000003E00000FFFF00001D2277A123>I<FFF001FF1F8000780F0000600F
0000600F0000400F0000800F0000800F0001000F0003000F0002000F8004000F80040007
800800078008000780100007802000078020000780400007804000078080000781000007
C1000003C2000003C2000003C4000003C8000003C8000003D0000003D0000003E0000003
C0000003C00000038000000180000001000000202376A124>86 D<FFF03FF80FF81F0007
C003C01E00078001801E00078001001E00078002001E000F8002001E000F8004001F0017
8004001F00178008000F00278008000F00278010000F00478010000F00C78020000F0087
8020000F01078040000F010780C0000F02078080000F02078100000F04078100000F0407
C200000F0807C200000F0803C400000F1003C400000F1003C800000F2003C800000F2003
D000000F4003D000000FC003E000000F8003E000000F0003C000000F00038000000E0003
8000000E00030000000C00030000000C00020000002D2376A131>I<00F8C00185C00705
C00E03800E03801C03803C0380380700780700780700780700F00E00F00E00F00E00F00E
10F01C20701C20703C20305C40308C400F078014157B9419>97 D<03C03F800380038003
8007000700070007000E000E000E000E001C001CF81D0C1E0E3C0638073807380F700F70
0F700F700FE01EE01EE01EE03CE038E038607060E031C01F0010237BA216>I<007E0001
C1000301800703800E07801C07803C0000380000780000780000780000F00000F00000F0
0000F00000F00100700100700200300C001830000FC00011157B9416>I<00003C0003F8
0000380000380000380000700000700000700000700000E00000E00000E00000E00001C0
00F9C00185C00705C00E03800E03801C03803C0380380700780700780700780700F00E00
F00E00F00E00F00E10F01C20701C20703C20305C40308C400F078016237BA219>I<00F8
03840E021C023C0238027804F018FFE0F000F000E000E000E000E000E002E00260047018
30600F800F157A9416>I<00003E0000470000CF00018F00018600038000038000038000
0700000700000700000700000700000E0000FFF0000E00000E00000E00001C00001C0000
1C00001C00001C0000380000380000380000380000380000700000700000700000700000
700000E00000E00000E00000E00000C00001C00001C000718000F18000F300006200003C
0000182D82A20F>I<001F180030B800E0B801C07001C0700380700780700700E00F00E0
0F00E00F00E01E01C01E01C01E01C01E01C01E03800E03800E0780060B8006170001E700
000700000700000E00000E00000E00701C00F01800F0300060E0003F8000151F7E9416>
I<00F0000FE00000E00000E00000E00001C00001C00001C00001C0000380000380000380
00038000070000071F0007218007C0C00F00E00F00E00E00E00E00E01C01C01C01C01C01
C01C01C0380380380380380380380704700708700E08700E10700610E006206003C01623
7DA219>I<00C001E001C001C0000000000000000000000000000000001C002300430043
008700870087000E000E001C001C001C00380038003840708070807080710032001C000B
217BA00F>I<0000E00001E00001E00000C0000000000000000000000000000000000000
000000000000001E00002300004380008380008380010380010380000700000700000700
000700000E00000E00000E00000E00001C00001C00001C00001C00003800003800003800
00380000700000700000700070E000F0C000F180006300003C0000132B82A00F>I<00F0
000FE00000E00000E00000E00001C00001C00001C00001C0000380000380000380000380
000700000701E0070210070C700E10F00E10F00E20600E40001D80001E00001FC0001C70
00383800383800381C00381C20703840703840703840701880E01880600F0014237DA216
>I<01E01FC001C001C001C0038003800380038007000700070007000E000E000E000E00
1C001C001C001C0038003800380038007000700070007100E200E200E200E20064003800
0B237CA20C>I<1C0F80F8002610C10C0047606606008780780700878078070087007007
0087007007000E00E00E000E00E00E000E00E00E000E00E00E001C01C01C001C01C01C00
1C01C01C001C01C038203803803840380380704038038070803803803080700700310030
03001E0023157B9428>I<1C0F002631C04740C08780E08780E08700E08700E00E01C00E
01C00E01C00E01C01C03801C03801C03801C0704380708380E08380E1038061070062030
03C016157B941B>I<007E0001C3000381800701C00E01C01C01E03C01E03801E07801E0
7801E07801E0F003C0F003C0F00380F00780700700700E00700C0030180018700007C000
13157B9419>I<01C1F002621804741C08780C08700E08700E08701E00E01E00E01E00E0
1E00E01E01C03C01C03C01C03C01C07803807003807003C0E003C1C0072380071E000700
000700000E00000E00000E00000E00001C00001C00001C0000FFC000171F7F9419>I<00
F8400184C00705C00E03800E03801C03803C0380380700780700780700780700F00E00F0
0E00F00E00F00E00F01C00701C00703C00305C0030B8000F380000380000380000700000
700000700000700000E00000E00000E0000FFE00121F7B9416>I<1C1F002620804741C0
8783C08703C08701808700000E00000E00000E00000E00001C00001C00001C00001C0000
38000038000038000038000070000030000012157B9415>I<00FC000183000200800401
800C03800C03000C00000F00000FF00007FC0003FE00003E00000F00000700700700F006
00F00600E004004008002030001FC00011157D9414>I<00C001C001C001C001C0038003
80038003800700FFF8070007000E000E000E000E001C001C001C001C0038003800380038
10702070207040708031001E000D1F7C9E10>I<1E00602300E04380E04381C08381C087
01C08701C00703800E03800E03800E03801C07001C07001C07001C07081C0E10180E101C
0E101C1E200C262007C3C015157B941A>I<1E03802307C04387C04383C08381C08700C0
8700C00700800E00800E00800E00801C01001C01001C01001C02001C02001C04001C0800
1C08000C300003C00012157B9416>I<1E0060E02300E1F04380E1F04381C0F08381C070
8701C0308701C030070380200E0380200E0380200E0380201C0700401C0700401C070040
1C0700801C0700801C0701001C0F01000C0F020006138C0003E0F0001C157B9420>I<03
C1E0046210083470103CF02038F020386020380000700000700000700000700000E00000
E00000E00000E02061C040F1C040F1C080E2C100446200383C0014157D9416>I<1E0030
2300704380704380E08380E08700E08700E00701C00E01C00E01C00E01C01C03801C0380
1C03801C03801C07001C07001C07001C0F000C3E0003CE00000E00000E00001C00601C00
F03800F03000E0600080C0004380003E0000141F7B9418>I<01E02003F06007F8C0041F
800801000802000004000008000010000020000040000080000100000200000400800801
001003003F060061FC0040F80080700013157D9414>I E /Fs 85
127 df<000060000000006000000000F000000000F000000001F8000000017800000002
7C000000023C000000043E000000041E000000081F000000080F000000100F8000001007
8000002007C000002003C000004003E000004001E000008001F000008000F000010000F8
0001000078000200007C000200003C000400003E000400001E000800001F000800000F00
1000000F80100000078020000007C020000003C07FFFFFFFE07FFFFFFFE0FFFFFFFFF024
237EA229>1 D<FFFFFFFF0F8001F0078001E0078001E0078001E0078001E0078001E007
8001E0078001E0078001E0078001E0078001E0078001E0078001E0078001E0078001E007
8001E0078001E0078001E0078001E0078001E0078001E0078001E0078001E0078001E007
8001E0078001E0078001E0078001E0078001E0078001E0078001E00FC003F0FFFC3FFF20
227EA125>5 D<001F83E000706E3000C07C780180F8780380F078070070000700700007
007000070070000700700007007000070070000700700007007000FFFFFFC00700700007
007000070070000700700007007000070070000700700007007000070070000700700007
00700007007000070070000700700007007000070070000700700007007000070078007F
E3FF801D2380A21C>11 D<001FC0000070200000C0100001803800038078000700780007
00300007000000070000000700000007000000070000000700000007000000FFFFF80007
007800070038000700380007003800070038000700380007003800070038000700380007
003800070038000700380007003800070038000700380007003800070038000700380007
0038007FE1FF80192380A21B>I<001FD8000070380000C0780001807800038078000700
38000700380007003800070038000700380007003800070038000700380007003800FFFF
F80007003800070038000700380007003800070038000700380007003800070038000700
380007003800070038000700380007003800070038000700380007003800070038000700
3800070038007FF3FF80192380A21B>I<000FC07F00007031C08000E00B004001801E00
E003803E01E007003C01E007001C00C007001C000007001C000007001C000007001C0000
07001C000007001C000007001C0000FFFFFFFFE007001C01E007001C00E007001C00E007
001C00E007001C00E007001C00E007001C00E007001C00E007001C00E007001C00E00700
1C00E007001C00E007001C00E007001C00E007001C00E007001C00E007001C00E007001C
00E007001C00E07FF1FFCFFE272380A229>I<7038F87CFC7EFC7E743A04020402040204
020804080410081008201040200F0F7EA218>34 D<70F8FCFC7404040404080810102040
060F7CA20E>39 D<00200040008001000300060004000C000C0018001800300030003000
7000600060006000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
6000600060007000300030003000180018000C000C000400060003000100008000400020
0B327CA413>I<800040002000100018000C000400060006000300030001800180018001
C000C000C000C000E000E000E000E000E000E000E000E000E000E000E000E000E000E000
C000C000C001C0018001800180030003000600060004000C00180010002000400080000B
327DA413>I<000180000001800000018000000180000001800000018000000180000001
80000001800000018000000180000001800000018000000180000001800000018000FFFF
FFFEFFFFFFFE000180000001800000018000000180000001800000018000000180000001
800000018000000180000001800000018000000180000001800000018000000180001F22
7D9C26>43 D<70F8FCFC7404040404080810102040060F7C840E>I<FFE0FFE00B027F8B
10>I<70F8F8F87005057C840E>I<01F000071C000C06001803003803803803807001C070
01C07001C07001C0F001E0F001E0F001E0F001E0F001E0F001E0F001E0F001E0F001E0F0
01E0F001E0F001E0F001E0F001E07001C07001C07001C07803C03803803803801C07000C
0600071C0001F00013227EA018>48 D<008003800F80F380038003800380038003800380
038003800380038003800380038003800380038003800380038003800380038003800380
03800380038007C0FFFE0F217CA018>I<03F0000C1C001007002007804003C04003C080
03E0F003E0F801E0F801E0F801E02003E00003E00003C00003C0000780000700000E0000
1C0000180000300000600000C0000180000100000200200400200800201800603000403F
FFC07FFFC0FFFFC013217EA018>I<03F8000C1E001007002007804007C07807C07803C0
7807C03807C0000780000780000700000F00000E0000380003F000001C00000F00000780
0007800003C00003C00003E02003E07003E0F803E0F803E0F003C04003C0400780200780
100F000C1C0003F00013227EA018>I<000200000600000E00000E00001E00001E00002E
00004E00004E00008E00008E00010E00020E00020E00040E00040E00080E00100E00100E
00200E00200E00400E00800E00FFFFF8000E00000E00000E00000E00000E00000E00000E
00001F0001FFF015217FA018>I<1000801E07001FFF001FFE001FF80013E00010000010
000010000010000010000010000010F800130E001407001803801003800001C00001C000
01E00001E00001E00001E07001E0F001E0F001E0E001C08001C04003C040038020070010
06000C1C0003F00013227EA018>I<007E0001C1000300800601C00E03C01C03C0180180
380000380000780000700000700000F0F800F30C00F40600F40300F80380F801C0F001C0
F001E0F001E0F001E0F001E0F001E07001E07001E07001E03801C03801C01803801C0300
0C0600070C0001F00013227EA018>I<4000006000007FFFE07FFFC07FFFC0400080C001
008001008002008002000004000008000008000010000030000020000060000060000060
0000E00000C00000C00001C00001C00001C00001C00003C00003C00003C00003C00003C0
0003C00003C00003C00001800013237DA118>I<01F800060E0008030010018020018020
00C06000C06000C06000C07000C07801803E01003F02001FC4000FF80003F80003FC0006
7F00083F80100F803007C06001C06000E0C000E0C00060C00060C00060C0006060004060
00C03000801803000E0E0003F00013227EA018>I<01F000060C000C0600180700380380
700380700380F001C0F001C0F001C0F001E0F001E0F001E0F001E0F001E07001E07003E0
3803E01805E00C05E00619E003E1E00001C00001C00001C0000380000380300300780700
780600700C002018001030000FC00013227EA018>I<70F8F8F870000000000000000000
000070F8F8F87005157C940E>I<70F8F8F870000000000000000000000070F8F8F87808
080808101010204040051F7C940E>I<FFFFFFFEFFFFFFFE000000000000000000000000
0000000000000000000000000000000000000000FFFFFFFEFFFFFFFE1F0C7D9126>61
D<07E01838201C400E800FF00FF00FF00F000F000E001C00380030006000C000C0008000
80018001000100010001000100010000000000000000000000038007C007C007C0038010
237DA217>63 D<0001800000018000000180000003C0000003C0000003C0000005E00000
05E000000DF0000008F0000008F0000010F800001078000010780000203C0000203C0000
203C0000401E0000401E0000401E0000800F0000800F0000FFFF00010007800100078003
0007C0020003C0020003C0040003E0040001E0040001E00C0000F00C0000F03E0001F8FF
800FFF20237EA225>65 D<FFFFF8000F800E0007800780078003C0078003E0078001E007
8001F0078001F0078001F0078001F0078001F0078001E0078003E0078007C007800F8007
803E0007FFFE0007800780078003C0078001E0078001F0078000F0078000F8078000F807
8000F8078000F8078000F8078000F8078001F0078001F0078003E0078007C00F800F00FF
FFFC001D227EA123>I<0007E0100038183000E0063001C00170038000F0070000F00E00
00701E0000701C0000303C0000303C0000307C0000107800001078000010F8000000F800
0000F8000000F8000000F8000000F8000000F8000000F800000078000000780000107C00
00103C0000103C0000101C0000201E0000200E000040070000400380008001C0010000E0
020000381C000007E0001C247DA223>I<FFFFF0000F801E0007800700078003C0078001
C0078000E0078000F007800078078000780780007C0780003C0780003C0780003C078000
3E0780003E0780003E0780003E0780003E0780003E0780003E0780003E0780003E078000
3C0780003C0780007C0780007807800078078000F0078000E0078001E0078003C0078007
000F801E00FFFFF8001F227EA125>I<FFFFFFC00F8007C0078001C0078000C007800040
078000400780006007800020078000200780002007802020078020000780200007802000
078060000780E00007FFE0000780E0000780600007802000078020000780200007802008
0780000807800008078000100780001007800010078000300780003007800070078000E0
0F8003E0FFFFFFE01D227EA121>I<FFFFFFC00F8007C0078001C0078000C00780004007
800040078000600780002007800020078000200780202007802000078020000780200007
8060000780E00007FFE0000780E000078060000780200007802000078020000780200007
80000007800000078000000780000007800000078000000780000007800000078000000F
C00000FFFE00001B227EA120>I<0007F008003C0C1800E0021801C001B8038000F80700
00780F0000381E0000381E0000183C0000183C0000187C0000087800000878000008F800
0000F8000000F8000000F8000000F8000000F8000000F8000000F8001FFF780000F87800
00787C0000783C0000783C0000781E0000781E0000780F00007807000078038000B801C0
00B800E00318003C0C080007F00020247DA226>I<FFFC3FFF0FC003F0078001E0078001
E0078001E0078001E0078001E0078001E0078001E0078001E0078001E0078001E0078001
E0078001E0078001E0078001E007FFFFE0078001E0078001E0078001E0078001E0078001
E0078001E0078001E0078001E0078001E0078001E0078001E0078001E0078001E0078001
E0078001E00FC003F0FFFC3FFF20227EA125>I<FFFC0FC0078007800780078007800780
078007800780078007800780078007800780078007800780078007800780078007800780
0780078007800780078007800FC0FFFC0E227EA112>I<03FFF0001F00000F00000F0000
0F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F0000
0F00000F00000F00000F00000F00000F00000F00000F00000F00000F00700F00F80F00F8
0F00F80E00F01E00401C0020380018700007C00014237EA119>I<FFFC03FF000FC000F8
000780006000078000400007800080000780010000078002000007800400000780080000
078010000007802000000780400000078080000007818000000783C000000787E0000007
89E000000788F000000790F0000007A078000007C03C000007803C000007801E00000780
0F000007800F00000780078000078007C000078003C000078001E000078001E000078000
F000078000F8000FC000FC00FFFC07FF8021227EA126>I<FFFE00000FC0000007800000
078000000780000007800000078000000780000007800000078000000780000007800000
078000000780000007800000078000000780000007800000078000000780000007800000
078000000780008007800080078000800780008007800180078001800780010007800300
0780030007800F000F803F00FFFFFF0019227EA11E>I<FFC00003FF0FC00003F007C000
03E005E00005E005E00005E004F00009E004F00009E004F00009E004780011E004780011
E004780011E0043C0021E0043C0021E0043C0021E0041E0041E0041E0041E0040F0081E0
040F0081E0040F0081E004078101E004078101E004078101E00403C201E00403C201E004
01E401E00401E401E00401E401E00400F801E00400F801E00400F801E004007001E00E00
7001E01F007003F0FFE0203FFF28227EA12D>I<FF8007FF07C000F807C0007005E00020
04F0002004F0002004780020047C0020043C0020041E0020041F0020040F002004078020
040780200403C0200401E0200401E0200400F0200400F8200400782004003C2004003E20
04001E2004000F2004000F20040007A0040003E0040003E0040001E0040001E0040000E0
0E0000601F000060FFE0002020227EA125>I<000FE00000783C0000E00E0003C0078007
8003C00F0001E00E0000E01E0000F03C0000783C0000787C00007C7C00007C7800003C78
00003CF800003EF800003EF800003EF800003EF800003EF800003EF800003EF800003EF8
00003E7800003C7C00007C7C00007C3C0000783E0000F81E0000F00F0001E00F0001E007
8003C003C0078000E00E0000783C00000FE0001F247DA226>I<FFFFF0000F803C000780
0F0007800780078007C0078003C0078003E0078003E0078003E0078003E0078003E00780
03E0078003C0078007C00780078007800F0007803C0007FFF00007800000078000000780
000007800000078000000780000007800000078000000780000007800000078000000780
000007800000078000000FC00000FFFC00001B227EA121>I<FFFFE000000F803C000007
800E00000780078000078007C000078003C000078003E000078003E000078003E0000780
03E000078003E000078003C000078007C000078007800007800E000007803C000007FFE0
00000780700000078038000007801C000007801E000007800E000007800F000007800F00
0007800F000007800F000007800F800007800F800007800F800007800F808007800FC080
078007C0800FC003C100FFFC01E2000000007C0021237EA124>82
D<03F0200C0C601802603001E07000E0600060E00060E00060E00020E00020E00020F000
00F000007800007F00003FF0001FFE000FFF0003FF80003FC00007E00001E00000F00000
F0000070800070800070800070800070C00060C00060E000C0F000C0C80180C6070081FC
0014247DA21B>I<7FFFFFF87807807860078018400780084007800840078008C007800C
800780048007800480078004800780040007800000078000000780000007800000078000
000780000007800000078000000780000007800000078000000780000007800000078000
00078000000780000007800000078000000780000007800000078000000FC00003FFFF00
1E227EA123>I<FFFC07FF0FC000F8078000700780002007800020078000200780002007
800020078000200780002007800020078000200780002007800020078000200780002007
800020078000200780002007800020078000200780002007800020078000200780002007
8000200380004003C0004003C0004001C0008000E000800060010000300600001C080000
03F00020237EA125>I<FFF0007FC01F80001F000F00000C000780000C00078000080007
8000080003C000100003C000100003E000300001E000200001E000200000F000400000F0
00400000F000400000780080000078008000007C018000003C010000003C010000001E02
0000001E020000001F020000000F040000000F040000000F8C0000000788000000078800
000003D000000003D000000003F000000001E000000001E000000000C000000000C00000
0000C0000022237FA125>I<FFF03FFC03FE1F8007E000F80F0003C000700F0003C00020
0F0003C00020078001E00040078001E00040078001E0004003C002F0008003C002F00080
03C002F0008001E00478010001E00478010001E00478010000F0083C020000F0083C0200
00F0083C020000F8183E06000078101E04000078101E0400007C101E0400003C200F0800
003C200F0800003C200F0800001E40079000001E40079000001E40079000000F8003E000
000F8003E000000F8003E00000070001C00000070001C00000070001C000000300018000
0002000080002F237FA132>I<7FF807FF0007E001F80003C000E00003E000C00001E000
800000F001000000F80300000078020000007C040000003E0C0000001E080000001F1000
00000FB000000007A000000007C000000003E000000001E000000001F000000003F80000
000278000000047C0000000C3E000000081E000000101F000000300F8000002007800000
4007C00000C003E000008001E000010001F000030000F000070000F8001F8001FC00FFE0
07FFC022227FA125>I<FFF0007FC01F80001F000F80000C00078000080007C000180003
E000100001E000200001F000200000F000400000F800C000007C008000003C010000003E
010000001E020000001F040000000F84000000078800000007D800000003D000000003E0
00000001E000000001E000000001E000000001E000000001E000000001E000000001E000
000001E000000001E000000001E000000001E000000001E000000003E00000003FFF0000
22227FA125>I<FEFEC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0FEFE07317BA40E>91
D<0804100820102010402040208040804080408040B85CFC7EFC7E7C3E381C0F0F7AA218
>I<FEFE0606060606060606060606060606060606060606060606060606060606060606
06060606060606060606060606FEFE07317FA40E>I<04000E001F001B00318060C0C060
80200B087AA218>I<0FE0001838003C0C003C0E0018070000070000070000070000FF00
07C7001E07003C0700780700700700F00708F00708F00708F00F087817083C23900FC1E0
15157E9418>97 D<0E0000FE00001E00000E00000E00000E00000E00000E00000E00000E
00000E00000E00000E00000E00000E1F000E61C00E80600F00300E00380E003C0E001C0E
001E0E001E0E001E0E001E0E001E0E001E0E001E0E001C0E003C0E00380F00700C80600C
41C0083F0017237FA21B>I<01FE000703000C07801C0780380300780000700000F00000
F00000F00000F00000F00000F00000F000007000007800403800401C00800C0100070600
01F80012157E9416>I<0000E0000FE00001E00000E00000E00000E00000E00000E00000
E00000E00000E00000E00000E00000E001F8E00704E00C02E01C01E03800E07800E07000
E0F000E0F000E0F000E0F000E0F000E0F000E0F000E07000E07800E03800E01801E00C02
E0070CF001F0FE17237EA21B>I<01FC000707000C03801C01C03801C07801E07000E0F0
00E0FFFFE0F00000F00000F00000F00000F000007000007800203800201C00400E008007
030000FC0013157F9416>I<003C00C6018F038F030F0700070007000700070007000700
07000700FFF8070007000700070007000700070007000700070007000700070007000700
07000700070007807FF8102380A20F>I<00007001F198071E180E0E181C07001C07003C
07803C07803C07803C07801C07001C07000E0E000F1C0019F00010000010000018000018
00001FFE000FFFC00FFFE03800F0600030400018C00018C00018C0001860003060003038
00E00E038003FE0015217F9518>I<0E0000FE00001E00000E00000E00000E00000E0000
0E00000E00000E00000E00000E00000E00000E00000E1F800E60C00E80E00F00700F0070
0E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E0070
0E00700E00700E0070FFE7FF18237FA21B>I<1C003E003E003E001C0000000000000000
0000000000000000000E00FE001E000E000E000E000E000E000E000E000E000E000E000E
000E000E000E000E000E000E00FFC00A227FA10E>I<01C003E003E003E001C000000000
00000000000000000000000001E00FE001E000E000E000E000E000E000E000E000E000E0
00E000E000E000E000E000E000E000E000E000E000E000E000E000E060E0F0C0F1806180
3E000B2C82A10F>I<0E0000FE00001E00000E00000E00000E00000E00000E00000E0000
0E00000E00000E00000E00000E00000E03FC0E01F00E01C00E01800E02000E04000E0800
0E10000E38000EF8000F1C000E1E000E0E000E07000E07800E03C00E01C00E01E00E00F0
0E00F8FFE3FE17237FA21A>I<0E00FE001E000E000E000E000E000E000E000E000E000E
000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E
000E000E000E000E00FFE00B237FA20E>I<0E1FC07F00FE60E183801E807201C00F003C
00E00F003C00E00E003800E00E003800E00E003800E00E003800E00E003800E00E003800
E00E003800E00E003800E00E003800E00E003800E00E003800E00E003800E00E003800E0
0E003800E00E003800E0FFE3FF8FFE27157F942A>I<0E1F80FE60C01E80E00F00700F00
700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00
700E00700E00700E0070FFE7FF18157F941B>I<01FC000707000C01801800C03800E070
0070700070F00078F00078F00078F00078F00078F00078F000787000707800F03800E01C
01C00E038007070001FC0015157F9418>I<0E1F00FE61C00E80600F00700E00380E003C
0E001C0E001E0E001E0E001E0E001E0E001E0E001E0E001E0E003C0E003C0E00380F0070
0E80E00E41C00E3F000E00000E00000E00000E00000E00000E00000E00000E00000E0000
FFE000171F7F941B>I<01F8200704600E02601C01603801E07800E07800E0F000E0F000
E0F000E0F000E0F000E0F000E0F000E07000E07800E03801E01C01E00C02E0070CE001F0
E00000E00000E00000E00000E00000E00000E00000E00000E00000E0000FFE171F7E941A
>I<0E3CFE461E8F0F0F0F060F000E000E000E000E000E000E000E000E000E000E000E00
0E000E000F00FFF010157F9413>I<0F8830786018C018C008C008E008F0007F803FE00F
F001F8003C801C800C800CC00CC008E018D0308FC00E157E9413>I<0200020002000200
0600060006000E001E003E00FFF80E000E000E000E000E000E000E000E000E000E000E00
0E040E040E040E040E040E040708030801F00E1F7F9E13>I<0E0070FE07F01E00F00E00
700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E00
700E00F00E00F006017003827800FC7F18157F941B>I<FFC1FE1E00780E00300E00200E
002007004007004003808003808003808001C10001C10000E20000E20000E20000740000
740000380000380000380000100017157F941A>I<FF8FF8FF1E01E03C1C01C0180E01C0
180E01E0100E01E01007026020070270200702702003843040038438400384384001C818
8001C81C8001C81C8000F00D0000F00F0000F00F0000600600006006000060060020157F
9423>I<FF83FE1F01F00E00C007008003810003830001C20000E4000078000078000038
00003C00004E00008E000187000103800201C00401E00C00E03E01F0FF03FE17157F941A
>I<FFC1FE1E00780E00300E00200E002007004007004003808003808003808001C10001
C10000E20000E20000E20000740000740000380000380000380000100000100000200000
2000002000004000F04000F08000F180004300003C0000171F7F941A>I<3FFFC0380380
300780200700600E00401C00403C0040380000700000E00001E00001C000038040070040
0F00400E00C01C0080380080780180700780FFFF8012157F9416>I<FFFFFE1701808C18>
I<FFFFFFFFFFFF3001808C31>I<0E021F04238841F080E00F057CA018>126
D E /Ft 44 123 df<00001FFC00000001FFFF00000007FFFF8000001FF807C000007FC0
03E00000FF0007F00000FE000FF00001FE000FF00003FC000FF00003FC000FF00003FC00
0FF00003FC0007E00003FC0001800003FC0000000003FC0000000003FC0000000003FC00
00000003FC00FFF800FFFFFFFFF800FFFFFFFFF800FFFFFFFFF80003FC0007F80003FC00
07F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC00
07F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC00
07F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC00
07F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC0007F80003FC00
07F8007FFFE0FFFFC07FFFE0FFFFC07FFFE0FFFFC02A327FB12E>12
D<FFFFF0FFFFF0FFFFF0FFFFF0FFFFF0FFFFF0FFFFF014077F921B>45
D<0001E0000003E000000FE000007FE0001FFFE000FFFFE000FFBFE000E03FE000003FE0
00003FE000003FE000003FE000003FE000003FE000003FE000003FE000003FE000003FE0
00003FE000003FE000003FE000003FE000003FE000003FE000003FE000003FE000003FE0
00003FE000003FE000003FE000003FE000003FE000003FE000003FE000003FE000003FE0
00003FE000003FE000003FE000003FE000003FE000003FE000003FE0007FFFFFF07FFFFF
F07FFFFFF01C2E7AAD29>49 D<003FF00001FFFE0007FFFF800FC07FE01E001FF03C000F
F87F0007FC7F8007FEFFC007FEFFC003FEFFC003FFFFC003FF7F8003FF7F8003FF3F0003
FF000003FF000003FE000003FE000007FC000007FC00000FF800000FF000001FE000001F
C000003F8000007F000000FE000001F8000001F0000003E00000078007000F0007001E00
07003C000F0078000E00F0000E01C0001E03FFFFFE07FFFFFE0FFFFFFE1FFFFFFE3FFFFF
FE7FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC202E7CAD29>I<000FFC0000007FFF800001F0
1FE00003C00FF000070007F8000FE007FC000FF007FC001FF007FE001FF807FE001FF807
FE001FF807FE001FF807FE000FF007FC0007E007FC00018007FC0000000FF80000000FF0
0000001FE00000001FC00000007F8000001FFE0000001FFC0000001FFF800000001FF000
000007F800000003FC00000003FE00000003FF00000001FF80000001FF800E0001FFC03F
8001FFC07FC001FFC07FC001FFC0FFE001FFC0FFE001FFC0FFE001FF80FFE001FF80FFC0
03FF007F8003FF003F0003FE001F0007FC000FE01FF80007FFFFE00001FFFF8000001FFC
0000222E7DAD29>I<0000007800000000F800000001F800000003F800000007F8000000
07F80000000FF80000001FF80000003FF80000007FF800000077F8000000F7F8000001E7
F8000003C7F800000787F800000707F800000F07F800001E07F800003C07F800007807F8
00007007F80000F007F80001E007F80003C007F800078007F8000F0007F8000F0007F800
1E0007F8003C0007F800780007F800F00007F800FFFFFFFFF0FFFFFFFFF0FFFFFFFFF000
000FF80000000FF80000000FF80000000FF80000000FF80000000FF80000000FF8000000
0FF80000000FF800000FFFFFF0000FFFFFF0000FFFFFF0242E7EAD29>I<0C0000380FC0
03F80FFFFFF80FFFFFF00FFFFFE00FFFFFC00FFFFF800FFFFE000FFFFC000FFFF0000FFF
00000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0FF8000F7F
FF000FFFFFC00FF01FE00F800FF00F0007F80E0007FC000003FC000003FE000003FE0000
03FF000003FF1E0003FF3F0003FF7F8003FFFF8003FFFFC003FFFFC003FEFF8003FEFF80
03FE7F0007FC7C0007F83C000FF01E001FE00FC07FC007FFFF8001FFFE00003FE000202E
7CAD29>I<00007F80000007FFF000001FC07800007F001C0000FC001E0001F8007E0003
F800FF0007F001FF000FF001FF000FE001FF001FE001FF003FE000FE003FE0007C003FC0
0000007FC00000007FC00000007FC0000000FFC3FF8000FFC7FFE000FFCFBFF000FFDC03
F800FFF801FC00FFF001FE00FFF000FF00FFE000FF80FFE000FF80FFE000FF80FFC000FF
C0FFC000FFC0FFC000FFC07FC000FFC07FC000FFC07FC000FFC07FC000FFC03FC000FFC0
3FC000FF803FC000FF801FE000FF801FE000FF000FE001FE0007F001FC0003F803F80001
FC0FF00000FFFFE000003FFF80000007FC0000222E7DAD29>I<38000000003E00000000
3FFFFFFFC03FFFFFFFC03FFFFFFFC03FFFFFFF807FFFFFFF007FFFFFFE007FFFFFFC007F
FFFFF8007FFFFFF000780001F000700003E000700007C000F0000F8000E0000F0000E000
1E0000E0003E000000007C00000000F800000000F800000001F000000001F000000003F0
00000003E000000007E000000007E00000000FE00000000FE00000001FC00000001FC000
00001FC00000003FC00000003FC00000003FC00000003FC00000003FC00000007FC00000
007FC00000007FC00000007FC00000007FC00000007FC00000007FC00000007FC0000000
3F800000003F800000000E00000022307BAF29>I<0007FC0000003FFF800000F80FE000
01E003F00003C001F800078000FC000F8000FC000F80007E000F80007E001F80007E001F
C0007E001FC0007E001FE0007E001FF800FC001FFE00FC000FFF81F8000FFFE1F0000FFF
F7E00007FFFFC00003FFFF800001FFFFC00000FFFFE000007FFFF80001FFFFFC0003F7FF
FE000FE1FFFF001F807FFF003F003FFF803F000FFF807E0003FFC07E0000FFC0FC00007F
C0FC00001FC0FC00001FC0FC00000FC0FC00000FC0FC00000F807E00000F807E00000F00
7F00001F003F00001E001FC0007C000FF803F80003FFFFE00000FFFF8000001FFC000022
2E7DAD29>I<0000007C0000000000007C000000000000FE000000000000FE0000000000
00FE000000000001FF000000000001FF000000000003FF800000000003FF800000000007
FFC00000000007FFC00000000007FFC0000000000FFFE0000000000F7FE0000000001F7F
F0000000001E3FF0000000001E3FF0000000003E3FF8000000003C1FF8000000007C1FFC
00000000780FFC00000000780FFC00000000F80FFE00000000F007FE00000001F007FF00
000001E003FF00000001E003FF00000003E003FF80000003C001FF80000007C001FFC000
00078000FFC00000078000FFC000000FFFFFFFE000000FFFFFFFE000001FFFFFFFF00000
1E00003FF000001E00003FF000003C00003FF800003C00001FF800007C00001FFC000078
00000FFC00007800000FFC0000F0000007FE0000F0000007FE0001F0000007FF0003F800
0003FF00FFFFC001FFFFFEFFFFC001FFFFFEFFFFC001FFFFFE37317DB03E>65
D<FFFFFFFFF80000FFFFFFFFFF0000FFFFFFFFFFE00000FF80003FF00000FF80000FF800
00FF800007FC0000FF800007FE0000FF800003FF0000FF800003FF0000FF800001FF8000
FF800001FF8000FF800001FF8000FF800001FF8000FF800001FF8000FF800001FF8000FF
800003FF0000FF800003FF0000FF800007FF0000FF800007FE0000FF80000FFC0000FF80
001FF80000FF8000FFE00000FFFFFFFF800000FFFFFFFF000000FFFFFFFFE00000FF8000
1FF80000FF800007FC0000FF800003FF0000FF800001FF0000FF800001FF8000FF800000
FFC000FF800000FFC000FF800000FFE000FF800000FFE000FF800000FFE000FF800000FF
E000FF800000FFE000FF800000FFE000FF800000FFE000FF800000FFC000FF800001FFC0
00FF800001FF8000FF800003FF8000FF800007FF0000FF80000FFE0000FF80003FFC00FF
FFFFFFFFF000FFFFFFFFFFC000FFFFFFFFFE000033317EB03B>I<000003FF8001800000
3FFFF003800001FFFFFC0F800007FF007F1F80001FF8000FBF80003FE00003FF8000FF80
0000FF8001FF0000007F8003FE0000003F8007FC0000003F8007FC0000001F800FF80000
001F801FF80000000F801FF00000000F803FF000000007803FF000000007807FF0000000
07807FE000000007807FE000000000007FE00000000000FFE00000000000FFE000000000
00FFE00000000000FFE00000000000FFE00000000000FFE00000000000FFE00000000000
FFE00000000000FFE000000000007FE000000000007FE000000000007FE000000000007F
F000000003803FF000000003803FF000000003801FF000000003801FF800000007800FF8
000000070007FC000000070007FC0000000E0003FE0000001E0001FF0000003C0000FF80
00007800003FE00000F000001FF80003E0000007FF003F80000001FFFFFE000000003FFF
F80000000003FF80000031317BB03C>I<FFFFFFFFF00000FFFFFFFFFF0000FFFFFFFFFF
C00000FFC000FFF00000FFC0000FFC0000FFC00007FE0000FFC00001FF0000FFC00000FF
8000FFC000007FC000FFC000003FE000FFC000003FE000FFC000001FF000FFC000001FF0
00FFC000001FF800FFC000000FF800FFC000000FFC00FFC000000FFC00FFC000000FFC00
FFC000000FFC00FFC000000FFE00FFC000000FFE00FFC000000FFE00FFC000000FFE00FF
C000000FFE00FFC000000FFE00FFC000000FFE00FFC000000FFE00FFC000000FFE00FFC0
00000FFE00FFC000000FFE00FFC000000FFC00FFC000000FFC00FFC000000FFC00FFC000
000FFC00FFC000000FF800FFC000001FF800FFC000001FF800FFC000001FF000FFC00000
3FE000FFC000003FE000FFC000007FC000FFC00000FF8000FFC00001FF0000FFC00003FE
0000FFC0000FFC0000FFC0007FF000FFFFFFFFFFE000FFFFFFFFFF0000FFFFFFFFF00000
37317EB03F>I<FFFFFFC0FFFFFFC0FFFFFFC000FFC00000FFC00000FFC00000FFC00000
FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000
FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000
FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000
FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000FFC00000
FFC00000FFC00000FFC000FFFFFFC0FFFFFFC0FFFFFFC01A317EB01F>73
D<FFFF8000000001FFFF80FFFFC000000003FFFF80FFFFE000000007FFFF8000FFE00000
0007FF800000EFF00000000EFF800000EFF00000000EFF800000EFF00000000EFF800000
E7F80000001CFF800000E7F80000001CFF800000E3FC00000038FF800000E3FC00000038
FF800000E1FE00000070FF800000E1FE00000070FF800000E0FF000000E0FF800000E0FF
000000E0FF800000E07F800001C0FF800000E07F800001C0FF800000E03FC0000380FF80
0000E03FC0000380FF800000E03FC0000380FF800000E01FE0000700FF800000E01FE000
0700FF800000E00FF0000E00FF800000E00FF0000E00FF800000E007F8001C00FF800000
E007F8001C00FF800000E003FC003800FF800000E003FC003800FF800000E001FE007000
FF800000E001FE007000FF800000E000FF00E000FF800000E000FF00E000FF800000E000
FF00E000FF800000E0007F81C000FF800000E0007F81C000FF800000E0003FC38000FF80
0000E0003FC38000FF800000E0001FE70000FF800000E0001FE70000FF800000E0000FFE
0000FF800000E0000FFE0000FF800000E00007FC0000FF800000E00007FC0000FF800000
E00007FC0000FF800000E00003F80000FF800001F00003F80000FF8000FFFFE001F000FF
FFFF80FFFFE001F000FFFFFF80FFFFE000E000FFFFFF8049317EB04E>77
D<00000FFE0000000000FFFFE000000007FFFFFC0000001FFC07FF0000003FE000FF8000
00FF80003FE00001FF00001FF00003FE00000FF80007FC000007FC0007FC000007FC000F
F8000003FE001FF8000003FF001FF0000001FF003FF0000001FF803FF0000001FF803FF0
000001FF807FE0000000FFC07FE0000000FFC07FE0000000FFC0FFE0000000FFE0FFE000
0000FFE0FFE0000000FFE0FFE0000000FFE0FFE0000000FFE0FFE0000000FFE0FFE00000
00FFE0FFE0000000FFE0FFE0000000FFE0FFE0000000FFE0FFE0000000FFE07FE0000000
FFC07FE0000000FFC07FF0000001FFC07FF0000001FFC03FF0000001FF803FF0000001FF
801FF8000003FF001FF8000003FF000FFC000007FE000FFC000007FE0007FE00000FFC00
03FF00001FF80001FF80003FF00000FFC0007FE000003FE000FF8000001FFC07FF000000
07FFFFFC00000000FFFFE0000000000FFE00000033317BB03E>79
D<FFFFFFFFE000FFFFFFFFFE00FFFFFFFFFF8000FFC001FFE000FFC0003FF000FFC0001F
F800FFC0000FFC00FFC0000FFC00FFC00007FE00FFC00007FE00FFC00007FF00FFC00007
FF00FFC00007FF00FFC00007FF00FFC00007FF00FFC00007FF00FFC00007FF00FFC00007
FE00FFC00007FE00FFC0000FFC00FFC0000FFC00FFC0001FF800FFC0003FF000FFC001FF
E000FFFFFFFF8000FFFFFFFE0000FFFFFFE00000FFC000000000FFC000000000FFC00000
0000FFC000000000FFC000000000FFC000000000FFC000000000FFC000000000FFC00000
0000FFC000000000FFC000000000FFC000000000FFC000000000FFC000000000FFC00000
0000FFC000000000FFC000000000FFC000000000FFC0000000FFFFFFC00000FFFFFFC000
00FFFFFFC0000030317EB038>I<FFFFFFFFC0000000FFFFFFFFFC000000FFFFFFFFFF80
000000FFC001FFE0000000FFC0003FF0000000FFC0000FFC000000FFC00007FC000000FF
C00007FE000000FFC00003FF000000FFC00003FF000000FFC00003FF800000FFC00003FF
800000FFC00003FF800000FFC00003FF800000FFC00003FF800000FFC00003FF800000FF
C00003FF000000FFC00003FF000000FFC00007FE000000FFC00007FC000000FFC0000FFC
000000FFC0003FF0000000FFC001FFE0000000FFFFFFFF80000000FFFFFFFC00000000FF
FFFFFE00000000FFC003FF00000000FFC000FFC0000000FFC0007FE0000000FFC0003FE0
000000FFC0003FF0000000FFC0001FF0000000FFC0001FF8000000FFC0001FF8000000FF
C0001FF8000000FFC0001FF8000000FFC0001FF8000000FFC0001FFC000000FFC0001FFC
000000FFC0001FFC000000FFC0001FFC004000FFC0001FFC00E000FFC0001FFE00E000FF
C0000FFE00E000FFC0000FFF01C000FFC00007FF83C0FFFFFFC003FFFF80FFFFFFC000FF
FF00FFFFFFC0000FFC003B317EB03E>82 D<3FFFFFFFFFFF003FFFFFFFFFFF003FFFFFFF
FFFF003FE00FFC01FF007F000FFC003F807E000FFC001F807C000FFC000F8078000FFC00
078078000FFC00078070000FFC00038070000FFC00038070000FFC00038070000FFC0003
80E0000FFC0001C0E0000FFC0001C0E0000FFC0001C0E0000FFC0001C000000FFC000000
00000FFC00000000000FFC00000000000FFC00000000000FFC00000000000FFC00000000
000FFC00000000000FFC00000000000FFC00000000000FFC00000000000FFC0000000000
0FFC00000000000FFC00000000000FFC00000000000FFC00000000000FFC00000000000F
FC00000000000FFC00000000000FFC00000000000FFC00000000000FFC00000000000FFC
00000000000FFC00000000000FFC00000000000FFC00000000000FFC00000000000FFC00
000000000FFC000000007FFFFFFF8000007FFFFFFF8000007FFFFFFF800032307DAF39>
84 D<FFFFFF0001FFFF80FFFFFF0001FFFF80FFFFFF0001FFFF8003FF8000000FE00001
FF80000003C00001FFC0000007C00000FFC0000007800000FFE000000F8000007FE00000
0F0000007FF000000F0000003FF000001E0000003FF000001E0000003FF800003E000000
1FF800003C0000001FFC00007C0000000FFC0000780000000FFE0000F800000007FE0000
F000000007FF0000F000000007FF0001F000000003FF0001E000000003FF8003E0000000
01FF8003C000000001FFC007C000000000FFC0078000000000FFE00780000000007FE00F
00000000007FE00F00000000007FF01F00000000003FF01E00000000003FF83E00000000
001FF83C00000000001FFC3C00000000000FFC7800000000000FFC7800000000000FFEF8
000000000007FEF0000000000007FFF0000000000003FFE0000000000003FFE000000000
0001FFC0000000000001FFC0000000000001FFC0000000000000FF80000000000000FF80
0000000000007F000000000000007F000000000000003E000000000000003E0000000039
317EB03E>86 D<007FF8000003FFFF000007FFFFC0000FE01FE0001FF007F0001FF003F8
001FF003FC001FF001FE000FE001FE0007C001FE00010001FE00000001FE00000001FE00
0001FFFE00003FFFFE0001FFF1FE0007FE01FE000FF001FE001FC001FE003F8001FE007F
8001FE00FF0001FE00FF0001FE00FF0001FE00FF0001FE00FF0003FE007F8003FE007FC0
0EFE003FF03CFF000FFFF87FF807FFF03FF800FF800FF825207E9F28>97
D<01F8000000FFF8000000FFF8000000FFF80000000FF800000007F800000007F8000000
07F800000007F800000007F800000007F800000007F800000007F800000007F800000007
F800000007F800000007F800000007F800000007F80FF00007F87FFE0007F9FFFF8007FF
E03FC007FF000FE007FE0007F007F80003F807F80003FC07F80003FC07F80001FE07F800
01FE07F80001FE07F80001FF07F80001FF07F80001FF07F80001FF07F80001FF07F80001
FF07F80001FF07F80001FF07F80001FE07F80001FE07F80001FE07F80003FC07F80003FC
07FC0007F807FE0007F007F7001FE007E3E07FC007C1FFFF0007807FFE0007001FE00028
327EB12E>I<0007FF00007FFFE000FFFFF003FC03F807F007FC0FE007FC1FE007FC3FC0
07FC3FC003F87FC001F07F8000407F800000FF800000FF800000FF800000FF800000FF80
0000FF800000FF800000FF8000007F8000007FC000007FC000003FC0000E3FE0000E1FE0
001C0FF0001C07F8007803FF01F000FFFFE0007FFF800007FC001F207D9F25>I<000000
07E0000003FFE0000003FFE0000003FFE00000003FE00000001FE00000001FE00000001F
E00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE0
0000001FE00000001FE00000001FE0000FF81FE0007FFF1FE001FFFFDFE003FE03FFE007
F800FFE00FE0003FE01FE0001FE03FC0001FE03FC0001FE07F80001FE07F80001FE07F80
001FE0FF80001FE0FF80001FE0FF80001FE0FF80001FE0FF80001FE0FF80001FE0FF8000
1FE0FF80001FE07F80001FE07F80001FE07F80001FE03FC0001FE03FC0001FE01FC0003F
E00FE0007FE007F001FFE003FC07DFF001FFFF9FFF007FFE1FFF000FF01FFF28327DB12E
>I<0007FC0000003FFF800000FFFFE00003FC07F00007F801F8000FE000FC001FE0007E
003FC0007E003FC0003F007FC0003F007F80003F007F80003F80FF80003F80FF80003F80
FFFFFFFF80FFFFFFFF80FFFFFFFF80FF80000000FF80000000FF800000007F800000007F
800000003FC00000003FC00003801FC00003801FE00007800FF0000F0007F8001E0003FE
00FC0000FFFFF800003FFFE0000003FF000021207E9F26>I<0000FF000007FFC0001FFF
E0003FC7F0007F0FF800FE0FF801FE0FF801FC0FF803FC07F003FC03E003FC01C003FC00
0003FC000003FC000003FC000003FC000003FC000003FC0000FFFFF800FFFFF800FFFFF8
0003FC000003FC000003FC000003FC000003FC000003FC000003FC000003FC000003FC00
0003FC000003FC000003FC000003FC000003FC000003FC000003FC000003FC000003FC00
0003FC000003FC000003FC000003FC000003FC000003FC000003FC000003FC00007FFFF0
007FFFF0007FFFF0001D327EB119>I<001FF007E000FFFE3FF001FFFF7FF807F83FF1F8
0FE00FE1F80FE00FE0F01FC007F0601FC007F0003FC007F8003FC007F8003FC007F8003F
C007F8003FC007F8001FC007F0001FC007F0000FE00FE0000FE00FE00007F83FC00007FF
FF000006FFFE00000E1FF000000E000000001E000000001E000000001F000000001F8000
00001FFFFFC0000FFFFFF8000FFFFFFE0007FFFFFF0003FFFFFF8007FFFFFFC01FFFFFFF
E03F00007FE07E00000FF0FC000007F0FC000003F0FC000003F0FC000003F0FC000003F0
7E000007E03F00000FC01FC0003F800FF801FF0007FFFFFE0000FFFFF000001FFF800025
2F7E9F29>I<01F800000000FFF800000000FFF800000000FFF8000000000FF800000000
07F80000000007F80000000007F80000000007F80000000007F80000000007F800000000
07F80000000007F80000000007F80000000007F80000000007F80000000007F800000000
07F80000000007F807F8000007F83FFF000007F87FFF800007F8F03FC00007F9C01FE000
07FB000FE00007FE000FF00007FE000FF00007FC000FF00007FC000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
FFFFC1FFFF80FFFFC1FFFF80FFFFC1FFFF8029327DB12E>I<01C00007F0000FF8000FF8
001FFC001FFC001FFC000FF8000FF80007F00001C0000000000000000000000000000000
0000000000000000000001F800FFF800FFF800FFF8000FF80007F80007F80007F80007F8
0007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F8
0007F80007F80007F80007F80007F80007F80007F80007F800FFFF80FFFF80FFFF801133
7DB217>I<01F8000000FFF8000000FFF8000000FFF80000000FF800000007F800000007
F800000007F800000007F800000007F800000007F800000007F800000007F800000007F8
00000007F800000007F800000007F800000007F800000007F8007FFC07F8007FFC07F800
7FFC07F8001FC007F8001F0007F8003E0007F800780007F801F00007F803E00007F80780
0007F81F000007F83E000007F87C000007F9FE000007FBFF000007FFFF800007FF7FC000
07FE3FE00007F81FE00007F01FF00007F00FF80007F007FC0007F003FE0007F001FF0007
F000FF0007F000FF8007F0007FC007F0003FE007F0003FF0FFFF80FFFFFFFF80FFFFFFFF
80FFFF28327EB12C>107 D<01F800FFF800FFF800FFF8000FF80007F80007F80007F800
07F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F800
07F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F800
07F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F800
07F80007F80007F800FFFFC0FFFFC0FFFFC012327DB117>I<03F007F8000FF000FFF03F
FF007FFE00FFF07FFF80FFFF00FFF0F03FC1E07F800FF1C01FE3803FC007F3000FE6001F
C007F6000FFC001FE007FE000FFC001FE007FC000FF8001FE007FC000FF8001FE007F800
0FF0001FE007F8000FF0001FE007F8000FF0001FE007F8000FF0001FE007F8000FF0001F
E007F8000FF0001FE007F8000FF0001FE007F8000FF0001FE007F8000FF0001FE007F800
0FF0001FE007F8000FF0001FE007F8000FF0001FE007F8000FF0001FE007F8000FF0001F
E007F8000FF0001FE007F8000FF0001FE007F8000FF0001FE007F8000FF0001FE007F800
0FF0001FE0FFFFC1FFFF83FFFFFFFFC1FFFF83FFFFFFFFC1FFFF83FFFF40207D9F45>I<
03F007F80000FFF03FFF0000FFF07FFF8000FFF0F03FC0000FF1C01FE00007F3000FE000
07F6000FF00007FE000FF00007FC000FF00007FC000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000FFFFC1FFFF80
FFFFC1FFFF80FFFFC1FFFF8029207D9F2E>I<0007FE0000003FFFC00000FFFFF00003FC
03FC0007F000FE000FE0007F001FC0003F803FC0003FC03FC0003FC07F80001FE07F8000
1FE07F80001FE0FF80001FF0FF80001FF0FF80001FF0FF80001FF0FF80001FF0FF80001F
F0FF80001FF0FF80001FF07F80001FE07F80001FE07F80001FE03FC0003FC03FC0003FC0
1FE0007F800FE0007F0007F801FE0003FE07FC0001FFFFF800003FFFC0000007FE000024
207E9F29>I<01F80FF000FFF87FFE00FFF9FFFF80FFFFE07FC00FFF001FE007FE000FF0
07F80007F807F80007FC07F80003FC07F80003FE07F80003FE07F80001FE07F80001FF07
F80001FF07F80001FF07F80001FF07F80001FF07F80001FF07F80001FF07F80001FF07F8
0001FE07F80003FE07F80003FE07F80003FC07F80007FC07FC0007F807FE000FF007FF00
1FE007FBE07FC007F9FFFF0007F87FFE0007F81FE00007F800000007F800000007F80000
0007F800000007F800000007F800000007F800000007F800000007F800000007F8000000
07F8000000FFFFC00000FFFFC00000FFFFC00000282E7E9F2E>I<03F03F00FFF07FC0FF
F1FFE0FFF3C7F00FF38FF807F70FF807F60FF807FE0FF807FC07F007FC03E007FC008007
F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007
F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F80000FF
FFE000FFFFE000FFFFE0001D207E9F22>114 D<00FF870007FFEF001FFFFF003F007F00
3C001F0078000F00F8000700F8000700F8000700FC000700FF000000FFF800007FFFC000
3FFFF0003FFFFC000FFFFE0007FFFF0001FFFF80001FFF800000FFC000001FC060000FC0
E00007C0E00007C0F00007C0F8000780F8000F80FE000F00FF803E00FFFFFC00F3FFF800
C07FC0001A207D9F21>I<00380000380000380000380000380000780000780000780000
F80000F80001F80003F80007F8001FF800FFFFFEFFFFFEFFFFFE07F80007F80007F80007
F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007F80007
F80007F80707F80707F80707F80707F80707F80707F80703F80E03FC0E01FE1C00FFF800
7FF0000FE0182E7EAD20>I<01F80003F000FFF801FFF000FFF801FFF000FFF801FFF000
0FF8001FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF00007F8000FF000
07F8000FF00007F8000FF00007F8001FF00007F8001FF00003F8003FF00003F8006FF000
01FE03CFF80000FFFF8FFF80007FFF0FFF80000FFC0FFF8029207D9F2E>I<FFFF801FFE
FFFF801FFEFFFF801FFE07F80003E007F80001C007FC0003C003FC00038003FE00078001
FE00070001FF000F0000FF000E0000FF801E00007F801C00007FC03C00003FC03800003F
E03800001FE07000001FE07000000FF0E000000FF0E000000FF9E0000007F9C0000007FF
C0000003FF80000003FF80000001FF00000001FF00000000FE00000000FE000000007C00
0000007C0000000038000027207E9F2C>I<FFFF0FFFF01FFEFFFF0FFFF01FFEFFFF0FFF
F01FFE0FF0007E0001F00FF8007F0001E007F8007F0001C007F8003F8003C003FC003F80
038003FC007FC0038003FE007FC0078001FE00FFC0070001FF00EFE00F0000FF00EFE00E
0000FF01C7F00E00007F81C7F01C00007F83C7F01C00007FC383F83C00003FC383F83800
003FC701FC3800001FE701FC7000001FEF01FC7000001FFE00FEF000000FFE00FEE00000
0FFC007FE0000007FC007FC0000007FC007FC0000007F8003FC0000003F8003F80000003
F0001F80000001F0001F00000001E0000F00000000E0000E000037207E9F3C>I<FFFF80
1FFEFFFF801FFEFFFF801FFE07F80003E007F80001C007FC0003C003FC00038003FE0007
8001FE00070001FF000F0000FF000E0000FF801E00007F801C00007FC03C00003FC03800
003FE03800001FE07000001FE07000000FF0E000000FF0E000000FF9E0000007F9C00000
07FFC0000003FF80000003FF80000001FF00000001FF00000000FE00000000FE00000000
7C000000007C000000003800000000380000000070000000007000000000F000003C00E0
00007E01E00000FF01C00000FF03800000FF07800000FF0F0000007A3E0000007FFC0000
003FF80000000FC0000000272E7E9F2C>121 D<3FFFFFFC3FFFFFFC3FFFFFFC3FC00FF8
3E001FF03C003FF038003FE078007FC07800FF807001FF807001FF007003FE007007FC00
000FF800000FF800001FF000003FE000007FC00E007FC00E00FF800E01FF000E03FE000E
07FE001E07FC001E0FF8001C1FF0003C3FF0007C3FE000FC7FC007FCFFFFFFFCFFFFFFFC
FFFFFFFC1F207E9F25>I E /Fu 1 4 df<01800180018001804182F18F399C0FF003C003
C00FF0399CF18F4182018001800180018010127E9215>3 D E /Fv
21 117 df<78FCFCFEFE7A02020202040404081010204007127B8511>44
D<78FCFCFCFC7806067B8511>46 D<007F000001C1C0000780F0000F0078000E0038001C
001C003C001E003C001E003C001E0078000F0078000F0078000F0078000F00F8000F80F8
000F80F8000F80F8000F80F8000F80F8000F80F8000F80F8000F80F8000F80F8000F80F8
000F80F8000F80F8000F80F8000F80F8000F8078000F0078000F0078000F0078000F003C
001E003C001E003C001E001C001C000E0038000F0078000780F00001C1C000007F000019
297EA71E>48 D<00100000700001F0000FF000FEF000F0F00000F00000F00000F00000F0
0000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F0
0000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F0
0000F00000F00000F00001F8007FFFE07FFFE013287BA71E>I<007F000003FFC0000701
F0000C00F80010007C001C007C003E007E003E003E003E003E001E003E000C007E000000
7C0000007C00000078000000F0000000E0000001C0000007000000FF00000001E0000000
F0000000780000003C0000003E0000001F0000001F0000001F8000001F8030001F807800
1F80FC001F80FC001F80FC001F00F8001F0040003F0040003E0030007C001800F8000F01
F00003FFC000007F000019297EA71E>51 D<00006000000060000000E0000001E0000001
E0000003E0000003E0000005E0000009E0000009E0000011E0000021E0000021E0000041
E0000081E0000081E0000101E0000201E0000201E0000401E0000801E0000801E0001001
E0003001E0002001E0004001E000C001E000FFFFFF80FFFFFF800001E0000001E0000001
E0000001E0000001E0000001E0000001E0000001E0000003F000007FFF80007FFF801928
7EA71E>I<007F000001FFC00007C1E0000F0070001E0038001C003C003C001C0078001E
0078001E00F8000F00F8000F00F8000F00F8000F00F8000F80F8000F80F8000F80F8000F
8078000F8078001F803C001F803C001F801C002F800E004F800700CF8003810F80007E0F
8000000F0000000F0000000F0000001E0000001E0000001E0000003C001C003C003E0078
003E0070003C00E0001801C0001C0780000FFE000003F8000019297EA71E>57
D<FFFFFFC000FFFFFFF80007E000FC0003E0003F0003E0000F8003E00007C003E00003E0
03E00001F003E00000F003E00000F803E000007C03E000007C03E000007C03E000003E03
E000003E03E000003E03E000003F03E000003F03E000003F03E000003F03E000003F03E0
00003F03E000003F03E000003F03E000003F03E000003F03E000003E03E000003E03E000
007E03E000007C03E000007C03E00000F803E00000F803E00001F003E00003E003E00007
C003E0000F8003E0001F0007E000FE00FFFFFFF800FFFFFFC00028297EA82E>68
D<FFFFE000FFFFE00007F0000003E0000003E0000003E0000003E0000003E0000003E000
0003E0000003E0000003E0000003E0000003E0000003E0000003E0000003E0000003E000
0003E0000003E0000003E0000003E0000003E0000003E0000003E0000003E0000103E000
0103E0000103E0000103E0000203E0000203E0000203E0000203E0000603E0000603E000
0E03E0001E03E0007C07E001FCFFFFFFFCFFFFFFFC20297EA825>76
D<FFE0000003FFC0FFE0000003FFC007E0000003F80002F0000005F00002F0000005F000
0278000009F0000278000009F0000278000009F000023C000011F000023C000011F00002
1E000021F000021E000021F000021E000021F000020F000041F000020F000041F0000207
800081F0000207800081F0000207800081F0000203C00101F0000203C00101F0000203E0
0201F0000201E00201F0000201E00201F0000200F00401F0000200F00401F0000200F004
01F0000200780801F0000200780801F00002003C1001F00002003C1001F00002003C1001
F00002001E2001F00002001E2001F00002000F4001F00002000F4001F00002000F4001F0
000200078001F0000700078001F0000F80030003F800FFF803007FFFC0FFF803007FFFC0
32297EA837>I<01FC00000E0780001001C0003C00E0003E00F0003E0078001C00780008
007800000078000000780000007800007FF80003E078000F8078001F0078003E0078007C
00780078007820F8007820F8007820F8007820F800F8207C00F8203C013C401F063FC007
F80F001B1A7E991E>97 D<07800000FF800000FF8000000F800000078000000780000007
800000078000000780000007800000078000000780000007800000078000000780000007
8000000783F000078C1C0007B0070007A0038007C003C0078001E0078001E0078000F007
8000F0078000F8078000F8078000F8078000F8078000F8078000F8078000F8078000F007
8000F0078001F0078001E0078001C007C003C00740078007200E0006181C000407E0001D
2A7FA921>I<007F8001C0700780080F003C1E007C3C007C3C00387C0010780000F80000
F80000F80000F80000F80000F80000F80000F800007800007C00003C00043C00041E0008
0F001007802001C0C0007F00161A7E991B>I<007E0003C3800700E00E00F01C00703C00
783C003878003C78003CF8003CF8003CFFFFFCF80000F80000F80000F80000F800007800
007C00003C00043C00041E00080E001007002001C0C0007F00161A7E991B>101
D<07800000FF800000FF8000000F80000007800000078000000780000007800000078000
00078000000780000007800000078000000780000007800000078000000783F800078C1C
0007900E0007A0070007A0078007C0078007C00780078007800780078007800780078007
800780078007800780078007800780078007800780078007800780078007800780078007
8007800780078007800780078007800780FFFCFFFCFFFCFFFC1E2A7FA921>104
D<0F001F801F801F801F800F0000000000000000000000000000000000000007807F807F
800F80078007800780078007800780078007800780078007800780078007800780078007
80078007800780FFF8FFF80D297FA811>I<0780FF80FF800F8007800780078007800780
078007800780078007800780078007800780078007800780078007800780078007800780
0780078007800780078007800780078007800780078007800780FFFCFFFC0E2A7FA911>
108 D<0781F800FC00FF860E030700FF98070C03800FA0079003C007A003D001E007C003
E001E007C003E001E0078003C001E0078003C001E0078003C001E0078003C001E0078003
C001E0078003C001E0078003C001E0078003C001E0078003C001E0078003C001E0078003
C001E0078003C001E0078003C001E0078003C001E0078003C001E0078003C001E0078003
C001E0FFFC7FFE3FFFFFFC7FFE3FFF301A7F9933>I<0783F800FF8C1C00FF900E000FA0
070007A0078007C0078007C0078007800780078007800780078007800780078007800780
078007800780078007800780078007800780078007800780078007800780078007800780
07800780078007800780FFFCFFFCFFFCFFFC1E1A7F9921>I<0787C0FF98E0FF91F00FA1
F007C1F007C0E007C0000780000780000780000780000780000780000780000780000780
0007800007800007800007800007800007800007800007C000FFFE00FFFE00141A7F9917
>114 D<0080000080000080000080000180000180000180000380000380000780000F80
001FFF80FFFF800780000780000780000780000780000780000780000780000780000780
0007800007800007800007804007804007804007804007804007804007804003C08001C0
8000E100003E0012257FA417>116 D E /Fw 26 122 df<1C003E007F00FF80FF80FF80
7F003E001C00000000000000000000000000000000000000000000000000000000000000
00000000000000001C003E007F00FF80FF80FF807F003E001C00092579A418>58
D<0000000C000000000000001E000000000000001E000000000000001E00000000000000
3F000000000000003F000000000000003F000000000000007F800000000000007F800000
000000007F80000000000000FFC0000000000000FFC0000000000000FFC0000000000001
9FE00000000000019FE00000000000039FF00000000000030FF00000000000030FF00000
000000070FF800000000000607F800000000000607F800000000000C07FC00000000000C
03FC00000000000C03FC00000000001803FE00000000001801FE00000000001801FE0000
0000003000FF00000000003000FF00000000003000FF000000000060007F800000000060
007F8000000000E0007F8000000000C0003FC000000000C0003FC000000001C0003FE000
00000180001FE00000000180001FE00000000380001FF000000003FFFFFFF000000003FF
FFFFF000000007FFFFFFF800000006000007F800000006000007F80000000C000007FC00
00000C000003FC0000000C000003FC00000018000001FE00000018000001FE0000001800
0001FE00000030000000FF00000030000000FF00000070000000FF800000600000007F80
0000600000007F800000F00000007FC00003F80000007FC0000FFC000001FFE000FFFFC0
003FFFFFC0FFFFC0003FFFFFC0FFFFC0003FFFFFC03A3D7DBC41>65
D<FFFFFFFFF8000000FFFFFFFFFF000000FFFFFFFFFFC0000000FFC0003FF00000007F80
0007FC0000007F800001FE0000007F8000007F0000007F8000003F8000007F8000001FC0
00007F8000000FE000007F80000007F000007F80000007F800007F80000003F800007F80
000003FC00007F80000001FC00007F80000001FE00007F80000000FE00007F80000000FF
00007F80000000FF00007F80000000FF00007F800000007F80007F800000007F80007F80
0000007F80007F800000007F80007F800000007FC0007F800000007FC0007F800000007F
C0007F800000007FC0007F800000007FC0007F800000007FC0007F800000007FC0007F80
0000007FC0007F800000007FC0007F800000007FC0007F800000007FC0007F800000007F
C0007F800000007F80007F800000007F80007F800000007F80007F800000007F80007F80
000000FF00007F80000000FF00007F80000000FF00007F80000001FE00007F80000001FE
00007F80000001FC00007F80000003F800007F80000003F800007F80000007F000007F80
00000FE000007F8000001FC000007F8000003FC000007F8000007F0000007F800001FE00
00007F800007FC000000FFC0003FF00000FFFFFFFFFFE00000FFFFFFFFFF000000FFFFFF
FFF80000003A3B7EBA42>68 D<FFFF8000000001FFFFFFFFC000000003FFFFFFFFC00000
0003FFFF00FFC000000003FF00006FE000000006FE00006FE000000006FE00006FE00000
0006FE000067F00000000CFE000067F00000000CFE000063F800000018FE000063F80000
0018FE000063F800000018FE000061FC00000030FE000061FC00000030FE000060FE0000
0060FE000060FE00000060FE000060FE00000060FE0000607F000000C0FE0000607F0000
00C0FE0000607F000000C0FE0000603F80000180FE0000603F80000180FE0000601FC000
0300FE0000601FC0000300FE0000601FC0000300FE0000600FE0000600FE0000600FE000
0600FE0000600FE0000600FE00006007F0000C00FE00006007F0000C00FE00006003F800
1800FE00006003F8001800FE00006003F8001800FE00006001FC003000FE00006001FC00
3000FE00006000FE006000FE00006000FE006000FE00006000FE006000FE000060007F00
C000FE000060007F00C000FE000060007F00C000FE000060003F818000FE000060003F81
8000FE000060001FC30000FE000060001FC30000FE000060001FC30000FE000060000FE6
0000FE000060000FE60000FE000060000FE60000FE0000600007FC0000FE0000600007FC
0000FE0000600003F80000FE0000600003F80000FE0000F00003F80000FE0001F80001F0
0000FE0007FE0001F00001FF00FFFFF000E001FFFFFFFFFFF000E001FFFFFFFFFFF000E0
01FFFFFF483B7DBA4F>77 D<000001FF80000000001FFFF8000000007F00FE00000001F8
001F80000007F0000FE000000FC00003F000001F800001F800003F000000FC00007E0000
007E0000FC0000003F0001FC0000003F8003F80000001FC007F00000000FE007F0000000
0FE00FF00000000FF00FE000000007F01FE000000007F81FC000000003F83FC000000003
FC3FC000000003FC3FC000000003FC7FC000000003FE7F8000000001FE7F8000000001FE
7F8000000001FEFF8000000001FFFF8000000001FFFF8000000001FFFF8000000001FFFF
8000000001FFFF8000000001FFFF8000000001FFFF8000000001FFFF8000000001FFFF80
00000001FFFF8000000001FF7F8000000001FE7FC000000003FE7FC000000003FE7FC000
000003FE7FC000000003FE3FC000000003FC3FE000000007FC1FE000000007F81FE00000
0007F80FF00000000FF00FF00000000FF007F00000000FE007F80000001FE003F8000000
1FC001FC0000003F8000FE0000007F00007F000000FE00003F000000FC00001F800001F8
00000FE00007F0000007F0000FE0000001FC003F800000007F00FE000000001FFFF80000
000001FF800000383D7BBB43>79 D<FFFFFFFFF00000FFFFFFFFFF0000FFFFFFFFFFC000
00FFC0003FF000007F800007F800007F800003FC00007F800001FE00007F800000FF0000
7F8000007F80007F8000007F80007F8000007FC0007F8000003FC0007F8000003FE0007F
8000003FE0007F8000003FE0007F8000003FE0007F8000003FE0007F8000003FE0007F80
00003FE0007F8000003FC0007F8000003FC0007F8000007FC0007F8000007F80007F8000
007F80007F800000FF00007F800001FE00007F800003FC00007F80000FF000007F80003F
E000007FFFFFFF8000007FFFFFFC0000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
0000000000FFC000000000FFFFFFC0000000FFFFFFC0000000FFFFFFC0000000333B7EBA
3B>I<000FF80060003FFF006000FFFFC0E001F807E1E007E000F1E00F80003BE00F0000
1FE01F00000FE03E000007E03E000003E07C000001E07C000001E0FC000001E0FC000000
E0FC000000E0FC000000E0FC00000060FE00000060FE00000060FF000000607F00000000
7F800000007FE00000003FF80000003FFF8000001FFFF800000FFFFF800007FFFFE00003
FFFFF80001FFFFFC0000FFFFFE00003FFFFF000007FFFF8000007FFFC0000007FFE00000
007FE00000001FF00000000FF000000007F000000007F800000003F840000003F8C00000
03F8C0000001F8C0000001F8C0000001F8E0000001F8E0000001F8E0000001F0F0000001
F0F0000003F0F8000003E0F8000003E0FC000007C0FF00000F80FB80000F00F1F0003E00
F0FE00FC00E03FFFF800C00FFFE000C001FF8000253D7BBB30>83
D<3FFFFFFFFFFFF83FFFFFFFFFFFF83FFFFFFFFFFFF83FE001FF8007F83F0000FF0001F8
7C0000FF00007C780000FF00003C780000FF00003C700000FF00001C700000FF00001C60
0000FF00000C600000FF00000C600000FF00000C600000FF00000C600000FF00000CE000
00FF00000EC00000FF000006C00000FF000006C00000FF000006C00000FF000006000000
FF000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF
000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF00
0000000000FF000000000000FF000000000000FF000000000000FF000000000000FF0000
00000000FF000000000000FF000000000000FF000000000000FF000000000000FF000000
000000FF000000000000FF000000000000FF000000000000FF000000000000FF00000000
0000FF000000000000FF000000000000FF000000000000FF000000000000FF0000000000
00FF000000000000FF000000000000FF000000000000FF000000000003FFC00000001FFF
FFFFF800001FFFFFFFF800001FFFFFFFF800373B7DBA3E>I<FFFFFE01FFFFFC003FFFE0
FFFFFE01FFFFFC003FFFE0FFFFFE01FFFFFC003FFFE003FF800007FF000007FF0001FF00
0003FE000001FC0001FE000003FC000000F00000FF000001FE000000700000FF000001FE
000000600000FF000001FE000000600000FF800000FF000000E000007F800000FF000000
C000007F800000FF000000C000007FC00000FF800001C000003FC00000FF800001800000
3FC00000FF8000018000003FE00001BFC000038000001FE00001BFC000030000001FE000
01BFC000030000001FF000031FE000070000000FF000031FE000060000000FF000031FE0
00060000000FF800071FF0000600000007F800060FF0000C00000007F800060FF0000C00
000007FC000E0FF8000C00000003FC000C07F8001800000003FC000C07F8001800000003
FC001C07FC001800000001FE001803FC003000000001FE001803FC003000000001FE0038
03FE003000000000FF003001FE006000000000FF003001FE006000000000FF003001FF00
60000000007F806000FF00C0000000007F806000FF00C0000000007F806000FF80C00000
00003FC0C0007F8180000000003FC0C0007F8180000000003FC0C0007FC180000000001F
E180003FC300000000001FE180003FC300000000001FE180003FC300000000000FF30000
1FE600000000000FF300001FE600000000000FF300001FE6000000000007FE00000FFC00
0000000007FE00000FFC000000000007FE00000FFC000000000007FC000007FC00000000
0003FC000007F8000000000003FC000007F8000000000003F8000003F8000000000001F8
000003F0000000000001F8000003F0000000000001F0000001F0000000000000F0000001
E0000000000000F0000001E0000000000000E0000000E000000000000060000000C00000
00533C7EBA58>87 D<003FC0000001FFF8000007C07E00000E001F00001E000F80001F80
07C0003FC003E0003FC003F0003FC003F0003FC001F0001F8001F8000F0001F800000001
F800000001F800000001F800000001F80000001FF8000007FFF800003FF9F80000FF01F8
0003F801F80007F001F8000FC001F8001F8001F8003F8001F8007F0001F8007F0001F800
7E0001F80CFE0001F80CFE0001F80CFE0001F80CFE0003F80CFE0003F80C7E0006F80C7F
0006F80C3F000C7C181F80187E380FE0703FF003FFE01FE0007F800F8026287CA62B>97
D<01F800000000FFF800000000FFF800000000FFF80000000007F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80FF0000001F83FFE00
0001F8F01F000001F9C007C00001FB0003E00001FE0001F00001FC0000F80001FC00007C
0001F800007E0001F800003E0001F800003F0001F800003F0001F800003F8001F800001F
8001F800001F8001F800001FC001F800001FC001F800001FC001F800001FC001F800001F
C001F800001FC001F800001FC001F800001FC001F800001FC001F800001F8001F800001F
8001F800003F8001F800003F0001F800003F0001F800007E0001F800007C0001FC0000FC
0001FC0000F80001F60001F00001E30003E00001E1C00FC00001C0F03F000001803FFC00
0000000FE000002A3D7EBB30>I<0003FE00001FFFC0003E01F000F8003801F0003C03E0
00FC07C001FE0FC001FE0F8001FE1F8001FE3F0000FC3F0000787F0000007F0000007E00
00007E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE0000007E0000007F0000007F0000003F0000033F0000031F8000031F8000060FC0
000607C0000C03E0001801F0003000F800E0007E03C0001FFF000003FC0020287DA626>
I<0003FC0000001FFF0000007E07C00000F801E00001E000F00003E000780007C0007C00
0F80003E001F80003E001F00003F003F00001F003F00001F007F00001F007E00001F807E
00001F80FE00001F80FE00001F80FFFFFFFF80FFFFFFFF80FE00000000FE00000000FE00
000000FE00000000FE000000007E000000007E000000007F000000007F000000003F0000
01803F000001801F800001800F800003000FC000030007C000060003E0000C0001F00018
000078007000003F01E000000FFF80000001FE000021287EA626>101
D<0007F001F8003FFE0FFC007C1F1E3E00F007F03E01E003E01C03C001E00807C001F000
0FC001F8000F8000F8001F8000FC001F8000FC001F8000FC001F8000FC001F8000FC001F
8000FC001F8000FC000F8000F8000FC001F80007C001F00003C001E00001E003C00001F0
078000037C1F0000073FFE00000607F0000006000000000E000000000E000000000E0000
00000F000000000F0000000007C000000007FFFFC00003FFFFFC0001FFFFFF0000FFFFFF
8003FFFFFFC00780003FE01F000007F03E000001F83C000000F87C000000F8780000007C
F80000007CF80000007CF80000007CF80000007CF80000007C7C000000F87C000000F83E
000001F01F000003E00F800007C003E0001F0001FC00FE00003FFFF0000007FF80002739
7EA52B>103 D<01F800000000FFF800000000FFF800000000FFF80000000007F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F807F800
0001F81FFE000001F8781F000001F8E00F800001F98007C00001FB0007E00001FB0003E0
0001FE0003F00001FC0003F00001FC0003F00001FC0003F00001F80003F00001F80003F0
0001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F0
0001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F0
0001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F0
0001F80003F00001F80003F00001F80003F00003FC0007F800FFFFF1FFFFE0FFFFF1FFFF
E0FFFFF1FFFFE02B3C7EBB30>I<01C00003E00007F0000FF8000FF8000FF80007F00003
E00001C00000000000000000000000000000000000000000000000000000000000000000
000001F8007FF8007FF8007FF80007F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80003FC00FF
FFE0FFFFE0FFFFE0133A7FB917>I<01F800000000FFF800000000FFF800000000FFF800
00000007F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F800FFFE0001F800FFFE0001F800FFFE0001F8007FE00001F800
3F800001F8003E000001F80038000001F80030000001F800E0000001F801C0000001F803
00000001F80600000001F80C00000001F81800000001F83C00000001F87E00000001F8FF
00000001FB9F00000001FF1F80000001FC0FC0000001F807C0000001F807E0000001F803
F0000001F801F0000001F801F8000001F800FC000001F8007C000001F8007E000001F800
3F000001F8001F800001F8001F800001F8000FC00001F8000FE00003FC001FF800FFFFF0
7FFF80FFFFF07FFF80FFFFF07FFF80293C7EBB2D>107 D<01F800FFF800FFF800FFF800
07F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0143C7FBB17>I<01F803F800
03F80000FFF81FFF001FFF0000FFF83C0F803C0F8000FFF8E007C0E007C00007F9C003E1
C003E00001FB0003F30003F00001FB0001F30001F00001FE0001FE0001F80001FE0001FE
0001F80001FC0001FC0001F80001FC0001FC0001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80003FC0003FC0003FC00FFFFF0FFFFF0FFFFF0FFFFF0FFFF
F0FFFFF0FFFFF0FFFFF0FFFFF044267EA549>I<01F807F80000FFF81FFE0000FFF8781F
0000FFF8E00F800007F98007C00001FB0007E00001FB0003E00001FE0003F00001FC0003
F00001FC0003F00001FC0003F00001F80003F00001F80003F00001F80003F00001F80003
F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003
F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003
F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003
F00001F80003F00003FC0007F800FFFFF1FFFFE0FFFFF1FFFFE0FFFFF1FFFFE02B267EA5
30>I<0001FE0000000FFFC000003F03F00000F8007C0001F0003E0003E0001F0007C000
0F800F800007C00F800007C01F000003E03F000003F03F000003F03F000003F07E000001
F87E000001F87E000001F8FE000001FCFE000001FCFE000001FCFE000001FCFE000001FC
FE000001FCFE000001FCFE000001FCFE000001FC7E000001F87E000001F87F000003F83F
000003F03F000003F01F000003E01F800007E00F800007C007C0000F8003E0001F0001F0
003E0000F8007C00003F03F000000FFFC0000001FE000026287EA62B>I<03F00F80FFF0
3FE0FFF070F0FFF0C1F807F183F801F303F801F603F801F601F001F6004001FC000001FC
000001FC000001FC000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000003FC0000FFFFF800FFFFF800FFFF
F8001D267EA522>114 D<007F818003FFE3800F807F801E001F80380007803800078070
00038070000380F0000180F0000180F0000180F8000180F8000180FE0000007F8000007F
FC00003FFFC0001FFFF0000FFFFC0003FFFE0001FFFF00001FFF800000FF8000001FC040
000FC0C00007E0C00003E0E00001E0E00001E0E00001E0E00001E0F00001E0F00001C0F8
0003C0FC000380FC000700F7000E00E3C03C00C0FFF800C03FC0001B287DA622>I<0018
000000180000001800000018000000180000003800000038000000380000003800000078
00000078000000F8000000F8000001F8000003F8000007F800001FFFFF00FFFFFF00FFFF
FF0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8018001F8018001F8018001F8018001F8018001F8018001F8018001F8018001F8
018000F8018000F8030000FC0300007C0300003E0600001F0C00000FF8000003F0001936
7EB421>I<FFFF801FFFFFFF801FFFFFFF801FFF07FC0007F803F80003E003F80001C001
F800018001F800018000FC00030000FC00030000FC000300007E000600007E000600007F
000E00003F000C00003F000C00001F801800001F801800001FC03800000FC03000000FC0
30000007E060000007E060000007E060000003F0C0000003F0C0000003F9C0000001F980
000001F980000000FF00000000FF00000000FF000000007E000000007E000000003C0000
00003C000000003C0000000018000028267EA42D>118 D<FFFF801FFFFFFF801FFFFFFF
801FFF07FC0007F803F80003E003F80001C001F800018001F800018000FC00030000FC00
030000FE000700007E000600007E000600003F000C00003F000C00003F801C00001F8018
00001F801800000FC03000000FC03000000FE070000007E060000007E060000003F0C000
0003F0C0000003F9C0000001F980000001F980000000FF00000000FF00000000FF000000
007E000000007E000000003C000000003C000000003C0000000018000000001800000000
30000000003000000000300000000060000000006000000000C000001000C000007C00C0
0000FE01800000FE01800000FE03000000FE070000007C06000000700C00000038380000
001FF000000007C000000028377EA42D>121 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 182 517 a Fw(The)29 b(Witness)h(Algorithm:)39
b(Solving)30 b(P)n(artially)246 621 y(Observ)-5 b(able)30
b(Mark)n(o)n(v)f(Decision)h(Pro)r(cesses)719 768 y Fv(Mic)n(hael)18
b(L.)i(Littman)1229 747 y Fu(\003)698 885 y Fv(Decem)n(b)r(er)d(30th,)j
(1994)164 1179 y Ft(1)83 b(In)n(tro)r(duction)164 1288
y Fs(Mark)o(o)o(v)15 b(decision)g(pro)q(cesses)h(\(MDP's\))937
1284 y([)950 1288 y(Bellman,)d(1957)1251 1284 y(])1282
1288 y(are)j(a)g(mathematical)c(for-)164 1349 y(malization)g(of)h
(problems)g(in)g(whic)o(h)g(a)g(decision-mak)o(er,)f(or)i
Fr(agent)p Fs(,)g(m)o(ust)f(c)o(ho)q(ose)h(ho)o(w)164
1409 y(to)k(act)g(to)g(maximize)c(its)k(rew)o(ard)g(o)o(v)o(er)f(a)h
(series)f(of)h(in)o(teractions)g(with)f(its)h Fr(envir)n(on-)164
1469 y(ment)p Fs(.)35 b(P)o(artially)20 b(observ)m(able)h(Mark)o(o)o(v)
e(decision)h(pro)q(cesses)i(\(POMDP's\))1629 1465 y([)1643
1469 y(Drak)o(e,)164 1529 y(1962,)12 b(Astrom,)f(1965,)i(Smallw)o(o)q
(o)q(d)e(and)h(Sondik,)g(1973)1194 1525 y(])1220 1529
y(generalize)e(the)i(MDP)f(frame-)164 1589 y(w)o(ork)i(to)h(the)e(case)
i(where)e(the)h(agen)o(t)g(m)o(ust)f(mak)o(e)f(its)i(decisions)g(in)g
(partial)g(ignorance)164 1650 y(of)k(its)f(curren)o(t)f(situation.)237
1710 y(This)23 b(pap)q(er)g(describ)q(es)g(the)f(POMDP)h(framew)o(ork)f
(and)h(presen)o(ts)f(some)g(w)o(ell-)164 1770 y(kno)o(wn)g(results)g
(from)f(the)h(\014eld.)39 b(It)21 b(then)h(presen)o(ts)g(a)h(no)o(v)o
(el)e(metho)q(d)g(called)g(the)164 1830 y(witness)d(algorithm)f(for)i
(solving)f(POMDP)h(problems)e(and)h(analyzes)g(its)g(computa-)164
1890 y(tional)12 b(complexit)o(y)l(.)k(W)l(e)c(argue)h(that)f(the)g
(witness)g(algorithm)f(is)h(sup)q(erior)g(to)h(existing)164
1950 y(algorithms)f(for)i(solving)f(POMDP's)g(in)g(an)g(imp)q(ortan)o
(t)f(complexit)o(y-theoretic)d(sense.)164 2095 y Fq(1.1)70
b(Application)20 b(scenario)164 2187 y Fs(Figure)11 b(1)h(illustrates)e
(an)i(extremely)c(simple)h(rob)q(ot)k(task.)20 b(A)11
b(rob)q(ot)h(w)o(anders)g(the)f(halls)164 2247 y(of)16
b(an)g(o\016ce)e(building.)21 b(Its)15 b(job)h(is)f(to)h(ensure)f(that)
h(the)f(laser)g(prin)o(ter)g(\(P\))g(is)g(sto)q(c)o(k)o(ed)164
2308 y(with)d(pap)q(er.)21 b(The)12 b(designers)g(of)h(the)f(rob)q(ot)h
(ha)o(v)o(e)f(guaran)o(teed)h(us)f(that)h(the)f(rob)q(ot)i(can)164
2368 y(only)h(b)q(e)h(in)f(one)h(of)g(a)g(\014nite)f(n)o(um)o(b)q(er)f
(of)i(states)g(an)o(y)f(time)f(a)i(decision)f(is)g(p)q(ossible.)21
b(A)p 164 2412 648 2 v 220 2442 a Fp(\003)239 2457 y
Fo(This)13 b(is)h(join)o(t)f(w)o(ork)h(with)f(T)m(on)o(y)g(Cassandra)h
(and)g(Leslie)g(Kaelbling.)961 2607 y Fs(1)p eop
%%Page: 2 2
2 1 bop 447 266 a
 16624365 7104430 3815342 40850472 26641612 50586173 startTexFig
 447 266 a
%%BeginDocument: office.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
161.65 650.5 172.65 650.5 172.65 643 161.65 643 4 Y
7 X
0 0 0 1 0 0 0 K
V
J
161.65 650.5 172.65 650.5 172.65 643 161.65 643 4 Y
J
165.65 643 161.65 643 161.65 650.5 165.65 650.5 4 L
[4 3] 4 I
165.65 650.5 168.65 650.5 2 L
J
168.65 650.5 172.65 650.5 172.65 643 168.65 643 4 L
[4 3] 4 I
168.65 643 165.65 643 2 L
J
213.65 651 224.65 651 224.65 643.5 213.65 643.5 4 Y
V
J
213.65 651 224.65 651 224.65 643.5 213.65 643.5 4 Y
J
217.65 643.5 213.65 643.5 213.65 651 217.65 651 4 L
[4 3] 4 I
217.65 651 220.65 651 2 L
J
220.65 651 224.65 651 224.65 643.5 220.65 643.5 4 L
[4 3] 4 I
220.65 643.5 217.65 643.5 2 L
J
94.15 700 197.15 701 2 L
V
3 H
2 Z
0 X
N
145.15 647 254.15 647 2 L
7 X
V
0 X
N
199.15 655 199.15 696 2 L
7 X
V
0 X
N
7 X
90 450 13.5 13.5 148.65 701.5 G
0.5 H
0 Z
0 X
90 450 13.5 13.5 148.65 701.5 A
7 X
90 450 13.5 13.5 198.65 701.5 G
0 X
90 450 13.5 13.5 198.65 701.5 A
7 X
90 450 13.5 13.5 198.65 647.5 G
0 X
90 450 13.5 13.5 198.65 647.5 A
7 X
90 450 13.5 13.5 149.15 647.5 G
0 X
90 450 13.5 13.5 149.15 647.5 A
7 X
90 450 13.5 13.5 89.82 701.18 G
0 X
90 450 13.5 13.5 89.82 701.18 A
7 X
90 450 13.5 13.5 254.82 648.18 G
0 X
90 450 13.5 13.5 254.82 648.18 A
2 24 Q
(P) 248.15 640 T
(C) 81.81 693 T
2 18 Q
(T) 322.15 665 T
(ray full) 332.51 665 T
(1) 144.15 693.32 T
(2) 194.15 695.36 T
(4) 194.15 641.36 T
(3) 144.65 641.36 T
J
90 180 17.85 17.85 76.99 751.15 G
1 H
2 Z
90 180 17.85 17.85 76.99 751.15 A
0 90 17.85 17.85 76.99 751.15 G
0 90 17.85 17.85 76.99 751.15 A
180 270 8.92 8.92 76.99 715.46 G
180 270 8.92 8.92 76.99 715.46 A
270 360 8.92 8.92 76.99 715.46 G
270 360 8.92 8.92 76.99 715.46 A
108.72 737.93 111.69 729.99 2 L
V
3 H
N
109.22 737.93 117.64 739.91 2 L
V
N
84.93 753.79 99.3 760.73 R
7 X
V
0.5 H
0 Z
0 X
N
99.8 754.78 102.27 758.75 R
7 X
V
1 H
0 X
N
59.15 714.63 94.84 751.81 R
8 X
V
3 H
0 X
N
76.99 742.23 108.22 737.77 2 L
8 X
V
2 Z
0 X
N
(T) 323.15 625 T
(ray empty) 333.51 625 T
2 70 Q
(?) 274.15 630 T
2 24 Q
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 551 817 a Fs(Figure)16 b(1:)21 b(A)16 b(sample)f(o\016ce)h(building)f
(task.)164 960 y(state)g(consists)h(of)g(the)f(p)q(osition)h(of)f(the)g
(rob)q(ot,)h(discretized)e(to)i(the)f(nearest)g(corridor)164
1020 y(in)o(tersection,)k(and)i(the)e(status)i(of)g(the)e(prin)o(ter.)
32 b(The)20 b(rob)q(ot's)h(actions)f(are)g(c)o(hosen)164
1080 y(from)14 b(a)h(small)e(\014nite)h(set:)20 b(N,)14
b(S,)g(E,)h(and)g(W.)f(Whenev)o(er)f(the)i(rob)q(ot)h(is)e(in)h(the)f
(prin)o(ter)164 1140 y(ro)q(om)i(and)h(the)f(tra)o(y)f(is)h(empt)o(y)l
(,)e(the)i(rob)q(ot's)h(lo)o(w-lev)o(el)d(programming)h(kic)o(ks)f(in)i
(and)164 1201 y(causes)i(it)f(to)h(re\014ll)f(the)g(tra)o(y)l(.)25
b(Th)o(us,)18 b(all)f(the)g(rob)q(ot)i(needs)f(to)g(do)g(is)f(to)h(sho)
o(w)g(up)g(in)164 1261 y(the)e(prin)o(ter)f(ro)q(om)h(eac)o(h)g(time)e
(the)i(pap)q(er)h(runs)g(out.)237 1321 y(There)g(are)f(t)o(w)o(o)h
(subtleties)f(that)h(mak)o(e)e(the)i(problem)e(in)o(teresting.)21
b(One)c(is)f(that)164 1381 y(the)21 b(rob)q(ot)i(is)f(p)q(enalized)f
(one)g(p)q(oin)o(t)h(for)g(eac)o(h)f(step)h(it)f(is)h(a)o(w)o(a)o(y)f
(from)g(its)g(c)o(harger)164 1441 y(\(C\).)e(It)g(is)h(c)o(harged)f
(ten)h(p)q(oin)o(ts)g(for)g(eac)o(h)f(step)g(the)h(prin)o(ter)e(tra)o
(y)h(remains)g(empt)o(y)l(.)164 1502 y(Ideally)l(,)14
b(the)h(rob)q(ot)i(should)f(mo)o(v)o(e)d(directly)h(from)h(the)g(prin)o
(ter)g(ro)q(om)g(to)h(its)g(c)o(harger,)164 1562 y(returning)k(as)g(so)
q(on)h(as)f(the)g(tra)o(y)f(is)h(empt)o(y)d(\(whic)o(h)i(happ)q(ens)i
(with)f(some)e(random)164 1622 y(probabilit)o(y)d(on)i(eac)o(h)f
(step\).)237 1682 y(Ho)o(w)o(ev)o(er,)11 b(this)i(strategy)g(is)f(not)h
(p)q(ossible)g(b)q(ecause)f(the)h(en)o(vironmen)o(t)d(is)i
Fr(p)n(artial)r(ly)164 1742 y(observable)p Fs(.)34 b(That)20
b(is,)g(from)f(outside)h(the)f(prin)o(ter)g(ro)q(om,)h(the)f(rob)q(ot)i
(is)f(unable)g(to)164 1803 y(determine)e(if)j(the)g(prin)o(ter)f(tra)o
(y)g(is)h(empt)o(y)e(or)i(full.)35 b(The)21 b(optimal)f(p)q(olicy)g
(for)h(the)164 1863 y(rob)q(ot)j(is)e(to)h(w)o(ait)f(at)h(the)f(c)o
(harger)g(ba)o(y)h(un)o(til)e(it)h(exp)q(ects)g(that)h(more)e(p)q(oin)o
(ts)i(are)164 1923 y(b)q(eing)16 b(lost)h(due)f(to)h(the)f(tra)o(y)g(b)
q(eing)g(empt)o(y)e(than)j(it)f(w)o(ould)g(cost)g(to)h(go)g(and)g(c)o
(hec)o(k.)237 1983 y(The)h(POMDP)g(problem)e(comes)h(do)o(wn)h(to)h
(taking)f(a)g(map)f(of)h(the)g(en)o(vironmen)o(t)164
2043 y(whic)o(h)j(includes)g(state)h(transition)g(information,)g
(observ)m(ation)g(probabilities,)g(and)164 2104 y(the)d(rew)o(ard)h
(structure,)f(and)i(generating)e(a)h(plan)g(for)g(action)f(that)h
(maximize)o(s)d(the)164 2164 y(rew)o(ard.)164 2308 y
Fq(1.2)70 b(Notation)164 2400 y Fs(A)15 b(POMDP)h(problem)e(can)h(b)q
(e)h(de\014ned)f(b)o(y)g(a)h(\014nite)f(set)h(of)g(states,)f
Fn(S)t Fs(,)g(a)h(\014nite)f(set)h(of)164 2461 y(actions,)g
Fn(A)p Fs(,)g(and)h(a)f(\014nite)g(set)g(of)g(observ)m(ations,)h
Fn(O)q Fs(.)961 2607 y(2)p eop
%%Page: 3 3
3 2 bop 237 315 a Fs(Three)17 b(functions)g(relate)g(these)g(sets.)24
b(The)18 b(transition)f(function,)g Fm(T)22 b Fs(:)15
b Fn(S)h(\002)c(A)j(!)164 376 y Fs(\005\()p Fn(S)t Fs(\))c(de\014nes)h
(the)f(e\013ects)h(of)g(the)f(v)m(arious)i(actions)f(on)g(the)g(state)g
(of)g(the)f(en)o(vironmen)o(t.)164 436 y(\(\005\()p Fn(\001)p
Fs(\))h(represen)o(ts)f(the)h(set)g(of)h(discrete)e(probabilit)o(y)g
(distributions)h(o)o(v)o(er)g(a)g(giv)o(en)g(\014nite)164
496 y(set.\))20 b(The)11 b(notation)i Fm(T)7 b Fs([)p
Fm(s;)h(a;)g(s)729 478 y Fl(0)739 496 y Fs(])j(represen)o(ts)g(the)g
(probabilit)o(y)g(that)h(state)g Fm(s)1552 478 y Fl(0)1576
496 y Fs(will)e(result)164 556 y(from)15 b(taking)i(action)f
Fm(a)g Fs(in)g(state)g Fm(s)g Fs(\(that)h(is,)f(Pr\()p
Fm(s)1115 538 y Fl(0)1126 556 y Fn(j)p Fm(s;)8 b(a)p
Fs(\)\).)237 616 y(The)17 b(rew)o(ard)h(function,)f Fm(R)f
Fs(:)f Fn(S)h(\002)11 b(A)16 b(!)f(<)p Fs(,)j(sp)q(eci\014es)e(the)i
(agen)o(t's)f(pa)o(y)o(o\013s.)25 b(The)164 677 y(pa)o(y)o(o\013)16
b(is)g(a)g(random)f(function)h(of)g(the)f(state)h(and)h(action)e(with)h
Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])15 b(represen)o(ting)164
737 y(the)h(exp)q(ected)f(immedi)o(ate)f(rew)o(ard)i(for)g(taking)h
(action)f Fm(a)g Fs(from)f(state)i Fm(s)p Fs(.)237 797
y(The)c(function)h Fm(O)h Fs(:)e Fn(S)c(\002)c(A)14 b(!)g
Fs(\005\()p Fn(O)q Fs(\))e(sp)q(eci\014es)h(the)g(observ)m(ation)i(mo)q
(del.)k(That)14 b(is,)164 857 y Fm(O)q Fs([)p Fm(s)239
839 y Fl(0)251 857 y Fm(;)8 b(a;)g(o)p Fs(])15 b(is)g(Pr\()p
Fm(o)p Fn(j)p Fm(s)552 839 y Fl(0)564 857 y Fm(;)8 b(a)p
Fs(\),)14 b(the)i(probabilit)o(y)e(of)i(observing)g Fm(o)g
Fs(in)f(state)g Fm(s)1500 839 y Fl(0)1528 857 y Fs(after)g(ha)o(ving)
164 917 y(tak)o(en)h(action)g Fm(a)p Fs(.)164 1060 y
Fq(1.3)70 b(Ob)t(jectiv)n(e)164 1152 y Fs(The)18 b(agen)o(t's)h(ob)s
(jectiv)o(e)d(is)i(to)h(generate)f(actions)h(so)g(as)g(to)g(maximi)o
(ze)c(its)j(exp)q(ected)164 1212 y(sum)i(of)i(rew)o(ard.)37
b(Ho)o(w)o(ev)o(er,)20 b(this)i(is)f(not)h(completely)c(w)o
(ell-de\014ned)i(as)i(it)f(stands.)164 1273 y(If)d(the)g(agen)o(t)g
(can)g(guaran)o(tee)h(itself)e(a)h(h)o(uge)g(rew)o(ard)g(tomorro)o(w)g
(b)o(y)g(doing)g(nothing)164 1333 y(to)q(da)o(y)l(,)26
b(what's)e(to)h(k)o(eep)d(it)i(from)f(doing)h(nothing)g(forev)o(er?)44
b(This)24 b(is)g(sometimes)164 1393 y(called)18 b(the)i(problem)e(of)h
(the)h Fr(in\014nitely)i(delaye)n(d)f(splur)n(ge)1278
1389 y Fs([)1292 1393 y(Platzman,)e(1977)1626 1389 y(])1660
1393 y(and)i(a)164 1453 y(standard)h(w)o(a)o(y)e(to)g(com)o(bat)g(it)f
(is)i(to)f(use)h(geometric)d(discoun)o(ting.)34 b(This)20
b(means)g(a)164 1513 y(rew)o(ard)15 b(receiv)o(ed)e Fm(t)i
Fs(steps)g(in)g(the)g(future)g(is)g(only)g(w)o(orth)g
Fm(\015)1267 1495 y Fk(t)1297 1513 y Fs(as)h(m)o(uc)o(h)d(as)j(it)f(w)o
(ould)g(b)q(e)164 1574 y(if)j(it)h(w)o(ere)f(receiv)o(ed)f(to)q(da)o(y)
l(.)29 b(The)19 b(v)m(ariable)g Fm(\015)j Fs(is)d(a)g(factor)g
(strictly)f(b)q(et)o(w)o(een)g(0)h(and)164 1634 y(1)e(that)f(con)o
(trols)g(ho)o(w)h(m)o(uc)o(h)d(future)i(rew)o(ards)h(are)f(w)o(orth)
1255 1616 y Fj(1)1275 1634 y Fs(.)21 b(Small)15 b(v)m(alues)h(of)g
Fm(\015)k Fs(\(lik)o(e)164 1694 y(0.01\))d(mak)o(e)d(future)i(rew)o
(ards)g(w)o(orth)h(v)o(ery)e(little)f(whereas)j(larger)f(v)m(alues)g
(\(lik)o(e)e(0.99\))164 1754 y(mak)o(e)e(future)i(rew)o(ards)h(w)o
(orth)g(more.)k(T)o(ypical)13 b(v)m(alues)h(in)g(our)h(exp)q(erimen)o
(ts)d(are)i(0.75)164 1814 y(and)j(0.90.)237 1875 y(The)i(in)o(tro)q
(duction)f(of)h(the)f(discoun)o(t)g(factor)h(mak)o(es)e(the)h(notion)h
(of)g(an)g(optimal)164 1935 y(p)q(olicy)f(w)o(ell-de\014ned.)26
b(The)18 b(agen)o(t)h(should)f(c)o(ho)q(ose)h(actions)g(to)f(mak)o(e)f
(the)h(exp)q(ected)164 1995 y(sum)d(of)i(discoun)o(ted)f(future)g(rew)o
(ards,)785 2118 y Fm(E)s Fn(f)862 2064 y Fl(1)849 2076
y Fi(X)850 2167 y Fk(i)p Fj(=0)918 2118 y Fm(\015)946
2097 y Fk(i)960 2118 y Fm(R)p Fs([)p Fm(s)1034 2125 y
Fk(i)1048 2118 y Fm(;)8 b(a)1096 2125 y Fk(i)1109 2118
y Fs(])p Fn(g)p Fm(;)164 2247 y Fs(as)19 b(large)f(as)h(p)q(ossible.)28
b(The)18 b(b)q(oundedness)i(of)f Fm(R)g Fs(and)f(the)h(fact)f(that)h
Fm(\015)h(<)e Fs(1)g(insure)164 2307 y(that)f(the)f(v)m(alue)g(of)g
(this)g(in\014nite)g(sum)f(is)h(\014nite.)p 164 2337
648 2 v 220 2368 a Fh(1)239 2383 y Fo(Setting)c Fg(\015)i
Fo(=)e(0)f(leads)h(to)g(a)g(simpler)e(problem)h(of)g(maximi)o(zing)e
(imm)o(ediate)h(rew)o(ard.)18 b(That)11 b(class)164 2433
y(of)h(problems)f(is)h(not)h(addressed)h(here)g(b)q(ecause)g(it)e
(complicates)f(sev)o(eral)i(of)f(the)h(argumen)o(ts.)k(All)11
b(the)164 2482 y(fundamen)o(tal)h(results)j(hold)e(in)h(the)g
Fg(\015)g Fo(=)e(0)i(case.)961 2607 y Fs(3)p eop
%%Page: 4 4
4 3 bop 588 266 a
 12172246 4736286 5065195 43679088 20655472 49731010 startTexFig
 588 266 a
%%BeginDocument: small.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
214.58 692.94 226.12 689.63 214.58 686.32 214.58 689.63 4 Y
0 X
0 0 0 1 0 0 0 K
V
158.83 689.63 214.58 689.63 2 L
8 X
V
1 H
2 Z
0 X
N
7 X
90 450 18.93 18.93 138.5 691.73 G
0.5 H
0 Z
0 X
90 450 18.93 18.93 138.5 691.73 A
7 X
90 450 18.93 18.93 245.04 691.73 G
0 X
90 450 18.93 18.93 245.04 691.73 A
262.58 667.36 256.53 677.72 267.15 672.14 264.87 669.75 4 Y
V
264.88 669.74 M
 274.9 664.52 285.43 672.33 285.24 688.94 D
 285.11 701.2 270.44 712.38 259.34 705.76 D
2 Z
N
115.56 670.2 126.19 675.78 120.13 665.42 117.85 667.81 4 Y
V
117.85 667.79 M
 107.83 662.57 97.3 670.38 97.48 686.99 D
 97.62 699.25 112.29 710.44 123.39 703.81 D
N
1 14 Q
(o) 116.88 747 T
2 12 Q
(1) 124.41 740.9 T
2 14 Q
(:) 131.23 747 T
(0) 138.62 747 T
(.) 145.62 747 T
(1) 149.12 747 T
1 F
(o) 116.88 728 T
2 12 Q
(2) 124.41 721.9 T
2 14 Q
(:) 131.23 728 T
(0) 138.62 728 T
(.) 145.62 728 T
(9) 149.12 728 T
1 F
(o) 228.88 745.5 T
2 12 Q
(1) 236.41 739.4 T
2 14 Q
(:) 243.23 745.5 T
(1) 250.62 745.5 T
(.) 257.62 745.5 T
(0) 261.12 745.5 T
1 F
(o) 228.88 726.5 T
2 12 Q
(2) 236.41 720.4 T
2 14 Q
(:) 243.23 726.5 T
(0) 250.62 726.5 T
(.) 257.62 726.5 T
(0) 261.12 726.5 T
1 F
(s) 134.51 690.5 T
2 12 Q
(1) 140.49 684.4 T
2 14 Q
(0) 76.25 670 T
(.) 83.25 670 T
(2) 86.75 670 T
1 F
(s) 239.02 691.5 T
2 12 Q
(2) 245 685.4 T
2 14 Q
(0) 179.25 664 T
(.) 186.25 664 T
(8) 189.75 664 T
(1) 296.84 683 T
(.) 303.84 683 T
(0) 308.16 683 T
2 24 Q
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 679 667 a Fs(Figure)15 b(2:)22 b(A)16 b(small)e(POMDP)l(.)164
810 y Fq(1.4)70 b(Impleme)o(n)n(tation)164 902 y Fs(This)21
b(pap)q(er)g(describ)q(es)f(the)g(witness)g(algorithm)g(for)h(solving)f
(POMDP)h(problems.)164 962 y(Throughout)e(the)f(pap)q(er,)g(pseudo)q
(co)q(de)h(is)e(giv)o(en)g(for)h(all)f(critical)f(functions.)26
b(These)164 1023 y(fragmen)o(ts,)16 b(tak)o(en)h(together,)g(should)g
(b)q(e)h(su\016cien)o(t)e(to)h(allo)o(w)g(an)h(exp)q(erienced)d(pro-)
164 1083 y(grammer)f(to)j(implem)o(e)o(n)o(t)c(the)j(algorithm)g(in)f
(a)i(high-lev)o(el)e(language.)237 1143 y(The)i(only)h(di\016cult)d
(pro)q(cedure)j(that)g(is)f(left)f(unsp)q(eci\014ed)h(is)g
Ff(solveLP)p Fs(,)d(whic)o(h)j(is)164 1203 y(in)o(tended)e(to)h(tak)o
(e)f(a)h(set)f(of)h(v)m(ariables,)f(linear)g(constrain)o(ts)h(on)g
(those)g(v)m(ariables,)f(and)164 1263 y(an)j(ob)s(jectiv)o(e)d
(function,)j(and)g(return)f(bindings)g(for)h(the)f(v)m(ariables)h(that)
g(satisfy)f(the)164 1324 y(constrain)o(ts)j(and)g(maximize)c(the)k(ob)s
(jectiv)o(e)e(function)h(\(that)i(is,)f(it)f(solv)o(es)g(a)i(linear)164
1384 y(program\).)g(Man)o(y)16 b(soft)o(w)o(are)g(pac)o(k)m(ages)h(are)
f(a)o(v)m(ailable)g(for)g(this.)237 1444 y(The)11 b(argumen)o(t)f
Fn(M)p Fs(,)h(passed)h(to)f(sev)o(eral)e(of)j(the)e(routines,)i
(represen)o(ts)e(the)g(POMDP)164 1504 y(mo)q(del)17 b(w)o(e)h(are)g
(trying)g(to)g(solv)o(e.)27 b(The)18 b(mo)q(del)f(consists)h(of)h(the)f
(sets)g(and)h(functions)164 1564 y(describ)q(ed)11 b(earlier)g(in)h
(this)g(section.)19 b(So)12 b(if)g Fn(M)g Fs(is)f(in)h(the)g(argumen)o
(t)f(list)g(for)h(a)h(function,)164 1625 y Fn(S)t Fs(,)j
Fn(A)p Fs(,)f Fm(T)7 b Fs(,)15 b Fm(R)p Fs(,)i Fn(O)q
Fs(,)f(and)g Fm(O)i Fs(are)f(all)e(a)o(v)m(ailable)h(in)g(the)g
(function)g(b)q(o)q(dy)l(.)164 1791 y Ft(2)83 b(Belief)27
b(states)164 1900 y Fs(In)13 b(some)g(circumstances,)f(the)i(agen)o(t)g
(will)e(b)q(e)i(able)g(to)g(iden)o(tify)e(its)h(curren)o(t)g(state)h
(un-)164 1961 y(am)o(biguously)l(.)20 b(Ho)o(w)o(ev)o(er,)12
b(other)j(times,)e(the)i(b)q(est)g(it)g(can)g(do)g(giv)o(en)f(the)h
(information)164 2021 y(it)h(has)h(is)f(to)g(compute)f(a)i(probabilit)o
(y)e(distribution)h(o)o(v)o(er)f(states.)237 2081 y(As)j(an)g(example,)
e(Figure)i(2)g(sho)o(ws)h(a)f(small)f(POMDP)h(with)g(2)g(states,)h(2)f
(obser-)164 2141 y(v)m(ations,)e(and)h(1)f(action.)21
b(If)15 b(the)h(agen)o(t)g(kno)o(ws)g(it)g(is)f(in)h
Fm(s)1230 2148 y Fj(1)1266 2141 y Fs(at)g(time)e Fm(t)h
Fs(and)i(then)e(tak)o(es)164 2201 y(an)21 b(action)f(and)h(observ)o(es)
f Fm(o)705 2208 y Fj(2)725 2201 y Fs(,)h(it)f(can)g(b)q(e)h(certain)f
(that)g(it)g(is)g(has)h(remained)e(in)h Fm(s)1750 2208
y Fj(1)1769 2201 y Fs(.)164 2262 y(Ho)o(w)o(ev)o(er,)14
b(if)i(it)f(observ)o(es)h Fm(o)683 2269 y Fj(1)704 2262
y Fs(,)f(it)h(is)g(p)q(ossible)h(that)f(it)g(is)g(in)g(either)f
Fm(s)1436 2269 y Fj(1)1472 2262 y Fs(or)i Fm(s)1555 2269
y Fj(2)1574 2262 y Fs(.)237 2322 y(T)l(able)12 b(1)f(summarizes)e(all)i
(4)h(p)q(ossible)g(outcomes.)19 b(These)11 b(outcomes)g(are)g(m)o
(utually)164 2382 y(exclusiv)o(e)j(and)j(as)g(suc)o(h)f(their)f
(probabilities)g(add)i(to)g(one.)237 2442 y(The)11 b(probabilit)o(y)f
(that)h(the)g(agen)o(t)g(is)f(in)h Fm(s)999 2449 y Fj(2)1029
2442 y Fs(giv)o(en)f(that)i(it)e(observ)o(ed)g Fm(o)1513
2449 y Fj(1)1544 2442 y Fs(is)h(0)p Fm(:)p Fs(80)p Fm(=)p
Fs(\(0)p Fm(:)p Fs(02+)961 2607 y(4)p eop
%%Page: 5 5
5 4 bop 450 308 a Fs(resulting)15 b(state)p 778 326 2
61 v 51 w(observ)m(ation)p 1070 326 V 50 w(probabilit)o(y)g(of)i(ev)o
(en)o(t)p 425 328 1114 2 v 580 370 a Fm(s)603 377 y Fj(1)p
778 388 2 61 v 903 370 a Fm(o)926 377 y Fj(1)p 1070 388
V 1136 370 a Fs(0)p Fm(:)p Fs(2)11 b Fn(\002)g Fs(0)p
Fm(:)p Fs(1)j(=)g(0)p Fm(:)p Fs(02)580 430 y Fm(s)603
437 y Fj(1)p 778 448 V 903 430 a Fm(o)926 437 y Fj(2)p
1070 448 V 1136 430 a Fs(0)p Fm(:)p Fs(2)d Fn(\002)g
Fs(0)p Fm(:)p Fs(9)j(=)g(0)p Fm(:)p Fs(18)580 490 y Fm(s)603
497 y Fj(2)p 778 508 V 903 490 a Fm(o)926 497 y Fj(1)p
1070 508 V 1136 490 a Fs(0)p Fm(:)p Fs(8)d Fn(\002)g
Fs(1)p Fm(:)p Fs(0)j(=)g(0)p Fm(:)p Fs(80)580 550 y Fm(s)603
557 y Fj(2)p 778 568 V 903 550 a Fm(o)926 557 y Fj(2)p
1070 568 V 1136 550 a Fs(0)p Fm(:)p Fs(8)d Fn(\002)g
Fs(0)p Fm(:)p Fs(0)j(=)g(0)p Fm(:)p Fs(00)581 649 y(T)l(able)j(1:)k
(Probabilit)o(y)16 b(of)g(all)g(outcomes.)164 791 y(0)p
Fm(:)p Fs(80\))21 b Fn(\031)g Fs(0)p Fm(:)p Fs(976.)34
b(Therefore,)20 b(some)f(of)i(the)f(times)e(when)i(this)h(sequence)e
(of)h(ev)o(en)o(ts)164 851 y(happ)q(ens,)14 b(the)f(agen)o(t)g(is)g(in)
g Fm(s)698 858 y Fj(1)718 851 y Fs(.)20 b(Cho)q(osing)15
b(an)e(action)g(that)h(is)f(dangerous)h(if)f(the)g(agen)o(t)164
911 y(is)j(in)g Fm(s)293 918 y Fj(1)329 911 y Fs(migh)o(t)e(not)j(b)q
(e)g(a)f(go)q(o)q(d)i(idea)e(in)g(this)g(situation.)164
1056 y Fq(2.1)70 b(Deriv)l(ation)21 b(of)j(the)e(b)r(elief)e(state)j
(up)r(date)g(equation)164 1148 y Fs(The)15 b(analysis)g(from)f(the)h
(previous)g(section)f(suggests)j(a)e(p)q(ossible)g(represen)o(tation)g
(for)164 1208 y(the)g(agen)o(t)g(to)h(use)f(while)f(acting)i(in)f(the)f
(w)o(orld.)21 b(The)15 b(agen)o(t)h(can)f(k)o(eep)f(a)i(probabilit)o(y)
164 1269 y(distribution)c(o)o(v)o(er)g Fn(S)k Fs(as)e(a)f(represen)o
(tation)f(of)g(where)h(it)f(is)g(at)h(an)o(y)g(giv)o(en)e(time.)18
b(Then,)164 1329 y(this)e Fr(b)n(elief)j(state)d Fs(can)h(b)q(e)f
(consulted)g(eac)o(h)g(time)e(an)j(action)f(is)g(c)o(hosen.)237
1389 y(This)k(section)f(dev)o(elops)f(a)i(general)f(metho)q(d)g(for)h
(k)o(eeping)e(the)h(b)q(elief)g(state)g(up-)164 1449
y(dated.)i(The)16 b(next)g(section)g(argues)h(that)f(the)g(b)q(elief)f
(state)h(is)g(su\016cien)o(t)f(information)164 1509 y(for)22
b(the)g(agen)o(t)h(to)f(c)o(ho)q(ose)h(its)f(actions)g(optimally)l(.)37
b(Because)21 b(of)i(these)f(facts,)h(the)164 1570 y(b)q(elief)17
b(state)h(will)f(b)q(ecome)f(a)j(cen)o(tral)e(part)h(of)g(the)g
(represen)o(tation)f(used)h(in)g(solving)164 1630 y(POMDP's.)237
1690 y(A)g(b)q(elief)e(state,)j Fm(b)d Fn(2)h Fs(\005\()p
Fn(S)t Fs(\),)g(is)h(a)g(represen)o(tation)g(of)g(the)g(agen)o(t's)g
(curren)o(t)f(state)164 1750 y(giv)o(en)e(its)h(past)g(history)g(of)g
(actions)g(and)h(observ)m(ations.)22 b(W)l(e)16 b(need)f(a)h(w)o(a)o(y)
g(to)g(up)q(date)164 1810 y(the)j(b)q(elief)e(state)j(as)f(new)g
(information)f(arises.)30 b(Notationally)l(,)18 b Fm(b)p
Fs([)p Fm(s)p Fs(])g(represen)o(ts)g(the)164 1871 y(probabilit)o(y)k
(that)h(the)g(agen)o(t's)g(curren)o(t)f(state)h(is)f
Fm(s)j Fn(2)h(S)t Fs(.)40 b(By)23 b(the)f(de\014nition)h(of)164
1931 y(probabilit)o(y)15 b(distributions,)h Fm(b)p Fs([)p
Fm(s)p Fs(])d Fn(\025)g Fs(0)k(for)f(all)g Fm(s)e Fn(2)g(S)t
Fs(,)i(and)1274 1898 y Fi(P)1318 1941 y Fk(s)1345 1931
y Fm(b)p Fs([)p Fm(s)p Fs(])d(=)g(1.)237 1991 y(Ho)o(w)22
b(migh)o(t)f(w)o(e)h(compute)f(the)h(b)q(elief)f(state)h(that)h
(results)f(from)g(a)g(particular)164 2051 y(state,)14
b(action,)f(observ)m(ation)h(triplet?)20 b(Let's)13 b(return,)g(for)g
(a)h(momen)o(t,)d(to)i(the)g(example)164 2111 y(in)i(Figure)g(2.)22
b(If)15 b(w)o(e)g(b)q(egin)g(in)h(state)f Fm(s)880 2118
y Fj(1)900 2111 y Fs(,)g(w)o(e)g(mo)o(v)o(e)f(to)i(state)f
Fm(s)1326 2118 y Fj(2)1362 2111 y Fs(with)g(probabilit)o(y)g(0.8)164
2171 y(and)20 b(remain)d(in)i(state)g Fm(s)632 2178 y
Fj(1)671 2171 y Fs(with)g(probabilit)o(y)f(0.2.)31 b(No)o(w)19
b(imagine)e(that)j(w)o(e)e(observ)o(e)164 2232 y Fm(o)187
2239 y Fj(1)207 2232 y Fs(.)29 b(It)18 b(is)h(m)o(uc)o(h)d(more)i(lik)o
(ely)e(that)j(w)o(e'd)f(observ)o(e)g Fm(o)1167 2239 y
Fj(1)1206 2232 y Fs(if)g(w)o(e)h(w)o(ere)f(in)g(state)h
Fm(s)1647 2239 y Fj(2)1685 2232 y Fs(than)164 2292 y(if)h(w)o(e)g(w)o
(ere)f(in)h(state)h Fm(s)613 2299 y Fj(1)632 2292 y Fs(.)34
b(W)l(e)20 b(can)g(w)o(eigh)o(t)g(the)g(o)q(ccupation)h(probabilities)e
(b)o(y)h(the)164 2352 y(corresp)q(onding)g(observ)m(ation)g
(probabilities.)28 b(That)20 b(giv)o(es)e(us)h(a)h(w)o(eigh)o(t)e(of)h
(0)p Fm(:)p Fs(02)h(for)164 2412 y Fm(s)187 2419 y Fj(1)222
2412 y Fs(and)15 b(0)p Fm(:)p Fs(8)h(for)f Fm(s)489 2419
y Fj(2)509 2412 y Fs(.)20 b(W)l(e)15 b(can)g(then)g(normalize)e(these)i
(v)m(alues)g(so)h(that)f(they)g(sum)f(to)h(1.)237 2472
y(Although)h(this)g(seems)f(lik)o(e)f(a)j(slopp)o(y)e(w)o(a)o(y)h(to)h
(use)f(the)g(v)m(arious)g(probabilities)g(to)961 2607
y(5)p eop
%%Page: 6 6
6 5 bop 164 315 a Fs(up)q(date)18 b(our)h(state,)f(w)o(e)f(can)h(use)g
(elemen)o(tary)d(probabilit)o(y)i(theory)g(to)i(sho)o(w)f(that)g(it)164
376 y(do)q(es)h(indeed)f(lead)g(to)h(the)f(prop)q(er)h(form)o(ula.)27
b(W)l(e)18 b(w)o(an)o(t)g(to)h(kno)o(w)g(the)f(b)q(elief)f(state,)164
436 y Fm(b)185 418 y Fl(0)196 436 y Fs(,)k(that)g(results)f(from)f
(starting)h(in)g(b)q(elief)f(state)i Fm(b)p Fs(,)f(taking)g(action)h
Fm(a)e Fs(and)i(making)164 496 y(observ)m(ation)c Fm(o)p
Fs(.)22 b(Comp)q(onen)o(t)16 b Fm(s)768 478 y Fl(0)795
496 y Fs(of)h(the)f(b)q(elief)f(state)i(can)f(b)q(e)g(written:)321
606 y Fm(b)342 585 y Fl(0)354 606 y Fs([)p Fm(s)391 585
y Fl(0)402 606 y Fs(])41 b(=)g(Pr\()p Fm(s)630 585 y
Fl(0)642 606 y Fn(j)p Fm(o;)8 b(a;)g(b)p Fs(\))457 679
y(=)41 b(\(Pr\()p Fm(o)p Fn(j)p Fm(s)686 658 y Fl(0)698
679 y Fm(;)8 b(a;)g(b)p Fs(\))g(Pr\()p Fm(s)910 658 y
Fl(0)921 679 y Fn(j)p Fm(a;)g(b)p Fs(\)\))g Fm(=)g Fs(Pr\()p
Fm(o)p Fn(j)p Fm(a;)g(b)p Fs(\))457 782 y(=)536 709 y
Fi( )569 782 y Fs(Pr\()p Fm(o)p Fn(j)p Fm(s)700 762 y
Fl(0)712 782 y Fm(;)g(a;)g(b)p Fs(\))831 741 y Fi(X)829
833 y Fk(s)p Fl(2S)901 782 y Fs(Pr\()p Fm(s)995 762 y
Fl(0)1007 782 y Fn(j)p Fm(a;)g(b;)g(s)p Fs(\))g(Pr)o(\()p
Fm(s)p Fn(j)p Fm(a;)g(b)p Fs(\))1357 709 y Fi(!)1397
782 y Fm(=)g Fs(Pr)q(\()p Fm(o)p Fn(j)p Fm(a;)g(b)p Fs(\))457
930 y(=)536 857 y Fi( )569 930 y Fs(Pr\()p Fm(o)p Fn(j)p
Fm(s)700 910 y Fl(0)712 930 y Fm(;)g(a)p Fs(\))789 889
y Fi(X)787 981 y Fk(s)p Fl(2S)859 930 y Fs(Pr\()p Fm(s)953
910 y Fl(0)964 930 y Fn(j)p Fm(a;)g(s)p Fs(\))g(Pr\()p
Fm(s)p Fn(j)p Fm(b)p Fs(\))1224 857 y Fi(!)1265 930 y
Fm(=)g Fs(Pr)q(\()p Fm(o)p Fn(j)p Fm(a;)g(b)p Fs(\))457
1078 y(=)536 1005 y Fi( )569 1078 y Fm(O)q Fs([)p Fm(s)644
1058 y Fl(0)656 1078 y Fm(;)g(a;)g(o)p Fs(])772 1037
y Fi(X)770 1129 y Fk(s)p Fl(2S)842 1078 y Fm(T)f Fs([)p
Fm(s;)h(a;)g(s)1008 1058 y Fl(0)1018 1078 y Fs(])p Fm(b)p
Fs([)p Fm(s)p Fs(])1104 1005 y Fi(!)1144 1078 y Fm(=)g
Fs(Pr)q(\()p Fm(o)p Fn(j)p Fm(a;)g(b)p Fs(\))p Fm(:)334
b Fs(\(1\))237 1224 y(The)15 b(denominator)f(normalizes)g(the)g
(resulting)h(b)q(elief)f(state)h(to)g(add)h(to)f(1.)21
b(It)15 b(can)164 1284 y(b)q(e)h(computed)f(as)i(follo)o(ws:)401
1394 y(Pr\()p Fm(o)p Fn(j)p Fm(a;)8 b(b)p Fs(\))41 b(=)725
1352 y Fi(X)718 1445 y Fk(s)734 1435 y Fe(0)745 1445
y Fl(2S)801 1394 y Fs(Pr\()p Fm(o;)8 b(s)940 1373 y Fl(0)952
1394 y Fn(j)p Fm(a;)g(b)p Fs(\))638 1513 y(=)725 1472
y Fi(X)718 1564 y Fk(s)734 1555 y Fe(0)745 1564 y Fl(2S)801
1513 y Fs(Pr\()p Fm(s)895 1493 y Fl(0)907 1513 y Fn(j)p
Fm(a;)g(b)p Fs(\))g(Pr)o(\()p Fm(o)p Fn(j)p Fm(s)1147
1493 y Fl(0)1159 1513 y Fm(;)g(a;)g(b)p Fs(\))638 1633
y(=)725 1591 y Fi(X)718 1684 y Fk(s)734 1674 y Fe(0)745
1684 y Fl(2S)803 1591 y Fi(X)801 1683 y Fk(s)p Fl(2S)873
1633 y Fs(Pr\()p Fm(s)967 1612 y Fl(0)979 1633 y Fm(;)g(s)p
Fn(j)p Fm(a;)g(b)p Fs(\))g(Pr)o(\()p Fm(o)p Fn(j)p Fm(s)1264
1612 y Fl(0)1276 1633 y Fm(;)g(a)p Fs(\))638 1752 y(=)725
1711 y Fi(X)718 1803 y Fk(s)734 1794 y Fe(0)745 1803
y Fl(2S)803 1711 y Fi(X)801 1803 y Fk(s)p Fl(2S)873 1752
y Fs(Pr\()p Fm(s)p Fn(j)p Fm(a;)g(b)p Fs(\))g(Pr)o(\()p
Fm(s)1170 1732 y Fl(0)1182 1752 y Fn(j)p Fm(s;)g(a;)g(b)p
Fs(\))g(Pr)o(\()p Fm(o)p Fn(j)p Fm(s)1467 1732 y Fl(0)1479
1752 y Fm(;)g(a)p Fs(\))638 1872 y(=)725 1830 y Fi(X)718
1923 y Fk(s)734 1913 y Fe(0)745 1923 y Fl(2S)801 1872
y Fm(O)q Fs([)p Fm(s)876 1851 y Fl(0)888 1872 y Fm(;)g(a;)g(o)p
Fs(])1004 1830 y Fi(X)1002 1922 y Fk(s)p Fl(2S)1074 1872
y Fm(T)f Fs([)p Fm(s;)h(a;)g(s)1240 1851 y Fl(0)1250
1872 y Fs(])p Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(:)371 b
Fs(\(2\))237 2017 y(Th)o(us,)19 b(eac)o(h)g(comp)q(onen)o(t)e(of)j(the)
e(resulting)g(b)q(elief)g(state)h(is)g(deriv)o(ed)e(exactly)g(as)164
2078 y(describ)q(ed)g(ab)q(o)o(v)o(e:)25 b(w)o(e)18 b(pro)s(ject)f(the)
h(curren)o(t)f(b)q(elief)g(state)i(forw)o(ard)f(one)g(step)h(using)164
2138 y(the)c(transition)g(matrix,)e Fm(T)7 b Fs(;)14
b(w)o(e)h(w)o(eigh)o(t)f(the)h(resulting)f(states)h(b)o(y)g(the)g
(probabilit)o(y)f(of)164 2198 y(making)k(the)h(asso)q(ciated)h(observ)m
(ation;)h(and)e(then)g(w)o(e)g(normalize)e(so)j(the)e(resulting)164
2258 y(distribution)e(adds)h(to)f(1.)237 2318 y(This)c(sho)o(ws)h(that)
f(through)g(relativ)o(ely)e(simple)f(manipulation)i(of)h(the)f(observ)m
(ation)164 2379 y(and)21 b(transition)f(probabilities,)g(new)g
(information)f(can)h(b)q(e)h(incorp)q(orated)f(in)o(to)g(the)164
2439 y(b)q(elief)15 b(state)i(as)f(the)g(agen)o(t)h(mo)o(v)o(es)d(ab)q
(out.)961 2607 y(6)p eop
%%Page: 7 7
7 6 bop 164 315 a Fq(2.2)70 b(Su\016ciency)21 b(of)j(b)r(elief)c
(states)164 408 y Fs(F)l(or)c(the)g(agen)o(t)h(to)f(k)o(eep)f(its)h(b)q
(elief)f(state)i(up)f(to)h(date,)f(it)f(m)o(ust)g(start)i(with)f(a)h
(kno)o(wn)164 468 y(b)q(elief)h(state.)30 b(That)20 b(is,)f(it)f(m)o
(ust)g(ha)o(v)o(e)g(some)g(initial)g(probabilit)o(y)g(distribution,)h
Fm(b)1750 475 y Fj(0)1769 468 y Fs(.)164 528 y(One)d(in)o(terpretation)
f(of)i(a)f(comp)q(onen)o(t)f(of)i(the)f(b)q(elief)f(state)h(at)h(time)d
Fm(t)p Fs(,)h Fm(b)1550 535 y Fk(t)1565 528 y Fs([)p
Fm(s)p Fs(],)f(is)i(that)164 588 y(if)i(the)g(agen)o(t)g(w)o(ere)f(to)i
(rerun)f(a)h(million)c(times)i(for)h Fm(t)g Fs(steps)g(starting)h(from)
e Fm(b)1636 595 y Fj(0)1656 588 y Fs(,)h(then)164 649
y(ab)q(out)g(1)p Fm(;)8 b Fs(000)p Fm(;)g Fs(000)16 b
Fm(b)553 656 y Fk(t)567 649 y Fs([)p Fm(s)p Fs(])g(times)e(it)i(w)o
(ould)g(end)g(up)h(in)f(state)g Fm(s)p Fs(.)237 709 y(Since)i
Fm(b)388 716 y Fk(t)421 709 y Fs(summarize)o(s)e(all)i(the)g
(information)f(that)i(could)f(b)q(e)h(kno)o(wn)f(ab)q(out)i(the)164
769 y(agen)o(t's)14 b(state,)h(its)f(c)o(hoice)f(of)i(action)f(at)h
(time)e Fm(t)h Fs(can)g(b)q(e)h(made)e(solely)h(on)g(the)h(basis)g(of)
164 829 y Fm(b)185 836 y Fk(t)200 829 y Fs(.)21 b(That)c(is,)f(kno)o
(wing)h(its)f(b)q(elief)f(state)i(is)f(su\016cien)o(t)f(information)g
(for)i(the)f(agen)o(t)h(to)164 889 y(b)q(eha)o(v)o(e)f(optimally)l(.)j
(More)d(formal)g(argumen)o(ts)f(to)i(this)f(e\013ect)g(ha)o(v)o(e)g(b)q
(een)g(put)h(forth)164 950 y(elsewhere)384 946 y([)397
950 y(Astrom,)h(1965)685 946 y(])700 950 y(.)29 b(The)19
b(mac)o(hinery)d(needed)i(to)h(deriv)o(e)e(this)i(formally)e(is)164
1010 y(b)q(ey)o(ond)f(the)g(scop)q(e)h(of)g(this)f(pap)q(er.)237
1070 y(The)23 b(imp)q(ortance)f(of)i(this)f(result)g(to)h(the)f(curren)
o(t)f(w)o(ork)h(is)g(that)h(the)f(agen)o(t's)164 1130
y(b)q(eha)o(vior)d(will)f(b)q(e)h(sp)q(eci\014ed)g(as)h(a)f(mapping)f
(from)h(its)f(curren)o(t)h(b)q(elief)f(state)h(to)g(an)164
1190 y(optimal)15 b(c)o(hoice)g(of)h(action.)164 1354
y Ft(3)83 b(V)-7 b(alue)27 b(functions)g(for)h(POMDP)h(problems)164
1463 y Fs(The)24 b Fr(value)i Fs(of)e(a)h(b)q(elief)e(state,)j
Fm(b)p Fs(,)f(is)f(the)g(exp)q(ected)f(amoun)o(t)h(of)g(rew)o(ard)g
(that)h(is)164 1523 y(garnered)16 b(b)o(y)g(the)g(optimal)f(p)q(olicy)h
(if)f(the)h(agen)o(t)h(is)f(started)g(o\013)i(in)d(b)q(elief)g(state)i
Fm(b)p Fs(:)757 1639 y Fm(V)796 1618 y Fl(\003)816 1639
y Fs(\()p Fm(b)p Fs(\))c(=)h Fm(E)s Fn(f)1016 1585 y
Fl(1)1004 1597 y Fi(X)1005 1688 y Fk(t)p Fj(=0)1072 1639
y Fm(\015)1100 1618 y Fk(t)1115 1639 y Fm(r)1137 1646
y Fk(t)1152 1639 y Fn(g)p Fm(:)164 1760 y Fs(Here,)20
b Fm(r)320 1767 y Fk(t)356 1760 y Fs(represen)o(ts)f(the)i(rew)o(ard)f
(receiv)o(ed)f(at)i(time)d Fm(t)i Fs(while)g(follo)o(wing)g(the)h
(opti-)164 1821 y(mal)e(p)q(olicy)l(.)32 b(The)21 b(function)f
Fm(V)772 1802 y Fl(\003)812 1821 y Fs(is)g(called)f(the)h
Fr(optimal)h(value)i(function)e Fs(and)g(it)f(is)164
1881 y(unique)322 1877 y([)336 1881 y(Bertsek)m(as,)c(1987)664
1877 y(])679 1881 y(.)237 1941 y(The)21 b(optimal)f Fr(p)n(olicy)p
Fs(,)i Fm(\031)713 1923 y Fl(\003)755 1941 y Fs(:)g(\005\()p
Fn(S)t Fs(\))g Fn(!)g(A)p Fs(,)g(maps)f(b)q(elief)f(states)i(to)g
(actions.)36 b(It)164 2001 y(is)20 b(stationary)452 1997
y([)466 2001 y(Bertsek)m(as,)g(1987)798 1997 y(])813
2001 y(,)h(meaning)d(that)j(the)e(optimal)g(action)h(c)o(hoice)f(for)
164 2061 y(b)q(elief)f(state)i Fm(b)f Fs(is)g(constan)o(t)h(o)o(v)o(er)
f(time.)28 b(This)20 b(leads)f(to)h(the)f(follo)o(wing)g(con)o(v)o
(enien)o(t)164 2121 y(represen)o(tation)13 b(of)h(the)f(optimal)f(v)m
(alue)h(function)g(\(for)h(a)g(formal)e(deriv)m(ation,)i(see)1697
2117 y([)1710 2121 y Fd(?)1736 2117 y Fs(])1750 2121
y(\):)407 2242 y Fm(V)446 2222 y Fl(\003)466 2242 y Fs(\()p
Fm(b)p Fs(\))g(=)f(max)626 2267 y Fk(a)706 2169 y Fi(")730
2201 y(X)752 2288 y Fk(s)798 2242 y Fm(b)p Fs([)p Fm(s)p
Fs(])p Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])h(+)i Fm(\015)1101
2201 y Fi(X)1122 2288 y Fk(o)1169 2242 y Fs(Pr\()p Fm(o)p
Fn(j)p Fm(b;)d(a)p Fs(\))p Fm(V)1404 2222 y Fl(\003)1423
2242 y Fs(\()p Fm(b)1463 2222 y Fl(0)1475 2242 y Fs(\))1494
2169 y Fi(#)1526 2242 y Fm(:)181 b Fs(\(3\))164 2362
y(The)15 b(v)m(ariable)g Fm(b)466 2344 y Fl(0)492 2362
y Fs(denotes)g(the)g(b)q(elief)f(state)h(that)h(results)e(from)g
(taking)i(action)f Fm(a)f Fs(and)164 2422 y(observing)22
b Fm(o)g Fs(from)f(b)q(elief)g(state)h Fm(b)p Fs(.)38
b(It)22 b(can)g(b)q(e)g(computed)e(from)h Fm(b)p Fs(,)i
Fm(a)p Fs(,)g(and)f Fm(o)g Fs(b)o(y)164 2482 y(Equation)17
b(1.)961 2607 y(7)p eop
%%Page: 8 8
8 7 bop 237 315 a Fs(Equation)22 b(3)g(deserv)o(es)e(further)h
(explanation.)36 b(The)22 b(expression)1507 282 y Fi(P)1550
326 y Fk(s)1577 315 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p
Fs([)p Fm(s;)8 b(a)p Fs(])164 376 y(represen)o(ts)18
b(the)g(exp)q(ected)f(rew)o(ard)i(the)f(agen)o(t)g(receiv)o(es)f(imm)o
(ediatel)o(y)e(after)k(taking)164 436 y(action)f Fm(a)g
Fs(from)g(b)q(elief)f(state)h Fm(b)p Fs(.)28 b(One)18
b(in)o(terpretation)f(of)i(this)f(is)g(that,)h(if)f(the)g(agen)o(t)164
496 y(b)q(eliev)o(es)11 b(it)h(is)h(in)f(states)i(that)f(ha)o(v)o(e)f
(high)h(pa)o(y)o(o\013,)g(it)f(will)g(get)h(high)g(pa)o(y)o(o\013.)20
b(It)13 b(app)q(ears)164 556 y(the)18 b(agen)o(t)h(is)g(b)q(eing)g(rew)
o(arded)f(for)h(simply)d Fr(b)n(elieving)21 b Fs(it)e(is)f(in)g(a)h(go)
q(o)q(d)i(state.)29 b(This)164 616 y(confusion)20 b(stems)e(from)g(the)
h(use)g(of)g(the)g(w)o(ord)h(\\b)q(elief.")29 b(Because)19
b(the)g(b)q(eliefs)f(are)164 677 y(up)q(dated)i(according)f(to)g
(Equation)g(1,)h(the)f(agen)o(t's)f(b)q(elief)g(state)h(can)g(nev)o(er)
f(b)q(e)h(the)164 737 y(result)d(of)g(a)h(priv)m(ate)f(fan)o(tasy)l(.)
237 797 y(The)j(correct)g(in)o(terpretation)f(is)i(that)f(since)g
Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])18 b(is)h(the)g(immediate)d(rew)o(ard)
164 857 y(receiv)o(ed)d(b)o(y)i(an)h(agen)o(t)g(in)f(state)h
Fm(s)f Fs(for)h(taking)f(action)h Fm(a)f Fs(and)h Fm(b)p
Fs([)p Fm(s)p Fs(])e(is)i(the)f(probabilit)o(y)164 917
y(that)e(the)g(agen)o(t)f(is)h(in)f(state)h Fm(s)p Fs(,)739
884 y Fi(P)783 928 y Fk(s)810 917 y Fm(b)p Fs([)p Fm(s)p
Fs(])p Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])i(is)j(just)g(the)f(probabilit)
o(y-w)o(eigh)o(ted)f(sum)164 978 y(of)17 b(imm)o(ediate)c(rew)o(ards.)
237 1038 y(The)26 b(expression)592 1005 y Fi(P)636 1048
y Fk(o)663 1038 y Fs(Pr\()p Fm(o)p Fn(j)p Fm(b;)8 b(a)p
Fs(\))p Fm(V)898 1020 y Fl(\003)917 1038 y Fs(\()p Fm(b)957
1020 y Fl(0)969 1038 y Fs(\))26 b(represen)o(ts)f(the)h(probabilit)o
(y-w)o(eigh)o(ted)164 1098 y(a)o(v)o(erage)19 b(v)m(alue)h(of)g(the)g
(resulting)g(b)q(elief)e(state.)33 b(That)21 b(is,)f(it)f(a)o(v)o
(erages)h(the)g(rew)o(ard)164 1158 y(that)e(will)e(b)q(e)i(earned)f(b)o
(y)g(the)g(optimal)f(p)q(olicy)h(starting)h(from)f(eac)o(h)g
Fm(b)1501 1140 y Fl(0)1529 1158 y Fs(and)h(w)o(eigh)o(ts)164
1218 y(it)i(b)o(y)f(ho)o(w)h(lik)o(ely)e Fm(b)547 1200
y Fl(0)578 1218 y Fs(is.)33 b(This)20 b(is)g(all)f(m)o(ultiplied)e(b)o
(y)i Fm(\015)k Fs(since)d(this)g(rew)o(ard)g(can)g(b)q(e)164
1279 y(gathered)c(starting)h(on)g(the)f(next)g(step.)237
1339 y(Finally)l(,)21 b(the)h(max)599 1346 y Fk(a)642
1339 y Fs(in)f(Equation)h(3)g(means)f(that)h(the)f(agen)o(t)h(will)e(c)
o(ho)q(ose)i(the)164 1399 y(action,)d(at)g(eac)o(h)g(b)q(elief)f
(state,)h(that)g(will)f(maximiz)o(e)e(its)j(total)g(rew)o(ard.)29
b(Note)18 b(that)164 1459 y(the)e(same)f(expression)h(can)h(b)q(e)f
(used)g(to)h(sp)q(ecify)e(the)h(optimal)f(p)q(olicy)l(.)164
1601 y Fq(3.1)70 b(Bounding)23 b(a)g(step)g(of)g(v)l(alue)g(iteration)
164 1693 y Fs(The)15 b(metho)q(d)e(of)i Fr(value)i(iter)n(ation)811
1689 y Fs([)825 1693 y(Bellman,)12 b(1957)1125 1689 y(])1154
1693 y(is)j(a)g(w)o(a)o(y)f(of)h(appro)o(ximating)e(the)164
1754 y(optimal)h(v)m(alue)h(function,)g Fm(V)710 1735
y Fl(\003)730 1754 y Fs(.)21 b(The)16 b(next)e(few)i(sections)f
(de\014ne)g(v)m(alue)g(iteration)g(and)164 1814 y(sho)o(w)i(ho)o(w)f
(it)g(can)h(b)q(e)f(used)g(to)h(pro)q(duce)g(arbitrarily)e(go)q(o)q(d)j
(p)q(olicies.)237 1874 y(The)13 b(idea)g(b)q(ehind)f(v)m(alue)h
(iteration)f(is)h(that)g(b)o(y)f(iterativ)o(ely)f(computing)g(impro)o
(v)o(ed)164 1934 y(estimates)k(of)h(the)h(optimal)e(v)m(alue)h
(function,)f(w)o(e)h(can)h(get)f(an)h(arbitrarily)f(go)q(o)q(d)i(esti-)
164 1994 y(mate.)h(A)c(single)f(step)h(of)g(the)g(pro)q(cess)g(starts)h
(with)f(an)g(estimate,)e Fm(V)e Fs(,)k(of)g(the)f(optimal)164
2055 y(v)m(alue)21 b(function,)g(and)h(pro)q(duces)f(a)g(b)q(etter)g
(estimate,)f Fm(V)1263 2036 y Fl(0)1296 2055 y Fs(where)g
Fm(V)1480 2036 y Fl(0)1513 2055 y Fs(is)h(de\014ned)f(as)164
2115 y(follo)o(ws:)422 2194 y Fm(V)462 2173 y Fl(0)473
2194 y Fs(\()p Fm(b)p Fs(\))14 b(:=)f(max)647 2218 y
Fk(a)710 2121 y Fi(")734 2152 y(X)756 2239 y Fk(s)803
2194 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)8
b(a)p Fs(])h(+)i Fm(\015)1105 2152 y Fi(X)1126 2239 y
Fk(o)1173 2194 y Fs(Pr\()p Fm(o)p Fn(j)p Fm(b;)d(a)p
Fs(\))p Fm(V)j Fs(\()p Fm(b)1448 2173 y Fl(0)1459 2194
y Fs(\))1478 2121 y Fi(#)1511 2194 y Fm(:)196 b Fs(\(4\))164
2302 y(This)16 b(basically)g(treats)g(the)g(equalit)o(y)f(in)h
(Equation)g(3)h(as)g(an)g(assignmen)o(t)e(op)q(erator.)237
2362 y(A)o(t)h(this)g(p)q(oin)o(t)g(in)g(the)g(discussion,)g(it)g(is)g
(not)h(apparen)o(t)f(that)h Fm(V)1447 2344 y Fl(0)1475
2362 y Fs(can)g(b)q(e)f(de\014ned)164 2422 y(this)24
b(w)o(a)o(y)l(,)h(b)q(ecause)g(this)f(expression)g(w)o(ould)g(ha)o(v)o
(e)f(to)i(b)q(e)f(ev)m(aluated)g(o)o(v)o(er)f(ev)o(ery)164
2482 y(b)q(elief)17 b(state,)g Fm(b)p Fs(.)26 b(F)l(or)18
b(no)o(w,)g(consider)f(these)h(as)g(abstract)h(mathematical)14
b(functions.)961 2607 y(8)p eop
%%Page: 9 9
9 8 bop 164 315 a Fs(Section)11 b(4)h(describ)q(es)f(a)g(represen)o
(tation)g(for)h Fm(V)22 b Fs(and)12 b Fm(V)1168 297 y
Fl(0)1191 315 y Fs(that)g(is)f(suitable)g(for)g(computer)164
376 y(manipulation.)237 436 y(T)l(o)18 b(sho)o(w)g(that)g(applying)g
(Equation)f(4)h(leads)g(to)g(an)g(impro)o(v)o(ed)c(appro)o(ximation,)
164 496 y(w)o(e)i(need)g(the)g(follo)o(wing)g(lemm)o(a)e(\(see)895
492 y([)908 496 y(Bertsek)m(as,)i(1987)1236 492 y(])1251
496 y(\).)164 595 y Fd(Lemma)g(1)24 b Fr(\(V)l(alue)17
b(Iter)n(ation)f(Step\):)23 b(Starting)17 b(with)f(an)h(appr)n(oximate)
e(value)j(func-)164 656 y(tion,)i Fm(V)11 b Fr(,)20 b(that)g(di\013ers)
e(by)i(at)f(most)g Fm(e)e Fn(\025)g Fs(0)j Fr(fr)n(om)e(the)i(optimal)f
(value)i(function,)g Fm(V)1748 638 y Fl(\003)1768 656
y Fr(,)164 716 y(at)g(every)f(b)n(elief)i(state,)g(the)f(function)h
Fm(V)939 698 y Fl(0)951 716 y Fr(,)f(r)n(eturne)n(d)f(by)h(a)f(step)h
(of)f(value)i(iter)n(ation,)164 776 y(di\013ers)17 b(fr)n(om)f
Fm(V)468 758 y Fl(\003)506 776 y Fr(by)h(at)h(most)f
Fm(\015)s(e)p Fr(.)237 876 y Fs(Pro)q(of:)k(The)12 b(fact)h(that)g
Fm(V)24 b Fs(di\013ers)12 b(from)g(the)g(optimal)f(v)m(alue)i(function)
f(b)o(y)g(no)h(more)164 936 y(than)k Fm(e)f Fs(at)g(an)o(y)g
Fm(b)g Fs(can)h(b)q(e)f(written:)651 1033 y Fm(V)690
1012 y Fl(\003)710 1033 y Fs(\()p Fm(b)p Fs(\))10 b Fn(\000)h
Fm(e)j Fn(\024)f Fm(V)e Fs(\()p Fm(b)p Fs(\))j Fn(\024)f
Fm(V)1122 1012 y Fl(\003)1141 1033 y Fs(\()p Fm(b)p Fs(\))e(+)g
Fm(e:)424 b Fs(\(5\))237 1130 y(Let)14 b Fm(a)348 1112
y Fl(0)373 1130 y Fs(b)q(e)g(an)o(y)g(action)g(c)o(hosen)g(in)f
(Equation)h(4)h(and)f(let)f Fm(a)1312 1112 y Fl(\003)1345
1130 y Fs(b)q(e)h(an)o(y)g(action)g(c)o(hosen)164 1190
y(in)i(Equation)h(3.)k(It)16 b(follo)o(ws)g(that:)459
1287 y Fm(V)499 1267 y Fl(0)510 1287 y Fs(\()p Fm(b)p
Fs(\))42 b(=)691 1246 y Fi(X)712 1333 y Fk(s)759 1287
y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)8 b(a)953
1267 y Fl(0)963 1287 y Fs(])i(+)i Fm(\015)1073 1246 y
Fi(X)1094 1333 y Fk(o)1141 1287 y Fs(Pr\()p Fm(o)p Fn(j)p
Fm(b;)c(a)1318 1267 y Fl(0)1329 1287 y Fs(\))p Fm(V)k
Fs(\()p Fm(b)1428 1267 y Fl(0)1439 1287 y Fs(\))610 1399
y Fn(\025)691 1358 y Fi(X)712 1445 y Fk(s)759 1399 y
Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)c(a)953
1379 y Fl(\003)971 1399 y Fs(])j(+)g Fm(\015)1081 1358
y Fi(X)1102 1445 y Fk(o)1149 1399 y Fs(Pr\()p Fm(o)p
Fn(j)p Fm(b;)d(a)1326 1379 y Fl(\003)1345 1399 y Fs(\))p
Fm(V)k Fs(\()p Fm(b)1444 1379 y Fl(0)1455 1399 y Fs(\))p
Fm(:)164 1527 y Fs(This)19 b(follo)o(ws)h(b)q(ecause)f
Fm(a)651 1509 y Fl(0)682 1527 y Fs(is)g(the)g(action)g(that)h(maximi)o
(zes)c(the)j(expression)g(so)h(an)o(y)164 1587 y(other)c(action)h(\()p
Fm(a)483 1569 y Fl(\003)502 1587 y Fs(,)f(sa)o(y\))g(leads)g(to)h(a)f
(v)m(alue)g(that)h(is)f(no)h(larger.)k(Th)o(us,)395 1684
y Fm(V)435 1664 y Fl(0)446 1684 y Fs(\()p Fm(b)p Fs(\))42
b Fn(\025)627 1643 y Fi(X)649 1730 y Fk(s)695 1684 y
Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)8 b(a)889
1664 y Fl(\003)907 1684 y Fs(])j(+)g Fm(\015)1017 1643
y Fi(X)1039 1730 y Fk(o)1085 1684 y Fs(Pr)q(\()p Fm(o)p
Fn(j)p Fm(b;)d(a)1263 1664 y Fl(\003)1282 1684 y Fs(\)\()p
Fm(V)1359 1664 y Fl(\003)1379 1684 y Fs(\()p Fm(b)1419
1664 y Fl(0)1430 1684 y Fs(\))j Fn(\000)g Fm(e)p Fs(\))547
1796 y Fn(\025)41 b Fm(V)666 1776 y Fl(\003)686 1796
y Fs(\()p Fm(b)p Fs(\))11 b Fn(\000)f Fm(\015)s(e)864
1755 y Fi(X)886 1842 y Fk(o)933 1796 y Fs(Pr\()p Fm(o)p
Fn(j)p Fm(b;)e(a)1110 1776 y Fl(\003)1129 1796 y Fs(\))547
1900 y Fn(\025)41 b Fm(V)666 1879 y Fl(\003)686 1900
y Fs(\()p Fm(b)p Fs(\))11 b Fn(\000)f Fm(\015)s(e;)851
b Fs(\(6\))164 1997 y(from)15 b(the)h(b)q(ound)i(in)d(Equation)i(5)g
(and)g(the)f(fact)g(that)g(the)g(probabilities)g(sum)f(to)i(1.)237
2057 y(Again,)f(using)h(the)f(b)q(ound)h(in)f(Equation)h(5)f(w)o(e)g
(ha)o(v)o(e:)259 2154 y Fm(V)298 2134 y Fl(0)310 2154
y Fs(\()p Fm(b)p Fs(\))41 b(=)490 2113 y Fi(X)512 2200
y Fk(s)559 2154 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p
Fs([)p Fm(s;)8 b(a)753 2134 y Fl(0)763 2154 y Fs(])i(+)h
Fm(\015)872 2113 y Fi(X)894 2200 y Fk(o)941 2154 y Fs(Pr\()p
Fm(o)p Fn(j)p Fm(b;)d(a)1118 2134 y Fl(0)1129 2154 y
Fs(\))p Fm(V)j Fs(\()p Fm(b)1227 2134 y Fl(0)1239 2154
y Fs(\))410 2266 y Fn(\024)490 2225 y Fi(X)512 2312 y
Fk(s)559 2266 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p
Fm(s;)d(a)753 2246 y Fl(0)763 2266 y Fs(])i(+)h Fm(\015)872
2225 y Fi(X)894 2312 y Fk(o)941 2266 y Fs(Pr\()p Fm(o)p
Fn(j)p Fm(b;)d(a)1118 2246 y Fl(0)1129 2266 y Fs(\)\()p
Fm(V)1206 2246 y Fl(\003)1226 2266 y Fs(\()p Fm(b)1266
2246 y Fl(0)1277 2266 y Fs(\))j(+)g Fm(e)p Fs(\))410
2379 y Fn(\024)490 2337 y Fi(X)512 2424 y Fk(s)559 2379
y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)d(a)753
2358 y Fl(\003)771 2379 y Fs(])i(+)h Fm(\015)881 2337
y Fi(X)902 2424 y Fk(o)949 2379 y Fs(Pr\()p Fm(o)p Fn(j)p
Fm(b;)d(a)1126 2358 y Fl(\003)1145 2379 y Fs(\))p Fm(V)1203
2358 y Fl(\003)1223 2379 y Fs(\()p Fm(b)1263 2358 y Fl(0)1274
2379 y Fs(\))j(+)h Fm(\015)s(e)1413 2337 y Fi(X)1434
2424 y Fk(o)1481 2379 y Fs(Pr\()p Fm(o)p Fn(j)p Fm(b;)c(a)1658
2358 y Fl(0)1669 2379 y Fs(\))410 2482 y Fn(\024)41 b
Fm(V)530 2462 y Fl(\003)549 2482 y Fs(\()p Fm(b)p Fs(\))11
b(+)g Fm(\015)s(e:)988 b Fs(\(7\))961 2607 y(9)p eop
%%Page: 10 10
10 9 bop 164 315 a Fs(The)20 b(third)g(step)g(uses)g
Fm(a)634 297 y Fl(\003)673 315 y Fs(in)g(place)g(of)g
Fm(a)948 297 y Fl(0)979 315 y Fs(in)g(the)g(giv)o(en)f(expression.)32
b(This)20 b(cannot)164 376 y(decrease)e(the)f(v)m(alue)h(b)q(ecause)h
Fm(a)781 358 y Fl(\003)818 376 y Fs(w)o(as)g(c)o(hosen)f(to)g(maximize)
c(the)k(expression.)27 b(The)164 436 y(rest)d(follo)o(ws)g(from)g
(substituting)g(the)g(de\014nition)g(of)h Fm(V)1258 418
y Fl(\003)1302 436 y Fs(and)g(the)f(fact)g(that)h(the)164
496 y(probabilities)15 b(sum)h(to)g(1.)237 556 y(Com)o(bining)f
(Equations)i(6)g(and)f(7)h(giv)o(es:)617 666 y Fm(V)656
646 y Fl(\003)676 666 y Fs(\()p Fm(b)p Fs(\))10 b Fn(\000)h
Fm(\015)s(e)j Fn(\024)f Fm(V)952 646 y Fl(0)963 666 y
Fs(\()p Fm(b)p Fs(\))h Fn(\024)f Fm(V)1128 646 y Fl(\003)1147
666 y Fs(\()p Fm(b)p Fs(\))e(+)g Fm(\015)s(e;)390 b Fs(\(8\))164
776 y(for)19 b(all)f Fm(b)p Fs(.)27 b(Th)o(us,)19 b Fm(V)552
758 y Fl(0)582 776 y Fs(is)g(a)f(b)q(etter)h(appro)o(ximation)e(to)i
(the)f(optimal)f(v)m(alue)h(function)164 836 y(than)f
Fm(V)27 b Fs(is)16 b(b)o(y)g(a)h(factor)f(of)h Fm(\015)s
Fs(,)f(pro)o(ving)g(the)g(lemm)o(a.)j Fc(2)164 981 y
Fq(3.2)70 b(V)-6 b(alue)22 b(iteration)f(b)r(ound)164
1073 y Fs(The)12 b(previous)h(section)f(sho)o(w)o(ed)g(that)h(applying)
f(a)h(step)f(of)h(v)m(alue)f(iteration)g(as)h(de\014ned)164
1133 y(in)j(Equation)i(4)f(leads)g(to)g(an)g(impro)o(v)o(ed)e(v)m(alue)
h(function.)23 b(This)17 b(section)g(sho)o(ws)g(that)164
1194 y(applying)d(it)h(rep)q(eatedly)e(gets)i(us)g(a)g(v)m(alue)g
(function)f(that)h(is)f(as)i(close)e(as)h(w)o(e'd)f(lik)o(e)f(to)164
1254 y(optimal.)237 1314 y(The)g(complete)e(v)m(alue)i(iteration)g
(algorithm)f(lo)q(oks)h(lik)o(e)f(this.)20 b(Start)13
b(with)g Fm(V)1652 1321 y Fj(0)1672 1314 y Fs(\()p Fm(b)p
Fs(\))h(=)164 1374 y(0.)20 b(No)o(w,)13 b(for)g Fm(i)f
Fs(from)g(1)h(to)g Fm(t)p Fs(,)g(generate)f Fm(V)913
1381 y Fk(i)941 1374 y Fs(from)f Fm(V)1080 1381 y Fk(i)p
Fl(\000)p Fj(1)1153 1374 y Fs(using)i(a)g(step)f(of)h(v)m(alue)g
(iteration.)164 1434 y(The)j(follo)o(wing)g(lemma)d(sho)o(ws)k(that,)f
(b)o(y)g(using)h(a)f(large)g(enough)h(v)m(alue)f(of)h
Fm(t)p Fs(,)e(w)o(e)h(can)164 1495 y(\014nd)k(a)h(v)m(alue)f(function)g
(arbitrarily)f(close)h(to)g Fm(V)1096 1476 y Fl(\003)1136
1495 y Fs(\(see,)g(e.g.)1346 1491 y([)1359 1495 y(Heyman)e(and)j(Sob)q
(el,)164 1555 y(1984)260 1551 y(])275 1555 y(\).)164
1669 y Fd(Theorem)c(1)24 b Fr(\(V)l(alue)16 b(Iter)n(ation\):)k(After)
15 b Fm(t)f Fr(steps)h(of)f(value)i(iter)n(ation)f(on)g(a)f(POMDP)164
1729 y(with)h(the)h(magnitude)g(of)e(the)i(maximum)f(p)n(er-step)g(r)n
(ewar)n(d)e(e)n(qual)j(to)f Fm(M)20 b Fr(and)c(disc)n(ount)164
1789 y(factor)24 b Fs(0)k Fm(<)f(\015)j(<)d Fs(1)p Fr(,)f(starting)f
(fr)n(om)f(the)h(zer)n(o)e(value)j(function,)i(the)d(\014nal)h(value)
164 1849 y(function)16 b(di\013ers)d(fr)n(om)g(the)i(optimal)f(value)i
(function)g(by)e(no)g(mor)n(e)g(than)g Fm(M)5 b(\015)1606
1831 y Fk(t)1622 1849 y Fm(=)p Fs(\(1)t Fn(\000)t Fm(\015)s
Fs(\))164 1910 y Fr(at)17 b(any)h(b)n(elief)g(state.)237
2024 y Fs(Pro)q(of:)26 b(Let)18 b Fm(M)23 b Fs(b)q(e)18
b(the)g(largest)g(magnitude)f(rew)o(ard)g(p)q(ossible)i(from)d(an)o(y)i
(state:)164 2084 y Fm(M)34 b Fs(=)28 b(max)402 2091 y
Fk(a)431 2084 y Fs(max)522 2091 y Fk(s)549 2084 y Fn(j)p
Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])p Fn(j)p Fs(.)45 b(If)25
b(the)f(agen)o(t)h(receiv)o(ed)e(this)i(rew)o(ard)g(\(p)q(ositiv)o(e)f
(or)164 2144 y(negativ)o(e\))e(on)h(ev)o(ery)f(step,)i(its)e(total)h
(exp)q(ected)f(rew)o(ard)h(w)o(ould)g(b)q(e)1514 2111
y Fi(P)1558 2124 y Fl(1)1558 2157 y Fk(i)p Fj(=0)1625
2144 y Fm(\015)1653 2126 y Fk(i)1667 2144 y Fm(M)31 b
Fs(=)164 2204 y Fm(M)r(=)p Fs(\(1)16 b Fn(\000)e Fm(\015)s
Fs(\).)35 b(Th)o(us,)22 b(the)e(zero)h(v)m(alue)g(function,)g
Fm(V)1153 2211 y Fj(0)1195 2204 y Fs(=)h(0)f(cannot)h(di\013er)e(from)g
(the)164 2265 y(optimal)15 b(v)m(alue)h(function)g(b)o(y)g(more)f(than)
h Fm(M)r(=)p Fs(\(1)d Fn(\000)e Fm(\015)s Fs(\))16 b(at)g(an)o(y)h(b)q
(elief)e(state.)237 2325 y(Let)22 b Fm(V)358 2332 y Fk(t)394
2325 y Fs(b)q(e)g(the)f(v)m(alue)g(function)g(obtained)h(from)e
Fm(t)h Fs(applications)g(of)h(the)f(v)m(alue)164 2385
y(iteration)c(step.)24 b(Rep)q(eated)18 b(application)f(of)h(Lemma)d(1)
j(tells)e(us)i Fm(V)1429 2392 y Fk(t)1461 2385 y Fs(di\013ers)g(from)e
Fm(V)1763 2367 y Fl(\003)164 2445 y Fs(b)o(y)g(at)g(most)g
Fm(M)5 b(\015)491 2427 y Fk(t)506 2445 y Fm(=)p Fs(\(1)12
b Fn(\000)f Fm(\015)s Fs(\).)21 b Fc(2)949 2607 y Fs(10)p
eop
%%Page: 11 11
11 10 bop 237 315 a Fs(T)l(o)17 b(use)g(this)f(result,)f(imagine)g
(that)i(w)o(e'd)f(lik)o(e)e(to)j(\014nd)g(a)g(v)m(alue)f(function)g
(that)h(is)164 376 y(within)12 b Fm(\017)h Fs(of)g(optimal.)19
b(If)12 b Fm(M)18 b Fs(is)13 b(the)g(maxim)n(um)c(single)j(step)h(rew)o
(ard)g(for)g(the)g(POMDP)164 436 y(in)j(question,)f(w)o(e)h(can)h
(rewrite)e(the)h(b)q(ound)h(as:)631 582 y Fm(t)c Fn(\025)720
541 y Fs(log)q(\()p Fm(M)5 b Fs(\))11 b(+)g(log)q(\()1020
521 y Fj(1)p 1020 529 18 2 v 1022 558 a Fk(\017)1043
541 y Fs(\))g(+)g(log)q(\()1232 521 y Fj(1)p 1209 529
66 2 v 1209 558 a(1)p Fl(\000)p Fk(\015)1279 541 y Fs(\))p
720 571 579 2 v 943 617 a(log)q(\()1031 597 y Fj(1)p
1030 605 21 2 v 1030 634 a Fk(\015)1055 617 y Fs(\))1303
582 y Fm(:)164 729 y Fs(Running)16 b(for)h(this)f(n)o(um)o(b)q(er)f(of)
h(steps)h(will)e(b)q(e)h(adequate.)237 789 y(The)d(function)g
Fm(V)550 796 y Fk(t)578 789 y Fs(is)g(the)f(v)m(alue)h(function)g
(obtained)g(after)g Fm(t)f Fs(iterations.)20 b(Ho)o(w)o(ev)o(er,)164
849 y(it)g(can)h(also)g(b)q(e)g(in)o(terpreted)e(as)j(a)f
Fm(t)p Fs(-step)f(v)m(alue)h(function.)34 b(That)22 b(is,)f
Fm(V)1567 856 y Fk(t)1582 849 y Fs(\()p Fm(b)p Fs(\))g(is)f(the)164
910 y(maxim)o(um)d(rew)o(ard)22 b(that)g(an)o(y)g(p)q(olicy)f(can)h
(accum)o(ulate)d(in)j Fm(t)f Fs(steps.)38 b(A)22 b(POMDP)164
970 y(where)d(the)g(ob)s(jectiv)o(e)f(is)h(to)h(maxim)o(ize)c(rew)o
(ard)j(o)o(v)o(er)g(a)g(\014nite)g(n)o(um)o(b)q(er)f(of)h(steps)h(is)
164 1030 y(called)c(a)i Fr(\014nite-horizon)h Fs(POMDP)l(.)e(V)l(alue)g
(iteration)g(links)f(the)i(\014nite-horizon)f(case)164
1090 y(to)g(the)f(in\014nite-horizon)f(one.)164 1235
y Fq(3.3)70 b(Appro)n(ximate)22 b(v)l(alue)g(iteration)g(b)r(ound)164
1327 y Fs(The)16 b(analysis)f(giv)o(en)g(in)g(Sections)g(3.1)h(and)h
(3.2)e(dep)q(ends)h(on)g(eac)o(h)f(step)h(of)g(the)f(v)m(alue)164
1387 y(iteration)f(algorithm)g(pro)q(ducing)h(an)g(exact)g(answ)o(er.)
21 b(This)14 b(is)h(extremely)c(di\016cult)j(to)164 1447
y(ac)o(hiev)o(e)h(in)i(practice.)23 b(Often)16 b(it)h(is)g(easier)f(to)
i(implem)o(en)n(t)d(a)i(step)g(of)h(v)m(alue)e(iteration)164
1507 y(with)g(a)h(bit)e(of)i(error)f(but)h(in)e(suc)o(h)h(a)h(w)o(a)o
(y)f(that)g(the)g(maxim)o(um)c(error)k(is)g(nev)o(er)f(more)164
1568 y(than)i(some)f(tunable)h(parameter,)e Fm(\016)r
Fs(.)22 b(F)l(or)17 b(example,)d(it)i(is)h(often)f(p)q(ossible)h(to)g
(c)o(ho)q(ose)164 1628 y(the)h(n)o(um)o(b)q(er)f(of)i(bits)f(of)h
(precision)f(for)h(all)f(n)o(umeric)d(computations)k(and)g(from)e(this)
164 1688 y(deriv)o(e)e(an)h(error)h(b)q(ound)g(for)f(the)g(en)o(tire)f
(algorithm.)237 1748 y(It)23 b(is)g(imp)q(ortan)o(t)f(for)h(the)g(v)m
(alue)g(iteration)g(algorithm)f(describ)q(ed)g(to)i(degrade)164
1808 y(gracefully)15 b(as)j(a)f(function)f(of)h(the)f(error)h(in)f(eac)
o(h)g(step.)22 b(This)17 b(section)f(sho)o(ws)h(that)g(it)164
1869 y(do)q(es.)237 1929 y(More)e(formally)l(,)e(giv)o(en)i(an)h(appro)
o(ximate)e(v)m(alue)h(function,)g Fm(V)c Fs(,)k(that)h(di\013ers)f
(from)164 1989 y(the)i(optimal)e(v)m(alue)i(function)f(b)o(y)h(no)g
(more)f(than)h Fm(e)g Fs(an)o(ywhere,)f(appro)o(ximate)f(v)m(alue)164
2049 y(iteration)j(pro)q(duces)i(an)f Fr(appr)n(oximation)f
Fs(of)i Fm(V)1062 2031 y Fl(0)1093 2049 y Fs(that)f(di\013ers)g(from)f
Fm(V)1506 2031 y Fl(0)1536 2049 y Fs(b)o(y)h(no)g(more)164
2109 y(than)h Fm(\016)h Fs(an)o(ywhere.)32 b(The)19 b(follo)o(wing)h
(lemm)o(a)d(tells)i(us)h(the)g(result)f(of)h(iterating)f(this)164
2170 y(pro)q(cedure)d(for)h Fm(t)f Fs(iterations)g(using)g
Fm(\016)r Fs(-appro)o(ximations)f(at)i(eac)o(h)f(step.)164
2284 y Fd(Theorem)h(2)24 b Fr(\(Appr)n(oximate)g(value)j(iter)n
(ation\):)37 b(After)25 b Fm(t)g Fr(steps)g(of)f(appr)n(oximate)164
2344 y(value)c(iter)n(ation)e(on)g(a)h(POMDP)f(with)h(maximum)f(p)n
(er-step)g(r)n(ewar)n(d)f(of)i Fm(M)k Fr(and)c(dis-)164
2404 y(c)n(ount)j(factor)f Fm(\015)s Fr(,)h(starting)g(fr)n(om)e(the)i
(zer)n(o)f(value)h(function,)i(and)d(wher)n(e)h(e)n(ach)f(step)949
2607 y Fs(11)p eop
%%Page: 12 12
12 11 bop 164 315 a Fr(pr)n(o)n(duc)n(es)19 b(appr)n(oximations)h(that)
h(ar)n(e)f(within)i Fm(\016)g Fr(of)f(the)g(r)n(esult)g(of)g(true)g
(value)h(iter)n(a-)164 376 y(tion,)e(the)g(r)n(esulting)g(value)h
(function)g(di\013ers)e(fr)n(om)f(the)i(optimal)f(value)i(function)g
(by)164 436 y(no)d(mor)n(e)e(than)i Fm(M)5 b(\015)547
418 y Fk(t)562 436 y Fm(=)p Fs(\(1)12 b Fn(\000)f Fm(\015)s
Fs(\))g(+)g Fm(\016)r(=)p Fs(\(1)g Fn(\000)g Fm(\015)s
Fs(\))18 b Fr(at)f(any)h(state.)237 550 y Fs(Pro)q(of:)k(Consider)17
b(a)f(single)f(step)h(of)g(appro)o(ximate)f(v)m(alue)h(iteration.)k(If)
c Fm(V)27 b Fs(di\013ers)164 610 y(from)11 b(the)g(optimal)f(v)m(alue)i
(function)f(b)o(y)g(no)i(more)d(than)i Fm(e)p Fs(,)g(then)g(the)f(v)m
(alue)g(function)h Fm(V)1771 592 y Fl(0)164 670 y Fs(returned)f(b)o(y)g
(exact)g(v)m(alue)g(iteration)g(di\013ers)g(from)f(the)h(optimal)f(v)m
(alue)h(function)h(b)o(y)e(no)164 731 y(more)j(than)h
Fm(\015)s(e)g Fs(\(Lemma)d(1\).)21 b(By)13 b(the)h(triangle)g
(inequalit)o(y)l(,)d(the)j(new)g(appro)o(ximation)164
791 y(di\013ers)i(from)f(the)h(optimal)f(v)m(alue)h(function)g(b)o(y)g
(no)h(more)e(than)906 901 y Fm(\015)s(e)c Fs(+)g Fm(\016)682
b Fs(\(9\))164 1011 y(an)o(ywhere.)237 1071 y(In)18 b(the)g(previous)f
(section)h(w)o(e)f(sa)o(w)i(that)f Fm(M)r(=)p Fs(\(1)c
Fn(\000)e Fm(\015)s Fs(\))18 b(b)q(ounds)h(the)f(distance)g(b)q(e-)164
1131 y(t)o(w)o(een)c(the)h(0)h(function)f(and)g(the)g(optimal)f(v)m
(alue)h(function.)21 b(Applying)14 b(Expression)i(9)164
1191 y Fm(t)g Fs(times)e(to)j(this)f(quan)o(tit)o(y)f(b)q(ounds)j(the)e
Fm(t)p Fs(-step)g(error:)311 1355 y Fm(t)p Fn(\000)p
Fs(step)f(error)42 b Fn(\024)810 1280 y Fk(t)695 1305
y Fi(z)p 714 1305 85 5 v 85 w(}|)p 837 1305 V 85 w({)695
1355 y Fm(\015)s Fs(\()p Fm(\015)s Fs(\()p Fm(\015)11
b(:)d(:)g(:)g Fs(\()p Fm(\015)j(M)r(=)p Fs(\(1)i Fn(\000)d
Fm(\015)s Fs(\))h(+)1423 1280 y Fk(t)1231 1305 y Fi(z)p
1250 1305 161 5 v 161 w(}|)p 1449 1305 V 161 w({)1231
1355 y Fm(\016)r Fs(\))d Fm(:)g(:)g(:)i Fs(+)h Fm(\016)r
Fs(\))g(+)g Fm(\016)r Fs(\))f(+)h Fm(\016)615 1464 y
Fn(\024)41 b Fm(M)5 b(\015)775 1443 y Fk(t)790 1464 y
Fm(=)p Fs(\(1)12 b Fn(\000)f Fm(\015)s Fs(\))g(+)1027
1410 y Fk(t)p Fl(\000)p Fj(1)1026 1422 y Fi(X)1027 1513
y Fk(i)p Fj(=0)1094 1464 y Fm(\015)1122 1443 y Fk(i)1136
1464 y Fm(\016)615 1607 y Fn(\024)41 b Fm(M)5 b(\015)775
1586 y Fk(t)790 1607 y Fm(=)p Fs(\(1)12 b Fn(\000)f Fm(\015)s
Fs(\))g(+)1038 1553 y Fl(1)1026 1565 y Fi(X)1027 1656
y Fk(i)p Fj(=0)1094 1607 y Fm(\015)1122 1586 y Fk(i)1136
1607 y Fm(\016)615 1718 y Fn(\024)41 b Fm(M)5 b(\015)775
1697 y Fk(t)790 1718 y Fm(=)p Fs(\(1)12 b Fn(\000)f Fm(\015)s
Fs(\))g(+)g Fm(\016)r(=)p Fs(\(1)g Fn(\000)g Fm(\015)s
Fs(\))p Fm(:)164 1828 y Fs(The)16 b(step)h(that)f(expands)h(the)f(sum)f
(to)i(run)g(from)e(1)h(to)h Fn(1)f Fs(is)g(not)h(strictly)e(necessary)
164 1888 y(but)h(simpli\014es)e(the)i(form)o(ula)f(for)i(the)f(b)q
(ound.)22 b Fc(2)237 1948 y Fs(Note)17 b(that)g(for)g(a)g(\014xed)g
Fm(\016)r Fs(,)f(it)h(ma)o(y)e(not)i(b)q(e)g(p)q(ossible)g(to)h(use)f
(appro)o(ximate)e(v)m(alue)164 2008 y(iteration)20 b(to)g(reduce)f(the)
h(error)g(b)q(elo)o(w)g Fm(\016)r(=)p Fs(\(1)14 b Fn(\000)f
Fm(\015)s Fs(\).)33 b(If)19 b(y)o(ou'd)h(lik)o(e)e(the)i(\014nal)g(v)m
(alue)164 2069 y(function)h(to)g(b)q(e)h(within)e Fm(\017)h
Fs(of)h(optimal,)e(one)h(w)o(a)o(y)g(to)h(do)f(it)g(w)o(ould)g(b)q(e)g
(to)h(let)e Fm(\016)k Fs(=)164 2129 y Fm(\017)p Fs(\(1)11
b Fn(\000)g Fm(\015)s Fs(\))p Fm(=)p Fs(2.)22 b(Then)16
b(running)h(for)595 2278 y Fm(t)d Fn(\025)684 2236 y
Fs(log)q(\()p Fm(M)5 b Fs(\))12 b(+)f(log)q(\()985 2217
y Fj(1)p 985 2225 18 2 v 987 2253 a Fk(\017)1007 2236
y Fs(\))g(+)g(log)q(\()1197 2217 y Fj(1)p 1173 2225 66
2 v 1173 2253 a(1)p Fl(\000)p Fk(\015)1243 2236 y Fs(\))g(+)g(1)p
684 2267 663 2 v 950 2313 a(log)q(\()1038 2293 y Fj(1)p
1037 2301 21 2 v 1037 2330 a Fk(\015)1062 2313 y Fs(\))164
2425 y(iterations)16 b(will)f(b)q(e)i(adequate.)949 2607
y(12)p eop
%%Page: 13 13
13 12 bop 164 315 a Fq(3.4)70 b(Stopping)23 b(criterion)164
408 y Fs(When)e(should)g(v)m(alue)f(iteration)h(b)q(e)g(stopp)q(ed?)36
b(Theorems)19 b(1)i(and)h(2)f(suggest)g(that)164 468
y(w)o(e)i(compute)f(the)h(n)o(um)o(b)q(er)f(of)i(iterations)f(to)h(run)
f(as)i(a)e(function)h(of)f(the)h(largest)164 528 y(magnitude)12
b(rew)o(ard)h(in)g Fm(R)p Fs(.)21 b(This)14 b(approac)o(h)g(is)f(not)h
(desirable)e(in)h(practice)f(for)i(sev)o(eral)164 588
y(reasons.)237 649 y(F)l(or)e(one,)h(the)f(initial)f(v)m(alue)h
(function,)g Fm(V)988 656 y Fj(0)1022 649 y Fs(=)i(0,)f(usually)f
(di\013ers)g(from)f(the)h(optimal)164 709 y(v)m(alue)h(function,)g
Fm(V)528 691 y Fl(\003)548 709 y Fs(,)g(b)o(y)f(m)o(uc)o(h)f(less)i
(than)g(the)g(conserv)m(ativ)o(e)f Fm(M)r(=)p Fs(\(1)t
Fn(\000)t Fm(\015)s Fs(\))j(b)q(ound)f(used)164 769 y(in)i(the)g(lemm)o
(as.)237 829 y(More)h(imp)q(ortan)o(tly)l(,)d(w)o(e)j(need)f(to)h
(consider)f(ho)o(w)i(the)e(appro)o(ximate)f(v)m(alue)i(func-)164
889 y(tion,)e Fm(V)305 896 y Fk(t)336 889 y Fs(will)g(actually)g(b)q(e)
h(used)f(to)h(con)o(trol)g(the)f(agen)o(t's)h(b)q(eha)o(vior.)21
b(The)15 b(agen)o(t)h(will)164 950 y(follo)o(w)21 b(the)g(\\greedy")h
(p)q(olicy)f(that)h(sa)o(ys:)32 b(alw)o(a)o(ys)21 b(c)o(ho)q(ose)h(the)
f(action)g(that)h(lo)q(oks)164 1010 y(b)q(est)17 b(according)f(to)h
(one-step)f(lo)q(ok)m(ahead)i(with)e Fm(V)1107 1017 y
Fk(t)1122 1010 y Fs(:)393 1148 y Fm(\031)421 1155 y Fk(t)436
1148 y Fs(\()p Fm(b)p Fs(\))d(=)h(arg)c(max)673 1173
y Fk(a)736 1075 y Fi(")760 1107 y(X)782 1194 y Fk(s)828
1148 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)e(a)p
Fs(])h(+)i Fm(\015)1130 1107 y Fi(X)1152 1194 y Fk(o)1199
1148 y Fs(Pr\()p Fm(o)p Fn(j)p Fm(b;)d(a)p Fs(\))p Fm(V)1423
1155 y Fk(t)1437 1148 y Fs(\()p Fm(b)1477 1128 y Fl(0)1489
1148 y Fs(\))1508 1075 y Fi(#)1540 1148 y Fm(:)164 1286
y Fs(What)22 b(e\013ect)e(do)q(es)i(error)f(in)f(the)h(v)m(alue)g
(function)f(ha)o(v)o(e)h(on)g(the)g(rew)o(ard)g(gathered)164
1347 y(b)o(y)d(an)i(agen)o(t)f(follo)o(wing)f(the)h(greedy)f(p)q
(olicy?)29 b(Could)19 b(it)f(b)q(e)h(that)h(small)d(errors)i(are)164
1407 y(arbitrarily)c(magni\014ed?)237 1467 y(Both)20
b(these)f(issues)g(are)h(addressed)g(b)o(y)f(the)g(follo)o(wing)g
(stopping)h(criterion:)27 b(A)o(t)164 1527 y(eac)o(h)15
b(iteration,)f Fm(t)p Fs(,)h(compare)f Fm(V)752 1534
y Fk(t)783 1527 y Fs(and)i Fm(V)905 1534 y Fk(t)p Fl(\000)p
Fj(1)980 1527 y Fs(and)g(stop)g(if)f(the)g(maxim)o(um)c(di\013erence)j
(is)164 1587 y(small)h(enough.)237 1648 y(Theorem)g(3)484
1644 y([)497 1648 y(Williams)f(and)j(Baird,)f(1993,)h(Heyman)e(and)i
(Sob)q(el,)f(1984)1602 1644 y(])1633 1648 y(tells)g(us)164
1708 y(the)g(result)g(of)g(using)h(this)f(criterion.)164
1822 y Fd(Theorem)h(3)24 b Fr(\(Bel)r(lman)i(r)n(esidual\):)35
b(If)23 b(the)h(maximum)g(di\013er)n(enc)n(e)g(b)n(etwe)n(en)i
Fm(V)1723 1829 y Fk(t)p Fl(\000)p Fj(1)164 1882 y Fr(and)20
b Fm(V)289 1889 y Fk(t)324 1882 y Fr(\(sometimes)h(c)n(al)r(le)n(d)g
(the)f(Bel)r(lman)j(r)n(esidual)c(of)h Fm(V)1273 1889
y Fk(t)p Fl(\000)p Fj(1)1334 1882 y Fr(\))g(is)g(less)g(than)h
Fm(\017)p Fr(,)f(then)164 1942 y(the)i(r)n(ewar)n(d)f(gather)n(e)n(d)g
(by)h(the)g(gr)n(e)n(e)n(dy)f(p)n(olicy)h(on)g(either)g
Fm(V)1299 1949 y Fk(t)p Fl(\000)p Fj(1)1381 1942 y Fr(or)f
Fm(V)1476 1949 y Fk(t)1513 1942 y Fr(never)i(di\013ers)164
2003 y(fr)n(om)d(that)h(of)f(the)i(the)f(optimal)g(p)n(olicy)g(by)g
(mor)n(e)f(than)h Fs(2)p Fm(\017\015)s(=)p Fs(\(1)15
b Fn(\000)e Fm(\015)s Fs(\))21 b Fr(at)g(any)g(b)n(elief)164
2063 y(state.)237 2177 y Fs(Note)14 b(that)h(this)f(result)g(is)g
(concerned)g(with)h Fr(values)g Fs(here)f(and)h(not)g(instan)o(taneous)
164 2237 y(rew)o(ards.)31 b(That)20 b(means)e(that)i(the)f(total)h(rew)
o(ard)f(that)h(this)f(t)o(yp)q(e)g(of)h(greedy)f(agen)o(t)164
2297 y(w)o(ould)d(gather)h(is)f(not)h(to)q(o)g(far)g(from)e(what)i(the)
f(optimal)f(agen)o(t)h(w)o(ould)g(get.)237 2357 y(The)d(pro)q(of)i(of)f
(this)f(will)f(not)i(b)q(e)f(included)f(here.)20 b(The)13
b(signi\014cance)g(of)h(the)f(lemma)164 2418 y(is)18
b(that)i(a)f(v)m(alue)f(iteration)g(algorithm)g(that)h(stops)h(when)e
(the)h(Bellman)d(residual)i(is)164 2478 y(less)e(than)h(or)f(equal)g
(to)h Fm(\017)c Fn(\025)h Fs(0)i(will)g(pro)q(duce)g(a)h(go)q(o)q(d)h
(p)q(olicy)e(with)g(resp)q(ect)g(to)g Fm(\017)p Fs(.)949
2607 y(13)p eop
%%Page: 14 14
14 13 bop 574 266 a
 12598519 9472573 789381 28417720 24997068 46573486 startTexFig
 574 266 a
%%BeginDocument: tsteptree.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
197.96 690.05 187.18 646.96 2 L
0 X
0 0 0 1 0 0 0 K
V
1 H
2 Z
N
198.85 690.05 209.62 646.96 2 L
V
N
199.75 690.05 282.33 631.71 2 L
V
N
197.96 690.05 115.38 631.71 2 L
V
N
7 X
90 450 13.91 13.91 199.3 694.09 G
0 Z
0 X
90 450 13.91 13.91 199.3 694.09 A
113.58 612.86 102.81 569.77 2 L
7 X
V
2 Z
0 X
N
114.48 612.86 125.25 569.77 2 L
7 X
V
0 X
N
115.38 612.86 153.08 554.52 2 L
7 X
V
0 X
N
112.69 611.06 74.99 552.72 2 L
7 X
V
0 X
N
7 X
90 450 13.91 13.91 114.93 616.9 G
0 Z
0 X
90 450 13.91 13.91 114.93 616.9 A
288.61 613.76 277.84 570.67 2 L
7 X
V
2 Z
0 X
N
289.51 613.76 300.28 570.67 2 L
7 X
V
0 X
N
290.4 613.76 328.1 555.41 2 L
7 X
V
0 X
N
287.71 611.96 250.01 553.62 2 L
7 X
V
0 X
N
7 X
90 450 13.91 13.91 289.96 617.79 G
0 Z
0 X
90 450 13.91 13.91 289.96 617.79 A
333.49 537.46 322.72 494.38 2 L
7 X
V
2 Z
0 X
N
334.39 537.46 345.16 494.38 2 L
7 X
V
0 X
N
332.59 535.67 307.46 477.32 2 L
7 X
V
0 X
N
336.18 536.56 361.32 478.22 2 L
7 X
V
0 X
N
7 X
90 450 13.91 13.91 334.83 541.5 G
0 Z
0 X
90 450 13.91 13.91 334.83 541.5 A
250.91 535.67 240.14 492.58 2 L
7 X
V
2 Z
0 X
N
251.81 535.67 262.58 492.58 2 L
7 X
V
0 X
N
250.01 533.87 224.88 475.53 2 L
7 X
V
0 X
N
253.6 534.77 278.74 476.43 2 L
7 X
V
0 X
N
7 X
90 450 13.91 13.91 252.26 539.71 G
0 Z
0 X
90 450 13.91 13.91 252.26 539.71 A
153.97 534.77 143.2 491.68 2 L
7 X
V
2 Z
0 X
N
154.87 534.77 165.64 491.68 2 L
7 X
V
0 X
N
153.08 532.97 127.94 474.63 2 L
7 X
V
0 X
N
156.67 533.87 181.8 475.53 2 L
7 X
V
0 X
N
7 X
90 450 13.91 13.91 155.32 538.81 G
0 Z
0 X
90 450 13.91 13.91 155.32 538.81 A
71.4 532.97 60.63 489.89 2 L
7 X
V
2 Z
0 X
N
72.29 532.97 83.07 489.89 2 L
7 X
V
0 X
N
70.5 531.18 45.37 472.84 2 L
7 X
V
0 X
N
74.09 532.08 99.22 473.73 2 L
7 X
V
0 X
N
7 X
90 450 13.91 13.91 72.74 537.01 G
0 Z
0 X
90 450 13.91 13.91 72.74 537.01 A
2 36 Q
(...) 183.67 607.08 T
(...) 94.25 431.82 T
27.9 707.13 27.9 437.31 2 L
7 X
V
2 Z
0 X
N
27.9 707.13 59.34 707.13 2 L
7 X
V
0 X
N
28.78 436.44 60.21 436.44 2 L
7 X
V
0 X
N
(...) 275.47 431.82 T
1 14 Q
(a) 191.78 690.54 T
2 12 Q
(1) 199.31 684.44 T
1 14 Q
(a) 107.08 614.57 T
2 12 Q
(2) 114.62 608.47 T
1 14 Q
(a) 65.17 534.24 T
2 12 Q
(4) 72.7 528.14 T
1 14 Q
(a) 283.47 617.19 T
2 12 Q
(3) 291 611.09 T
1 14 Q
(a) 148.76 537.29 T
2 12 Q
(5) 156.3 531.19 T
1 14 Q
(a) 246.56 539.04 T
2 12 Q
(6) 254.09 532.94 T
1 14 Q
(a) 327.77 539.91 T
2 12 Q
(7) 335.3 533.81 T
1 14 Q
(o) 142.65 671.41 T
2 12 Q
(1) 150.18 665.31 T
1 14 Q
(o) 247.77 669.67 T
1 12 Q
(k) 255.3 663.57 T
1 24 Q
(t) 11.84 575.28 T
2 F
(|) 283.8 671.33 T
3 F
(O) 290.02 671.33 T
2 F
(|) 305.83 671.33 T
(|) 316.98 583.13 T
3 F
(O) 323.2 583.13 T
2 F
(|) 339.02 583.13 T
(|) 355.4 505.42 T
3 F
(O) 361.62 505.42 T
2 F
(|) 377.43 505.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 653 967 a Fs(Figure)15 b(3:)22 b(A)16 b Fm(t)p Fs(-step)g(p)q(olicy)f
(tree.)237 1103 y(In)e(com)o(bination)e(with)i(Theorem)f(1,)h(w)o(e)g
(can)g(argue)g(that)h(this)e(stopping)i(criterion)164
1163 y(will)k(b)q(e)i(satis\014ed)g(in)f(\014nite)g(time.)29
b(In)19 b(particular,)h(if)f Fm(V)1231 1170 y Fk(t)1266
1163 y Fs(di\013ers)h(from)e(the)h(optimal)164 1223 y(v)m(alue)13
b(function)f(b)o(y)h(no)g(more)f(than)h Fm(\017=)p Fs(2)h(at)f(an)o(y)g
Fm(b)p Fs(,)g(then)f(\(b)o(y)h(the)f(triangle)h(inequalit)o(y\))669
1320 y Fn(j)p Fm(V)711 1327 y Fk(t)726 1320 y Fs(\()p
Fm(b)p Fs(\))d Fn(\000)h Fm(V)884 1300 y Fl(\003)904
1320 y Fs(\()p Fm(b)p Fs(\))p Fn(j)41 b(\024)g Fm(\017=)p
Fs(2)623 1393 y Fn(j)p Fm(V)665 1400 y Fk(t)p Fj(+1)726
1393 y Fs(\()p Fm(b)p Fs(\))10 b Fn(\000)h Fm(V)884 1372
y Fl(\003)904 1393 y Fs(\()p Fm(b)p Fs(\))p Fn(j)42 b
Fm(<)f(\015)s(\017=)p Fs(2)639 1466 y Fn(j)p Fm(V)681
1473 y Fk(t)p Fj(+1)741 1466 y Fs(\()p Fm(b)p Fs(\))11
b Fn(\000)g Fm(V)889 1473 y Fk(t)904 1466 y Fs(\()p Fm(b)p
Fs(\))p Fn(j)42 b Fm(<)f(\017=)p Fs(2)12 b(+)f Fm(\015)s(\017=)p
Fs(2)639 1538 y Fn(j)p Fm(V)681 1545 y Fk(t)p Fj(+1)741
1538 y Fs(\()p Fm(b)p Fs(\))g Fn(\000)g Fm(V)889 1545
y Fk(t)904 1538 y Fs(\()p Fm(b)p Fs(\))p Fn(j)42 b Fm(<)f(\017:)164
1635 y Fs(And,)16 b(b)o(y)f(Theorem)g(1,)h Fn(j)p Fm(V)654
1642 y Fk(t)669 1635 y Fs(\()p Fm(b)p Fs(\))11 b Fn(\000)g
Fm(V)828 1617 y Fl(\003)848 1635 y Fs(\()p Fm(b)p Fs(\))p
Fn(j)i(\024)h Fm(\017=)p Fs(2)j(in)f(a)g(\014nite)g(n)o(um)o(b)q(er)e
(of)j(iterations.)164 1800 y Ft(4)83 b(Prop)r(erties)18
b(of)h(the)f(\014nite-horizon)g(v)-5 b(alue)18 b(func-)288
1891 y(tion)164 2001 y Fs(Since)g(the)g(discoun)o(t)h(factor,)g
Fm(\015)s Fs(,)g(is)g(less)g(than)g(one)g(and)g(rew)o(ards)h(are)e(b)q
(ounded,)i(w)o(e)164 2061 y(can)g(use)f(v)m(alue)h(iteration)f(or)h
(appro)o(ximate)e(v)m(alue)i(iteration)f(to)h(\014nd)g(p)q(olicies)e
(that)164 2121 y(are)h(within)f Fm(\017)g Fs(of)h(optimal)e(b)o(y)h
(acting)h(according)g(to)g(the)f(v)m(alue)g(function)h(at)g(time)d
Fm(t)164 2181 y Fs(for)e(large)g(enough)h Fm(t)p Fs(.)20
b(W)l(e)14 b(therefore)f(need)h(only)f(fo)q(cus)i(on)g(\014nding)f(an)g
(optimal)f Fm(t)p Fs(-step)164 2242 y(p)q(olicy)l(,)19
b(whic)o(h)f(is)h(a)h(mapping)e(from)g(all)h(probabilit)o(y)f
(distributions)h(o)o(v)o(er)f(states)i(to)164 2302 y(optimal)14
b(actions.)22 b(This)16 b(still)f(seems)f(quite)h(imp)q(osing,)g(but)h
(there)f(is)h(a)g(great)g(deal)g(of)164 2362 y(structure)g(in)g(the)g
(problem)e(w)o(e)i(can)h(tak)o(e)e(adv)m(an)o(tage)j(of.)237
2422 y(The)d(decisions)g(of)h(a)f Fm(t)p Fs(-step)g(p)q(olicy)g(can)g
(b)q(e)g(summarized)e(as)i(a)h Fm(t)p Fr(-step)h(p)n(olicy)f(tr)n(e)n
(e)164 2482 y Fs(lik)o(e)f(the)i(one)h(in)f(Figure)f(3.)25
b(This)17 b(means)g(that)g(to)h(sp)q(ecify)e(an)i(optimal)e(p)q(olicy)l
(,)g(it)h(is)949 2607 y(14)p eop
%%Page: 15 15
15 14 bop 658 266 a
 9946198 9472573 8156938 37429821 19537182 48218030 startTexFig
 658 266 a
%%BeginDocument: pwlconvex.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
126.22 632.15 261.22 632.15 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
J
126.22 686.15 261.22 587.15 2 L
J
126.22 686.15 129.24 683.94 2 L
0.5 H
N
[7.472 6.476] 7.472 I
129.24 683.94 258.2 589.37 2 L
N
J
258.2 589.37 261.22 587.15 2 L
N
J
124.22 659.15 258.22 607.82 2 L
J
124.22 659.15 127.72 657.81 2 L
N
[7.698 6.671] 7.698 I
127.72 657.81 254.72 609.16 2 L
N
J
254.72 609.16 258.22 607.82 2 L
N
J
126.22 650.15 270.22 695.15 2 L
J
126.22 650.15 129.8 651.27 2 L
N
[7.34 6.361] 7.34 I
129.8 651.27 266.64 694.03 2 L
N
J
266.64 694.03 270.22 695.15 2 L
N
J
126.22 587.15 270.22 722.15 2 L
J
126.22 587.15 128.96 589.72 2 L
N
[7.555 6.548] 7.555 I
128.96 589.72 267.48 719.59 2 L
N
J
267.48 719.59 270.22 722.15 2 L
N
J
160.22 661.15 126.22 685.82 2 L
3 H
N
160.5 661.25 226.25 681 2 L
N
226.89 681.82 270.28 722.14 2 L
N
0 14 Q
(a) 283 726.1 T
2 12 Q
(1) 292.37 720 T
0 14 Q
(a) 282 698.1 T
2 12 Q
(2) 291.37 692 T
0 14 Q
(a) 273 603.1 T
2 12 Q
(3) 282.37 597 T
2 14 Q
(1) 260 617 T
0 F
(a) 274 575.1 T
2 12 Q
(4) 283.37 569 T
2 14 Q
(0) 126 614 T
1 F
(b) 182 615 T
2 24 Q
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 365 967 a Fs(Figure)16 b(4:)21 b(A)16 b(sample)f(v)m(alue)h(function)g
(for)g(a)h(2)g(state)f(POMDP)l(.)164 1104 y(su\016cien)o(t)e(to)j
(commit)12 b(to)17 b(a)f Fm(t)p Fs(-step)g(p)q(olicy)f(based)h(on)g
(the)g(initial)e(b)q(elief)h(state)h(alone.)164 1164
y(The)g(p)q(olicy)f(tree)g(c)o(ho)q(oses)i(an)f(action)g(for)h(eac)o(h)
e(of)h(the)g Fm(t)f Fs(steps)h(as)h(a)f(function)g(of)g(the)164
1224 y(history)g(of)h(observ)m(ations.)237 1284 y(A)23
b(fundamen)o(tal)e(fact)i(ab)q(out)i(\014nite-horizon)d(POMDP's)i(is)e
(that)i(their)e(v)m(alue)164 1345 y(functions)12 b(are)f
(piecewise-linear)f(and)i(con)o(v)o(ex)1034 1341 y([)1048
1345 y(Smallw)o(o)q(o)q(d)f(and)h(Sondik,)g(1973)1648
1341 y(])1663 1345 y(.)20 b(Fig-)164 1405 y(ure)c(4)h(sho)o(ws)g(an)f
(example)e(v)m(alue)i(function)h(for)f(a)h(simple)d(t)o(w)o(o)i(state)g
(POMDP)l(.)237 1465 y(A)k(represen)o(tation)f(that)i(mak)o(es)d(use)j
(of)f(these)g(prop)q(erties)g(w)o(as)h(in)o(tro)q(duced)e(b)o(y)164
1525 y(Sondik)325 1521 y([)339 1525 y(Sondik,)d(1971)610
1521 y(])625 1525 y(.)164 1618 y Fd(Theorem)h(4)24 b
Fr(\(Pie)n(c)n(ewise-line)n(ar)14 b(and)e(c)n(onvex\):)22
b(The)12 b(optimal)h Fm(t)p Fr(-horizon)f(value)i(func-)164
1678 y(tion)k(c)n(an)g(b)n(e)f(written)i(as:)702 1778
y Fm(V)730 1785 y Fk(t)746 1778 y Fs(\()p Fm(b)p Fs(\))13
b(=)h(max)876 1807 y Fk(\013)p Fl(2C)942 1811 y Fb(t)983
1736 y Fi(X)1005 1823 y Fk(s)1051 1778 y Fm(b)p Fs([)p
Fm(s)p Fs(])p Fm(\013)p Fs([)p Fm(s)p Fs(])26 b Fm(;)164
1908 y Fr(for)17 b(some)g(\014nite)i(size)f(c)n(ol)r(le)n(ction,)h
Fn(C)843 1915 y Fk(t)858 1908 y Fr(,)f(of)f Fn(jS)t(j)p
Fr(-dimensional)h(ve)n(ctors.)237 2001 y Fs(Pro)q(of:)23
b(The)17 b(v)o(ectors)e(in)i Fn(C)740 2008 y Fk(t)755
2001 y Fs(,)f(tak)o(en)g(together,)g(sp)q(ecify)g(a)h(v)m(alue)f
(function)g(that)h(is)164 2061 y(the)11 b(\\upp)q(er)g(surface")g(of)g
(a)h(set)e(of)h(linear)g(functions.)19 b(Smallw)o(o)q(o)q(d)10
b(and)i(Sondik)1636 2057 y([)1649 2061 y(Small-)164 2121
y(w)o(o)q(o)q(d)k(and)g(Sondik,)f(1973)655 2117 y(])685
2121 y(giv)o(e)f(an)h(algebraic)g(pro)q(of)h(that)f(an)o(y)g
(\014nite-horizon)g(v)m(alue)164 2181 y(function)g(can)h(b)q(e)g
(represen)o(ted)e(this)h(w)o(a)o(y)l(.)21 b(The)15 b(follo)o(wing)h(is)
f(an)h(alternativ)o(e)e(deriv)m(a-)164 2242 y(tion)k(that)h(giv)o(es)e
(an)i(in)o(tuitiv)o(e)c(in)o(terpretation)i(to)i(the)f(comp)q(onen)o
(ts)f(of)i(the)f(v)o(ectors)164 2302 y(in)13 b Fn(C)244
2309 y Fk(t)259 2302 y Fs(.)21 b(In)13 b(particular,)h(w)o(e)f(can)h
(sho)o(w)g(that)g(the)g(v)o(ectors)f(in)g Fn(C)1291 2309
y Fk(t)1320 2302 y Fs(corresp)q(ond)i(to)f(distinct)164
2362 y(\014nite-horizon)i(p)q(olicies.)237 2422 y(A)e
Fm(t)p Fs(-step)g(p)q(olicy)f(is)h(completely)d(sp)q(eci\014ed)j(b)o(y)
f(a)i(c)o(hoice)d(of)j(action)f(and)g(one)h Fm(t)7 b
Fn(\000)g Fs(1-)164 2482 y(step)14 b(p)q(olicy)g(for)h(eac)o(h)f(p)q
(ossible)g(observ)m(ation.)21 b(If)14 b Fm(p)h Fs(is)f(a)h
Fm(t)p Fs(-step)f(p)q(olicy)g(tree,)g(w)o(e)g(write)949
2607 y(15)p eop
%%Page: 16 16
16 15 bop 220 266 a
 23776156 9472573 5262540 36706222 37692948 49599447 startTexFig
 220 266 a
%%BeginDocument: rectree.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 14 Q
0 X
0 0 0 1 0 0 0 K
(a) 295.32 715 T
(c) 302.32 715 T
(t) 308.53 715 T
(i) 313.2 715 T
(o) 317.09 715 T
(n) 324.09 715 T
1 F
(p) 341.04 715 T
0 F
(\050) 335.03 715 T
(\051) 348.68 715 T
1 36 Q
(p) 134 739 T
282 705 366 730 12.5 RR
3 H
0 Z
N
4 14 Q
(c) 266.17 596 T
(h) 272.38 596 T
(o) 280.17 596 T
(i) 287.17 596 T
(c) 291.06 596 T
(e) 297.27 596 T
1 F
(p) 312.66 596 T
(o) 326.66 596 T
2 12 Q
(2) 334.19 589.9 T
0 14 Q
(,) 319.66 596 T
(\050) 306.65 596 T
(\051) 340.83 596 T
301 637 233 587 382 587 3 Y
N
4 F
(c) 451.5 596 T
(h) 457.72 596 T
(o) 465.5 596 T
(i) 472.5 596 T
(c) 476.4 596 T
(e) 482.61 596 T
1 F
(p) 498 596 T
(o) 511.99 596 T
1 12 Q
(k) 519.53 589.9 T
0 14 Q
(,) 505 596 T
(\050) 491.99 596 T
(\051) 525.5 596 T
486 637 418 587 567 587 3 Y
N
2 36 Q
(...) 347 649 T
325 705 152 637 2 L
1 H
2 Z
N
322 705 300 638 2 L
N
321 705 485 636 2 L
N
230.5 540 420.5 576 R
7 X
V
2 20 Q
0 X
-0.32 (-step policy trees) 284.5 562.67 P
230.5 549 284.5 576 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 20 Q
0 X
0 0 0 1 0 0 0 K
(t) 243.17 562.67 T
2 F
(1) 268.72 562.67 T
(\320) 253.72 562.67 T
0 0 612 792 C
4 14 Q
0 X
0 0 0 1 0 0 0 K
(c) 117.17 596 T
(h) 123.38 596 T
(o) 131.17 596 T
(i) 138.17 596 T
(c) 142.06 596 T
(e) 148.28 596 T
1 F
(p) 163.66 596 T
(o) 177.66 596 T
2 12 Q
(1) 185.19 589.9 T
0 14 Q
(,) 170.66 596 T
(\050) 157.65 596 T
(\051) 191.83 596 T
152 637 84 587 233 587 3 Y
3 H
0 Z
N
2 24 Q
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 427 967 a Fs(Figure)16 b(5:)22 b(Notation)16 b(used)h(for)f
(describing)g(p)q(olicy)f(trees.)164 1110 y Fd(action)p
Fs(\()p Fm(p)p Fs(\))h Fn(2)g(A)h Fs(to)g(signify)g(its)g(initial)f
(action)i(c)o(hoice)e(and)h Fd(c)n(hoice)p Fs(\()p Fm(p;)8
b(o)p Fs(\))18 b(to)g(b)q(e)f(the)164 1170 y Fm(t)12
b Fn(\000)g Fs(1-step)19 b(p)q(olicy)f(tree)f(follo)o(w)o(ed)h(if)f
Fm(o)i Fs(is)f(observ)o(ed)g(after)g(the)g(\014rst)h(step.)27
b(Figure)18 b(5)164 1230 y(illustrates)d(these)h(de\014nitions.)237
1290 y(If)e(w)o(e)g(knew)g(our)h(true)f(state)h(at)g(time)d
Fm(t)p Fs(,)i(w)o(e)g(could)g(compute)g(the)g(exp)q(ected)f(v)m(alue)
164 1351 y(due)f(to)h(a)f(particular)g(p)q(olicy)g(b)o(y)f(simply)g
(\(if)g(somewhat)h(exp)q(ensiv)o(ely\))e(computing)h(the)164
1411 y(lik)o(eliho)q(o)q(d)16 b(of)i(b)q(eing)g(in)f(eac)o(h)g(state)h
(at)g(eac)o(h)f(no)q(de)h(of)g(the)g(tree)f(and)h(a)o(v)o(eraging)f
(the)164 1471 y(resulting)e(rew)o(ards.)22 b(F)l(or)16
b(p)q(olicy)f(tree)g Fm(p)p Fs(,)h(w)o(e)g(could)f(write)h(do)o(wn)g(a)
g(v)o(ector)f(of)h(v)m(alues,)164 1531 y Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\)[)p Fm(s)p Fs(],)c(with)h(one)g(comp)q(onen)o(t)e
(for)i(eac)o(h)f(state,)h(that)g(giv)o(es)f(the)h(exp)q(ected)e(v)m
(alue)164 1591 y(for)16 b(follo)o(wing)g(p)q(olicy)g
Fm(p)h Fs(if)e(our)i(initial)e(state)i(is)f Fm(s)p Fs(.)237
1652 y(Of)21 b(course,)g(w)o(e)g(don't)f(kno)o(w)h(our)h(starting)f
(state,)h(but)e(our)i(b)q(elief)d(state,)j Fm(b)p Fs(,)f(is)164
1712 y(exactly)13 b(the)h(information)f(w)o(e)h(need.)20
b(Because)13 b(of)i(the)e(linearit)o(y)g(of)h(exp)q(ected)f(v)m(alues,)
789 1780 y Fi(X)811 1867 y Fk(s)857 1822 y Fm(b)p Fs([)p
Fm(s)p Fs(])p Fd(v)m(alue)n Fs(\()p Fm(p)p Fs(\)[)p Fm(s)p
Fs(])529 b(\(10\))164 1960 y(giv)o(es)15 b(the)g(exp)q(ected)f(rew)o
(ard)h(for)h(tree)f Fm(p)g Fs(starting)h(from)f(b)q(elief)f(state)h
Fm(b)p Fs(.)21 b(It)15 b(com)o(bines)164 2020 y(the)d(probabilit)o(y)g
(of)h(b)q(eing)g(in)f(a)h(giv)o(en)f(state,)h Fm(s)p
Fs(,)g(with)f(the)h(exp)q(ected)e(rew)o(ard)i(w)o(e'd)f(get)164
2081 y(if)k(w)o(e)f(truly)h(started)h(in)f Fm(s)p Fs(.)21
b(Th)o(us,)16 b(for)g(an)o(y)h(initial)d(b)q(elief)i(state,)g
Fm(b)p Fs(,)f(w)o(e)h(can)g(compute)164 2141 y(the)g(v)m(alue)g(of)h
(executing)e(a)h(particular)g(p)q(olicy)g(tree)f Fm(p)p
Fs(.)237 2201 y(Notice)i(that)i(the)f(set)g(of)h(all)e
Fm(t)p Fs(-step)h(p)q(olicy)g(trees,)g Fn(P)1244 2208
y Fk(t)1258 2201 y Fs(,)h(is)f(\014nite)f(since)h(eac)o(h)g(tree)164
2261 y(has)f(a)g(\014nite)f(n)o(um)o(b)q(er)f(of)i(no)q(des)g(and)g
(there)f(are)h(a)g(\014nite)f(n)o(um)o(b)q(er)f(of)h(w)o(a)o(ys)h(of)g
(\014lling)164 2321 y(in)f(the)g(tree)f(with)i(action)f(decisions.)21
b(The)16 b(total)g(n)o(um)o(b)q(er)f(of)h Fm(t)p Fs(-step)h(p)q(olicy)e
(trees)h(is)795 2452 y Fn(jP)844 2459 y Fk(t)858 2452
y Fn(j)e Fs(=)g Fn(jAj)1011 2411 y Fa(\()p Fe(jO)q(j)1066
2400 y Fb(t)1080 2411 y Fe(\000)p Fa(1\))p 1010 2420
122 2 v 1029 2441 a Fe(jO)q(j\000)p Fa(1)1138 2452 y
Fm(:)949 2607 y Fs(16)p eop
%%Page: 17 17
17 16 bop 237 315 a Fs(Since)15 b(the)g(set)g Fn(P)557
322 y Fk(t)587 315 y Fs(is)h(\014nite,)e(w)o(e)h(can)h(c)o(ho)q(ose)g
(the)f(optimal)g Fm(t)p Fs(-step)g(p)q(olicy)g(tree)g(for)164
376 y Fm(b)h Fs(b)o(y)g(ev)m(aluating)g(Equation)h(10)g(for)f(ev)o(ery)
f(tree)h(and)g(c)o(ho)q(osing)i(the)e(b)q(est)g(one:)633
480 y Fm(p)657 459 y Fl(\003)691 480 y Fs(=)e(arg)c(max)825
509 y Fk(p)p Fl(2P)892 513 y Fb(t)921 438 y Fi(X)919
530 y Fk(s)p Fl(2S)991 480 y Fm(b)p Fs([)p Fm(s)p Fs(])p
Fd(v)m(alue)n Fs(\()p Fm(p)p Fs(\)[)p Fm(s)p Fs(])p Fm(:)164
621 y Fs(The)15 b(expression)497 588 y Fi(P)541 632 y
Fk(s)p Fl(2S)615 621 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fd(v)m(alue)n
Fs(\()p Fm(p)855 603 y Fl(\003)875 621 y Fs(\)[)p Fm(s)p
Fs(])f(giv)o(es)g(us)i(the)f(v)m(alue)g(of)g(the)g(optimal)f
Fm(t)p Fs(-step)164 682 y(p)q(olicy)l(.)25 b(Th)o(us,)18
b(if)f(w)o(e)g(let)g Fn(C)683 689 y Fk(t)716 682 y Fs(b)q(e)h(the)f
(set)h(of)g(v)o(ectors)f(corresp)q(onding)h(to)h(all)e(p)q(ossible)164
742 y(p)q(olicy)f(trees,)775 802 y Fn(C)801 809 y Fk(t)830
802 y Fs(=)899 760 y Fi([)882 852 y Fk(p)p Fl(2P)949
856 y Fb(t)970 802 y Fd(v)m(alue)o Fs(\()p Fm(p)p Fs(\))p
Fm(;)164 926 y Fs(then)g(w)o(e)g(can)g(write)g(the)g(optimal)f(v)m
(alue)h(function)g(for)g(time)e Fm(t)i Fs(as)675 1030
y Fm(V)703 1037 y Fk(t)718 1030 y Fs(\()p Fm(b)p Fs(\))e(=)g(max)848
1060 y Fk(\013)p Fl(2C)914 1064 y Fb(t)943 988 y Fi(X)942
1080 y Fk(s)p Fl(2S)1014 1030 y Fm(b)p Fs([)p Fm(s)p
Fs(])p Fm(\013)p Fs([)p Fm(s)p Fs(])p Fm(:)53 b Fc(2)424
b Fs(\(11\))237 1169 y(This)15 b(argumen)o(t)e(sho)o(ws)i(that)g(the)f
Fm(t)p Fs(-horizon)g(v)m(alue)g(function)g(is)g(piecewise-linear)164
1229 y(and)g(con)o(v)o(ex)f(and)h(also)g(pro)o(vides)f(us)h(with)g(an)g
(\(incredibly)e(ine\016cien)o(t\))f(algorithm)i(for)164
1289 y(solving)h(POMDP's.)20 b(A)14 b(more)f(sophisticated)h(algorithm)
f(will)f(b)q(e)j(presen)o(ted)e(in)g(later)164 1350 y(sections)h(that)h
(is)f(substan)o(tially)f(faster)i(for)f(some)g(problems)e(with)j
(\\simple")d(optimal)164 1410 y(v)m(alue)k(functions.)21
b(Ho)o(w)o(ev)o(er,)13 b(its)j(w)o(orst-case)g(b)q(ound)h(is)f(no)g(b)q
(etter)g(than)g(the)g(doubly)164 1470 y(exp)q(onen)o(tial)f(time)g
(metho)q(d)g(describ)q(ed)h(here.)237 1530 y(Here)h(is)g(some)g
(additional)h(notation)h(to)f(streamline)e(later)h(discussion.)26
b(First)18 b(of)164 1590 y(all,)13 b(in)h(linear)f(algebra,)i(a)f(dot)g
(pro)q(duct)h(is)e(the)h(sum)f(of)h(the)g(comp)q(onen)o(t)o(wise)e(pro)
q(duct)164 1650 y(of)21 b(t)o(w)o(o)g(v)o(ectors.)35
b(Th)o(us,)22 b(for)g(our)f(purp)q(oses,)i Fm(x)14 b
Fn(\001)g Fm(y)24 b Fs(=)1234 1617 y Fi(P)1278 1661 y
Fk(s)1304 1650 y Fm(x)p Fs([)p Fm(s)p Fs(])p Fm(y)r Fs([)p
Fm(s)p Fs(].)33 b(Secondly)l(,)21 b(w)o(e)164 1711 y(de\014ne)16
b(the)g(function)g Fd(b)r(est)f Fs(as)604 1815 y Fd(b)r(est)o
Fs(\()p Fm(b;)8 b Fn(X)f Fs(\))13 b(:=)h(arg)9 b(max)995
1844 y Fk(p)p Fl(2X)1084 1815 y Fm(b)i Fn(\001)g Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\))p Fm(:)164 1940 y Fs(That)21 b(is,)g(giv)o(en)e(a)
i(set)f(of)h(p)q(olicy)f(trees,)g Fn(X)7 b Fs(,)21 b(and)g(a)g(v)o
(ector)e Fm(b)p Fs(,)i Fd(b)r(est)o Fs(\()p Fm(b;)8 b
Fn(X)f Fs(\))20 b(returns)164 2000 y(the)i(p)q(olicy)g(tree)f(in)h(the)
g(set)h(whose)f(v)m(alue)h(v)o(ector)e(has)i(the)f(largest)g(dot)h(pro)
q(duct)164 2060 y(with)c Fm(b)p Fs(.)31 b(This)19 b(giv)o(es)g(us)h(an)
g(abbreviated)f(w)o(a)o(y)g(of)g(writing)h(Equation)f(11:)29
b Fm(V)1652 2067 y Fk(t)1667 2060 y Fs(\()p Fm(b)p Fs(\))19
b(=)164 2121 y Fm(b)11 b Fn(\001)g Fd(v)m(alue)o Fs(\()p
Fd(b)r(est)o Fs(\()p Fm(b;)d Fn(P)565 2128 y Fk(t)579
2121 y Fs(\)\).)237 2181 y(One)16 b(other)g(piece)f(of)i(notation)g
(is:)500 2285 y Fd(bac)n(k)q Fs(\()p Fm(\013;)8 b(a;)g(o)p
Fs(\)[)p Fm(s)p Fs(])13 b(=)889 2243 y Fi(X)906 2336
y Fk(s)922 2326 y Fe(0)958 2285 y Fm(\013)p Fs([)p Fm(s)1026
2264 y Fl(0)1037 2285 y Fs(])p Fm(T)7 b Fs([)p Fm(s;)h(a;)g(s)1217
2264 y Fl(0)1226 2285 y Fs(])p Fm(O)q Fs([)p Fm(s)1315
2264 y Fl(0)1327 2285 y Fm(;)g(a;)g(o)p Fs(])p Fm(:)164
2422 y Fs(Conceptually)l(,)21 b Fd(bac)n(k)g Fs(returns)f(a)h(v)o
(ector)f(that)h(consists)g(of)g(the)g(comp)q(onen)o(ts)f(of)h
Fm(\013)164 2482 y Fs(pro)s(jected)i(bac)o(kw)o(ards)h(one)g(step)g(b)o
(y)g(action)g Fm(a)f Fs(and)i(observ)m(ation)g Fm(o)p
Fs(.)44 b(It)24 b(is)g(used)949 2607 y(17)p eop
%%Page: 18 18
18 17 bop 164 315 a Fs(to)24 b(com)o(bine)e(p)q(olicy)h(trees)g
(together.)44 b(The)23 b(expression)h Fd(bac)n(k)p Fs(\()p
Fm(\013;)8 b(a;)g(o)p Fs(\)[)p Fm(s)p Fs(])23 b(can)h(b)q(e)164
376 y(in)o(terpreted)19 b(as)i(the)f(exp)q(ected)f(rew)o(ard)i(receiv)o
(ed)d(b)o(y)i(an)g(agen)o(t)h(that)g(tak)o(es)f(action)164
436 y Fm(a)j Fs(starting)g(in)g(state)h Fm(s)p Fs(,)g(observ)o(es)f
Fm(o)h Fs(and)f(then)g(pro)q(ceeds)h(using)f(the)g(p)q(olicy)g(tree)164
496 y(corresp)q(onding)18 b(to)g Fm(\013)p Fs(.)25 b(It)17
b(do)q(es)h(not)g(include)e(the)h(rew)o(ard)g(or)h(discoun)o(ting)f
(from)f(the)164 556 y(\014rst)g(step.)237 616 y(T)l(able)i(2)g(giv)o
(es)f(pseudo)q(co)q(de)i(for)f(computing)e Fd(b)r(est)h
Fs(and)h Fd(bac)n(k)p Fs(.)26 b(Note)17 b(that)h(ties)164
677 y(in)h Ff(best)f Fs(are)i(not)g(brok)o(en)f(arbitrarily)l(.)30
b(The)20 b(sym)o(b)q(ol)e(\\)p Fn(\037)p Fs(")i(is)g(in)o(tended)e(to)i
(denote)164 737 y(a)i(lexicographic)e(ordering)i(o)o(v)o(er)e(v)o
(ectors.)37 b(The)21 b(rationale)h(and)g(more)e(details)h(are)164
797 y(presen)o(ted)15 b(in)h(Section)g(7.5.)164 962 y
Ft(5)83 b(V)-7 b(alue)18 b(iteration)g(using)g(the)g(p)r(olicy)g(tree)g
(repre-)288 1054 y(sen)n(tation)164 1163 y Fs(This)g(section)g(describ)
q(es)g(the)g(basics)g(of)h(using)f(p)q(olicy)g(trees)g(as)h(the)e
(represen)o(tation)164 1223 y(of)g(v)m(alue)f(functions)g(in)g(v)m
(alue)g(iteration.)164 1367 y Fq(5.1)70 b(Prelimi)o(narie)o(s)164
1459 y Fs(Section)13 b(3)h(discussed)f(the)g(metho)q(d)g(of)h(v)m(alue)
f(iteration)g(for)h(solving)f(POMDP's)h(with-)164 1519
y(out)f(committing)d(to)j(ho)o(w)h(v)m(alue)e(functions)h(migh)o(t)e(b)
q(e)j(represen)o(ted.)k(The)13 b(p)q(olicy)g(tree)164
1579 y(represen)o(tation,)k(in)o(tro)q(duced)g(in)g(the)g(previous)g
(section,)g(can)h(b)q(e)f(used)h(in)f(the)g(v)m(alue)164
1640 y(iteration)f(computation)f(once)h(a)h(few)f(details)g(ha)o(v)o(e)
f(b)q(een)h(established.)237 1700 y(First,)c(there)g(are)h(t)o(w)o(o)f
(simple)e(impro)o(v)o(em)o(en)o(ts)f(that)k(can)g(b)q(e)f(made)g(to)g
(the)h(metho)q(d)164 1760 y(of)i(Section)g(4)g(to)g(simplify)d(the)j
(computation.)20 b(First)14 b(of)i(all,)e(not)h(all)f(the)h(p)q(olicy)f
(trees)164 1820 y(in)g Fn(P)254 1827 y Fk(t)282 1820
y Fs(corresp)q(ond)h(to)g(reasonable)f(strategies.)21
b(In)14 b(general,)g(only)g(a)g(small)f(fraction)h(of)164
1880 y(the)g Fd(v)m(alue)g Fs(v)o(ectors)g(for)g(the)h(p)q(olicy)e
(trees)i(in)f Fn(P)1053 1887 y Fk(t)1082 1880 y Fs(can)g(ev)o(er)g(con)
o(tribute)f(to)i(the)f(\\max")164 1941 y(in)19 b(Equation)g(11.)30
b(So)20 b(instead)f(of)g(considering)g(the)g(set)g(of)g
Fr(al)r(l)i Fm(t)p Fs(-step)d(p)q(olicy)h(trees,)164
2001 y(w)o(e)c(only)f(ev)o(er)g(w)o(ork)h(with)g Fn(V)701
2008 y Fk(t)729 2001 y Fn(\022)f(P)817 2008 y Fk(t)831
2001 y Fs(,)h(whic)o(h)g(is)g(a)g(minimal)d(set)j(of)g
Fm(t)p Fs(-step)g(p)q(olicy)f(trees)164 2061 y(for)i(represen)o(ting)g
Fm(V)542 2068 y Fk(t)557 2061 y Fs(.)237 2121 y(T)l(o)21
b(mak)o(e)e(this)h(more)g(precise,)g(w)o(e)g(call)f(a)i(p)q(olicy)f
(tree)g Fr(extr)n(ane)n(ous)h Fs(if)f(it)g(is)g(not)164
2181 y(needed)13 b(to)h(represen)o(t)f(the)h(optimal)e(v)m(alue)i
(function.)20 b(Figure)14 b(6)g(illustrates)f(the)h(three)164
2242 y(primary)k(w)o(a)o(ys)h(that)h(a)g(p)q(olicy)f(tree)g
Fm(p)899 2249 y Fj(2)939 2242 y Fs(migh)o(t)f(b)q(e)h(extraneous.)32
b(First)19 b(of)h(all)f(\(Fig-)164 2302 y(ure)d(6\(a\)\),)g(it)f(migh)o
(t)g(b)q(e)h(strictly)f(dominated)f(b)o(y)i(some)f(other)h(p)q(olicy)f
(tree)h(or)g(group)164 2362 y(of)21 b(p)q(olicy)g(trees.)35
b(That)22 b(is,)g(there)e(is)h(no)h(b)q(elief)d(state)j(at)f(whic)o(h)g
(that)g(p)q(olicy)g(tree)164 2422 y(is)f(the)g(b)q(est.)34
b(Secondly)20 b(\(Figure)f(6\(b\)\),)j(there)d(migh)o(t)g(b)q(e)h(only)
h(a)f(single)g(p)q(oin)o(t)h(or)164 2482 y(zero)d(area)h(region)f(at)g
(whic)o(h)g(it)g(is)g(not)g(dominated.)26 b(This)19 b(means)e(there)g
(is)h(a)h(b)q(elief)949 2607 y(18)p eop
%%Page: 19 19
19 18 bop 164 437 a Ff(best)o Fs(\()p Fm(b;)8 b Fn(X)f
Fs(\))15 b(:=)h Fn(f)257 497 y Fr(b)n(estp)n(ol)k Fs(:=)13
b Ff(nil)257 557 y Fr(b)n(estve)n(c)18 b Fs(:=)c([)p
Fn(\0001)p Fm(;)8 b Fn(\0001)p Fm(;)g(:)g(:)g(:)e(;)i
Fn(\0001)p Fs(])257 617 y Fr(b)n(estval)21 b Fs(:=)13
b Fn(\0001)257 677 y Fd(foreac)n(h)k Fr(p)n(ol)k Fd(in)16
b Fn(X)23 b(f)351 737 y Fr(ve)n(c)17 b Fs(:=)d Ff(value)n
Fs(\()p Fr(p)n(ol)5 b Fm(;)j Fn(M)p Fs(\))351 798 y Fr(val)20
b Fs(:=)13 b Fm(b)e Fn(\001)g Fr(ve)n(c)351 858 y Fd(if)16
b Fs(\(\()p Fr(val)k Fm(>)13 b Fr(b)n(estval)7 b Fs(\))16
b Fd(or)g Fs(\(\()p Fr(val)k Fs(=)14 b Fr(b)n(estval)6
b Fs(\))16 b Fd(and)h Fs(\()p Fr(ve)n(c)g Fn(\037)d Fr(b)n(estve)n(c)t
Fs(\)\)\))i Fn(f)444 918 y Fr(b)n(estp)n(ol)k Fs(:=)13
b Fr(p)n(ol)444 978 y(b)n(estve)n(c)18 b Fs(:=)c Fr(ve)n(c)444
1038 y(b)n(estval)21 b Fs(:=)13 b Fr(val)351 1099 y Fn(g)257
1159 y(g)257 1219 y Fd(return)j Fr(b)n(estp)n(ol)164
1279 y Fn(g)164 1400 y Ff(back)o Fs(\()p Fm(\013;)8 b(a;)g(o;)g
Fn(M)p Fs(\))15 b(:=)h Fn(f)257 1460 y Fs(Let)h Fm(\013)376
1442 y Fl(0)404 1460 y Fs(b)q(e)f(an)h(uninitialized)d
Fn(jS)t(j)p Fs(-v)o(ector)257 1520 y Fd(foreac)n(h)j
Fm(s)f Fd(in)g Fn(S)351 1580 y Fm(\013)382 1562 y Fl(0)394
1580 y Fs([)p Fm(s)p Fs(])d(:=)523 1547 y Fi(P)567 1591
y Fk(s)583 1581 y Fe(0)605 1580 y Fm(\013)p Fs([)p Fm(s)673
1562 y Fl(0)684 1580 y Fs(])p Fm(T)7 b Fs([)p Fm(s;)h(a;)g(s)864
1562 y Fl(0)874 1580 y Fs(])p Fm(O)q Fs([)p Fm(s)963
1562 y Fl(0)974 1580 y Fm(;)g(a;)g(o)p Fs(])257 1640
y Fd(return)16 b Fm(\013)460 1622 y Fl(0)164 1701 y Fn(g)164
1821 y Ff(value)n Fs(\()p Fm(p;)8 b Fn(M)p Fs(\))16 b(:=)g
Fn(f)257 1881 y Fd(if)g Fs(\()p Fd(v)m(alue)o Fs(\()p
Fm(p)p Fs(\))h(unde\014ned\))f Fn(f)351 1941 y Fm(a)d
Fs(:=)h Fd(action)o Fs(\()p Fm(p)p Fs(\))351 2001 y Fd(foreac)n(h)j
Fm(s)f Fd(in)g Fn(S)444 2062 y Fd(v)m(alue)o Fs(\()p
Fm(p)p Fs(\)[)p Fm(s)p Fs(])e(:=)f Fm(R)p Fs([)p Fm(s;)8
b(a)p Fs(])i(+)h Fm(\015)993 2028 y Fi(P)1037 2072 y
Fk(o)1065 2062 y Ff(back)n Fs(\()p Ff(value)n Fs(\()p
Fd(c)n(hoice)p Fs(\()p Fm(p;)d(o)p Fs(\))p Fm(;)g Fn(M)p
Fs(\))p Fm(;)1186 2122 y(a;)g(o;)g Fn(M)p Fs(\)[)p Fm(s)p
Fs(])257 2182 y Fn(g)257 2242 y Fd(return)16 b(v)m(alue)o
Fs(\()p Fm(p)p Fs(\))164 2302 y Fn(g)361 2458 y Fs(T)l(able)g(2:)22
b(Pseudo)q(co)q(de)17 b(to)g(compute)e Fd(b)r(est)p Fs(,)g
Fd(bac)n(k)p Fs(,)h(and)g Fd(v)m(alue)p Fs(.)949 2607
y(19)p eop
%%Page: 20 20
20 19 bop 148 266 a
 26049576 6512389 1118289 39863746 40126873 49665228 startTexFig
 148 266 a
%%BeginDocument: extraneous.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
22.5 663.98 134.44 663.98 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
J
19 680.43 137.57 694.53 2 L
J
19 680.43 22.72 680.88 2 L
0.5 H
N
[8.032 6.961] 8.032 I
22.72 680.88 133.85 694.09 2 L
N
J
133.85 694.09 137.57 694.53 2 L
N
J
135.09 682.92 22.5 708.48 2 L
3 H
N
2 19.2 Q
(0) 20.84 649.39 T
(1) 129.19 649.39 T
19 669.65 142.55 745.94 2 L
N
2 18 Q
(b) 70.59 643.36 T
4 14 Q
(v) 147.42 740.96 T
(a) 154.42 740.96 T
(l) 161.42 740.96 T
(u) 165.31 740.96 T
(e) 173.09 740.96 T
1 F
(p) 188.48 740.96 T
2 12 Q
(1) 196.01 734.86 T
0 14 Q
(\050) 182.47 740.96 T
(\051) 202.65 740.96 T
4 F
(v) 148.25 706.97 T
(a) 155.25 706.97 T
(l) 162.25 706.97 T
(u) 166.14 706.97 T
(e) 173.92 706.97 T
1 F
(p) 189.31 706.97 T
2 12 Q
(2) 196.84 700.87 T
0 14 Q
(\050) 183.3 706.97 T
(\051) 203.48 706.97 T
4 F
(v) 145.76 681.26 T
(a) 152.76 681.26 T
(l) 159.76 681.26 T
(u) 163.65 681.26 T
(e) 171.43 681.26 T
1 F
(p) 186.82 681.26 T
2 12 Q
(3) 194.35 675.16 T
0 14 Q
(\050) 180.81 681.26 T
(\051) 200.99 681.26 T
219.8 663.98 331.74 663.98 2 L
1 H
N
J
217.13 692.87 337.36 713.6 2 L
J
217.13 692.87 220.83 693.51 2 L
0.5 H
N
[7.247 6.281] 7.247 I
220.83 693.51 333.67 712.96 2 L
N
J
333.67 712.96 337.36 713.6 2 L
N
J
331.56 689.55 219.8 708.48 2 L
3 H
N
2 19.2 Q
(0) 218.14 649.39 T
(1) 326.49 649.39 T
216.3 669.65 339.85 745.94 2 L
N
2 18 Q
(b) 267.9 643.36 T
4 14 Q
(v) 344.72 740.96 T
(a) 351.72 740.96 T
(l) 358.72 740.96 T
(u) 362.61 740.96 T
(e) 370.4 740.96 T
1 F
(p) 385.78 740.96 T
2 12 Q
(1) 393.31 734.86 T
0 14 Q
(\050) 379.77 740.96 T
(\051) 399.96 740.96 T
4 F
(v) 345.55 706.97 T
(a) 352.55 706.97 T
(l) 359.55 706.97 T
(u) 363.44 706.97 T
(e) 371.23 706.97 T
1 F
(p) 386.61 706.97 T
2 12 Q
(2) 394.14 700.87 T
0 14 Q
(\050) 380.6 706.97 T
(\051) 400.79 706.97 T
4 F
(v) 343.06 681.26 T
(a) 350.06 681.26 T
(l) 357.06 681.26 T
(u) 360.95 681.26 T
(e) 368.74 681.26 T
1 F
(p) 384.12 681.26 T
2 12 Q
(3) 391.65 675.16 T
0 14 Q
(\050) 378.11 681.26 T
(\051) 398.3 681.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
417.11 665.64 529.05 665.64 2 L
1 H
N
528.86 691.21 417.11 710.14 2 L
3 H
N
2 19.2 Q
(0) 415.45 651.05 T
(1) 523.79 651.05 T
413.61 671.31 537.16 747.6 2 L
N
2 18 Q
(b) 465.2 645.02 T
4 14 Q
(v) 542.02 742.62 T
(a) 549.02 742.62 T
(l) 556.02 742.62 T
(u) 559.91 742.62 T
(e) 567.7 742.62 T
1 F
(p) 583.08 742.62 T
2 12 Q
(1) 590.61 736.52 T
0 14 Q
(\050) 577.08 742.62 T
(\051) 597.26 742.62 T
4 F
(v) 544.38 724.96 T
(a) 551.38 724.96 T
(l) 558.38 724.96 T
(u) 562.27 724.96 T
(e) 570.06 724.96 T
1 F
(p) 585.44 724.96 T
2 12 Q
(2) 592.97 718.86 T
0 14 Q
(\050) 579.43 724.96 T
(\051) 599.62 724.96 T
4 F
(v) 540.36 682.92 T
(a) 547.36 682.92 T
(l) 554.36 682.92 T
(u) 558.26 682.92 T
(e) 566.04 682.92 T
1 F
(p) 581.42 682.92 T
2 12 Q
(3) 588.96 676.82 T
0 14 Q
(\050) 575.42 682.92 T
(\051) 595.6 682.92 T
2 24 Q
(/) 603 738.52 T
(\050b\051) 261.91 609.83 T
(\050a\051) 62.12 609.83 T
(\050c\051) 465.85 609.83 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 164 780 a Fs(Figure)16 b(6:)21 b(Three)16 b(w)o(a)o(ys)g(in)f(whic)o
(h)h(a)g(p)q(olicy)g(tree)f Fm(p)1137 787 y Fj(2)1173
780 y Fs(can)i(b)q(e)f(extraneous:)21 b(\(a\))c(strict)164
840 y(domination,)e(\(b\))h(optimal)f(o)o(v)o(er)g(zero)h(area,)h
(\(c\))e(tied)h(with)g(existing)g(p)q(olicy)f(tree.)164
985 y(state)j(at)g(whic)o(h)e(that)i(p)q(olicy)f(tree)g(is)g(optimal)f
(but)i(some)f(other)g(p)q(olicy)g(tree)g(co)o(v)o(ers)164
1046 y(a)j(strictly)d(large)j(set)f(of)g(states.)31 b(Lastly)19
b(\(Figure)g(6\(c\)\),)g(it)g(migh)o(t)e(b)q(e)j(exactly)e(tied)164
1106 y(with)g(some)g(other)h(p)q(olicy)f(tree)g(since)g(it)g(is)g(p)q
(ossible)h(for)g(t)o(w)o(o)g(p)q(olicy)f(trees)g(to)h(ha)o(v)o(e)164
1166 y(the)f(same)g(v)o(ector)f(represen)o(tation)h(v)m(alue.)28
b(It)18 b(is)g(p)q(ossible)g(to)h(argue)g(that)g(ev)o(ery)e(set)164
1226 y(of)h(p)q(olicy)f(trees)h(that)g(con)o(tains)g(no)h(extraneous)f
(p)q(olicy)f(trees)g(is)h(of)g(minim)o(um)13 b(size.)164
1286 y(See)j(Section)f(6.1)i(for)f(a)h(few)f(more)f(details.)237
1346 y(Another)22 b(imp)q(ortan)o(t)g(impro)o(v)o(em)o(en)n(t)e(is)i
(the)h(metho)q(d)e(of)i(computing)f(a)h(p)q(olicy)164
1407 y(tree's)c(v)m(alue)g(v)o(ector.)30 b(As)20 b(it)f(is)g(describ)q
(ed)h(in)f(the)g(previous)h(section,)f(this)h(compu-)164
1467 y(tation)f(w)o(ould)f(in)o(v)o(olv)o(e)e(computing)h(exp)q(ected)g
(v)m(alues)h(o)o(v)o(er)f(the)h(en)o(tire)f(tree,)h(whic)o(h)164
1527 y(w)o(ould)d(tak)o(e)g(time)d(exp)q(onen)o(tial)j(in)g(its)f
(depth.)21 b(Instead,)15 b(w)o(e)g(can)g(construct)g(the)g(v)o(ec-)164
1587 y(tor)f(for)g Fm(p)g Fs(from)f(the)h(v)o(ectors)f(asso)q(ciated)i
(with)e Fm(p)p Fs('s)h(subtrees)1291 1569 y Fj(2)1311
1587 y Fs(.)20 b(This)14 b(is)g(accomplished)164 1647
y(as)j(follo)o(ws)f(\(using)h(the)f(notation)h(in)o(tro)q(duced)f(at)g
(the)g(end)g(of)h(Section)f(4\).)261 1757 y Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\)[)p Fm(s)p Fs(])d(=)h Fm(R)p Fs([)p
Fm(s;)8 b(a)p Fs(])i(+)h Fm(\015)797 1716 y Fi(X)818
1803 y Fk(o)865 1757 y Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o
Fs(\()p Fd(c)n(hoice)p Fs(\()p Fm(p;)d(o)p Fs(\)\))p
Fm(;)g(a;)g(o)p Fs(\)[)p Fm(s)p Fs(])p Fm(;)104 b Fs(\(12\))164
1899 y(where)18 b Fm(a)f Fs(:=)g Fd(action)p Fs(\()p
Fm(p)p Fs(\).)28 b(This)18 b(roughly)h(corresp)q(onds)h(to)e(the)g(sum)
g(of)h(eac)o(h)e(of)i(the)164 1959 y Fd(v)m(alue)o Fs(\()p
Fd(c)n(hoice)o Fs(\()p Fm(p;)8 b(o)p Fs(\)\))25 b(v)o(ectors)d(pro)s
(jected)h(bac)o(kw)o(ards)g(one)h(step)f(and)h(discoun)o(ted)164
2019 y(with)g(the)f(immediate)e(rew)o(ard)j(added)g(in.)44
b(The)24 b(deriv)m(ation)f(of)i(this)e(is)h(giv)o(en)f(in)164
2079 y(Section)16 b(7.3.)21 b(Pseudo)q(co)q(de)d(app)q(ears)f(in)f(T)l
(able)g(2.)237 2139 y(Since)g(the)h Fm(t)p Fs(-step)g(p)q(olicy)g
(trees)g(are)g(constructed)g(from)f Fm(t)c Fn(\000)f
Fs(1-step)18 b(p)q(olicy)e(trees)164 2200 y(and)21 b(some)f(of)h(the)f
Fm(t)13 b Fn(\000)h Fs(1-step)21 b(p)q(olicy)f(trees)g(ha)o(v)o(e)g(b)q
(een)h(thro)o(wn)g(a)o(w)o(a)o(y)l(,)f(a)h(natural)164
2260 y(question)j(is)f(whether)h(an)o(y)g(of)g(the)f(p)q(olicy)g(trees)
h(that)g(ha)o(v)o(e)f(b)q(een)h(thro)o(wn)g(a)o(w)o(a)o(y)164
2320 y(migh)o(t)15 b(b)q(e)j(needed)e(later)h(on.)24
b(The)17 b(answ)o(er)h(to)f(this)g(is)g(no.)24 b(The)18
b(only)e(w)o(a)o(y)h(it)g(w)o(ould)p 164 2364 648 2 v
220 2394 a Fh(2)239 2409 y Fo(As)e(long)f(as)h(these)i(quan)o(tities)d
(are)i(cac)o(hed,)f(i.e.)21 b(dynamic)13 b(programming)f(is)j(used,)g
(this)g(com-)164 2459 y(putation)e(is)h(extremely)g(e\016cien)o(t.)949
2607 y Fs(20)p eop
%%Page: 21 21
21 20 bop 164 315 a Fs(mak)o(e)14 b(sense)i(to)g(use)g(a)g(particular)g
Fm(t)9 b Fn(\000)h Fs(1-step)17 b(p)q(olicy)e(tree)g(in)h(the)f
(construction)h(of)h(a)164 376 y Fm(t)p Fs(-step)c(p)q(olicy)f(tree)g
(is)g(if)g(there)h(w)o(ould)f(b)q(e)h Fr(some)g Fs(b)q(elief)f(state)h
(for)g(whic)o(h)f(the)g Fm(t)t Fn(\000)t Fs(1-step)164
436 y(p)q(olicy)17 b(tree)g(is)h(optimal)e(\(i.e.,)g(if)h(the)h(p)q
(olicy)f(tree)g(is)h(not)g(extraneous\).)26 b(Otherwise,)164
496 y(it)15 b(w)o(ould)h(b)q(e)g(b)q(etter)f(to)h(transfer)g(con)o
(trol)f(to)h(the)f(b)q(etter)h Fm(t)9 b Fn(\000)h Fs(1-step)16
b(p)q(olicy)f(tree.)20 b(So)164 556 y(if)c(a)g(p)q(olicy)g(tree)f(is)i
(deemed)d(extraneous,)i(it)f(will)h(nev)o(er)f(b)q(e)h(needed)g(again.)
164 701 y Fq(5.2)70 b(Computing)34 b(an)j(optimal)c(p)r(olicy)h(tree)h
(for)i(a)f(b)r(elief)321 775 y(state)164 868 y Fs(Equation)16
b(12)g(can)f(b)q(e)h(used)f(to)h(generate)f(a)g(sup)q(erset)h(of)g(the)
f(non-extraneous)h Fm(t)p Fs(-step)164 928 y(p)q(olicy)11
b(trees)f(b)o(y)h(considering)g(all)g(p)q(ossible)h(com)o(binations)e
(of)h(the)g(non-extraneous)i Fm(t)q Fn(\000)164 988 y
Fs(1-step)h(p)q(olicy)f(trees.)19 b(The)14 b(extraneous)f
Fm(t)p Fs(-step)h(p)q(olicy)e(trees)h(that)h(are)f(generated)h(can)164
1048 y(then)g(b)q(e)g(iden)o(ti\014ed)e(and)j(remo)o(v)o(ed)c(using)j
(the)g(tec)o(hniques)e(discussed)i(in)g(Section)f(7.4.)164
1109 y(This)19 b(approac)o(h,)g(\014rst)g(in)o(tro)q(duced)g(b)o(y)f
(Monahan)1142 1105 y([)1155 1109 y(Monahan,)i(1982)1483
1105 y(])1499 1109 y(,)e(can)h(b)q(e)g(v)o(ery)164 1169
y(e\016cien)o(t)14 b(when)j(the)f(n)o(um)o(b)q(er)e(of)j(observ)m
(ations)g(is)f(small.)237 1229 y(T)l(o)k(\014nd)f(the)g(minim)o(al)d
(represen)o(tation)i(of)i(the)e Fm(t)p Fs(-step)h(v)m(alue)g(function,)
g(a)g(more)164 1289 y(imp)q(ortan)o(t)i(task)i(is)f(to)h(construct,)g
(from)e(the)h(set)h(of)f(non-extraneous)i Fm(t)14 b Fn(\000)h
Fs(1-step)164 1349 y(p)q(olicies,)g Fn(V)381 1356 y Fk(t)p
Fl(\000)p Fj(1)440 1349 y Fs(,)h(the)g(optimal)f Fm(t)p
Fs(-step)i(p)q(olicy)e(tree)h(for)h(a)f(giv)o(en)g(b)q(elief)f(state,)h
Fm(b)p Fs(.)22 b(W)l(e'll)164 1409 y(call)c(this)h Fm(t)p
Fs(-step)g(p)q(olicy)f(tree)g Fm(p)764 1391 y Fl(\003)803
1409 y Fs(and)i(it)e(is)h(optimal)e(for)i(at)h(least)e(one)h(b)q(elief)
f(state.)164 1470 y(Ho)o(w)o(ev)o(er,)11 b(b)q(ecause)i(man)o(y)e(p)q
(olicy)h(trees)g(migh)o(t)e(b)q(e)j(equally)e(go)q(o)q(d)k(from)c(a)i
(giv)o(en)f Fm(b)p Fs(,)g(w)o(e)164 1530 y(need)17 b(to)h(tak)o(e)f(sp)
q(ecial)g(care)g(to)h(ensure)f(that)h(the)f Fm(p)1141
1512 y Fl(\003)1179 1530 y Fs(generated)g(is)g(not)h(extraneous.)164
1590 y(Section)e(7.5)g(discusses)h(this)f(issue)g(in)g(more)f(detail.)
237 1650 y(One)j(metho)q(d)g(for)h(\014nding)g Fm(p)788
1632 y Fl(\003)827 1650 y Fs(is)f(\014rst)h(to)g(consider)f(the)g(p)q
(olicy)g(tree)g Fm(p)1591 1657 y Fk(a)1631 1650 y Fs(de\014ned)164
1710 y(to)j(b)q(e)f(the)g(p)q(olicy)f(that)i(tak)o(es)f(action)g
Fm(a)g Fs(from)f(b)q(elief)g(state)i Fm(b)f Fs(and)h(then)f(pro)q
(ceeds)164 1771 y(optimally)c(thereafter.)28 b(By)18
b(de\014nition,)g Fd(action)p Fs(\()p Fm(p)1138 1778
y Fk(a)1159 1771 y Fs(\))g(=)g Fm(a)p Fs(.)27 b(Then,)19
b(after)g(observing)164 1831 y Fm(o)p Fs(,)e(the)f(agen)o(t)h(w)o(ould)
f(b)q(e)h(in)f(b)q(elief)g(state)h Fm(b)972 1813 y Fl(0)972
1843 y Fk(a;o)1019 1831 y Fs(,)f(sa)o(y)l(,)g(and)i(so)f(should)g
(follo)o(w)f(the)h Fm(t)10 b Fn(\000)i Fs(1)164 1891
y(step)18 b(p)q(olicy)f(tree)h Fd(c)n(hoice)o Fs(\()p
Fm(p)705 1898 y Fk(a)727 1891 y Fm(;)8 b(o)p Fs(\))17
b(=)g Fd(b)r(est)o Fs(\()p Fm(b)1005 1873 y Fl(0)1005
1903 y Fk(a;o)1052 1891 y Fm(;)8 b Fn(V)1105 1898 y Fk(t)p
Fl(\000)p Fj(1)1164 1891 y Fs(\))18 b(thereafter.)26
b(By)18 b(substituting)164 1951 y(and)f(rearranging,)f(w)o(e)g(\014nd)h
(that:)209 2061 y Fd(c)n(hoice)p Fs(\()p Fm(p)401 2068
y Fk(a)422 2061 y Fm(;)8 b(o)p Fs(\))42 b(=)f Fd(b)r(est)o
Fs(\()p Fm(b)749 2041 y Fl(0)749 2074 y Fk(a;o)797 2061
y Fm(;)8 b Fn(V)850 2068 y Fk(t)p Fl(\000)p Fj(1)909
2061 y Fs(\))528 2134 y(=)41 b(arg)28 b(max)684 2164
y Fk(p)702 2155 y Fe(0)713 2164 y Fl(2V)759 2169 y Fb(t)p
Fe(\000)p Fa(1)820 2134 y Fm(b)841 2113 y Fl(0)841 2146
y Fk(a;o)899 2134 y Fn(\001)11 b Fd(v)m(alue)o Fs(\()p
Fm(p)1093 2113 y Fl(0)1105 2134 y Fs(\))528 2239 y(=)41
b(arg)28 b(max)684 2269 y Fk(p)702 2259 y Fe(0)713 2269
y Fl(2V)759 2274 y Fb(t)p Fe(\000)p Fa(1)820 2197 y Fi(X)836
2290 y Fk(s)852 2280 y Fe(0)888 2239 y Fm(b)909 2218
y Fl(0)909 2251 y Fk(a;o)956 2239 y Fs([)p Fm(s)993 2218
y Fl(0)1004 2239 y Fs(])p Fd(v)m(alue)o Fs(\()p Fm(p)1187
2218 y Fl(0)1199 2239 y Fs(\)[)p Fm(s)1255 2218 y Fl(0)1266
2239 y Fs(])528 2381 y(=)41 b(arg)28 b(max)684 2412 y
Fk(p)702 2402 y Fe(0)713 2412 y Fl(2V)759 2417 y Fb(t)p
Fe(\000)p Fa(1)820 2340 y Fi(X)836 2432 y Fk(s)852 2423
y Fe(0)893 2348 y Fs(\()p Fm(O)q Fs([)p Fm(s)987 2330
y Fl(0)999 2348 y Fm(;)8 b(a;)g(o)p Fs(])1114 2314 y
Fi(P)1157 2358 y Fk(s)1184 2348 y Fm(T)f Fs([)p Fm(s;)h(a;)g(s)1350
2330 y Fl(0)1359 2348 y Fs(])p Fm(b)p Fs([)p Fm(s)p Fs(]\))f
Fd(v)m(alue)o Fs(\()p Fm(p)1640 2330 y Fl(0)1652 2348
y Fs(\)[)p Fm(s)1708 2330 y Fl(0)1719 2348 y Fs(])p 893
2370 841 2 v 1215 2415 a(Pr\()p Fm(o)p Fn(j)p Fm(a;)h(b)p
Fs(\))949 2607 y(21)p eop
%%Page: 22 22
22 21 bop 528 315 a Fs(=)41 b(arg)28 b(max)684 346 y
Fk(p)702 336 y Fe(0)713 346 y Fl(2V)759 351 y Fb(t)p
Fe(\000)p Fa(1)820 274 y Fi(X)841 361 y Fk(s)888 315
y Fm(b)p Fs([)p Fm(s)p Fs(])968 274 y Fi(X)983 366 y
Fk(s)999 357 y Fe(0)1035 315 y Fm(O)q Fs([)p Fm(s)1110
295 y Fl(0)1122 315 y Fm(;)8 b(a;)g(o)p Fs(])p Fm(T)f
Fs([)p Fm(s;)h(a;)g(s)1395 295 y Fl(0)1404 315 y Fs(])p
Fd(v)m(alue)o Fs(\()p Fm(p)1587 295 y Fl(0)1599 315 y
Fs(\)[)p Fm(s)1655 295 y Fl(0)1666 315 y Fs(])528 426
y(=)41 b(arg)28 b(max)684 456 y Fk(p)702 447 y Fe(0)713
456 y Fl(2V)759 461 y Fb(t)p Fe(\000)p Fa(1)820 426 y
Fm(b)10 b Fn(\001)h Fd(bac)n(k)q Fs(\()p Fd(v)m(alue)n
Fs(\()p Fm(p)1175 406 y Fl(0)1188 426 y Fs(\))p Fm(;)d(a;)g(o)p
Fs(\))528 524 y(=)41 b Fd(b)r(est)o Fs(\()p Fm(b;)8 b
Fn(f)p Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)1095
504 y Fl(0)1107 524 y Fs(\))p Fm(;)g(a;)g(o)p Fs(\))14
b(:)f Fm(p)1303 504 y Fl(0)1329 524 y Fn(2)h(V)1407 531
y Fk(t)p Fl(\000)p Fj(1)1466 524 y Fn(g)p Fs(\))p Fm(:)172
b Fs(\(13\))164 626 y(This)19 b(sa)o(ys)h(that,)g(after)f(taking)g
(action)h Fm(a)e Fs(and)i(making)e(observ)m(ation)i Fm(o)g
Fs(from)e(b)q(elief)164 686 y(state)c Fm(b)p Fs(,)f(an)h(agen)o(t)g
(should)g(c)o(ho)q(ose)g(the)g Fm(t)6 b Fn(\000)g Fs(1-step)13
b(p)q(olicy)g(tree,)g Fm(p)1392 668 y Fl(0)1404 686 y
Fs(,)h(whose)g(v)m(alue)f(pro-)164 746 y(jected)g(bac)o(kw)o(ards)i
(one)g(step)f(has)h(the)f(largest)h(dot)g(pro)q(duct)g(with)f
Fm(b)p Fs(.)21 b(The)14 b(bac)o(kw)o(ard)164 806 y(pro)s(jection)j(is)h
(needed)f(to)h(allo)o(w)f(us)h(to)g(compare)f Fm(b)p
Fs(,)g(a)h Fm(t)p Fs(-step)f(b)q(elief)g(state,)h(with)f
Fm(p)1757 788 y Fl(0)1769 806 y Fs(,)164 866 y(a)g Fm(t)10
b Fn(\000)h Fs(1-step)17 b(p)q(olicy)f(tree.)237 927
y(No)o(w)h(w)o(e'v)o(e)f(de\014ned)h Fm(p)675 934 y Fk(a)713
927 y Fs(for)h(eac)o(h)e Fm(a)p Fs(,)h(where)g Fm(p)1122
934 y Fk(a)1160 927 y Fs(represen)o(ts)g(the)g(optimal)f(p)q(olicy)164
987 y(tree)h(to)i(c)o(ho)q(ose)g(from)e Fm(b)h Fs(giv)o(en)f(that)i
Fm(a)e Fs(is)h(the)g(\014rst)h(action.)27 b(Then)18 b
Fm(p)1482 969 y Fl(\003)1502 987 y Fs(,)g(the)g(optimal)164
1047 y(p)q(olicy)e(tree)f(to)i(tak)o(e)e(starting)i(from)e
Fm(b)p Fs(,)h(is)g(simply)e(the)i(b)q(est)h(of)f(the)g
Fm(p)1475 1054 y Fk(a)1513 1047 y Fs(p)q(olicy)f(trees,)689
1148 y Fm(p)713 1128 y Fl(\003)747 1148 y Fs(=)f Fd(b)r(est)o
Fs(\()p Fm(b;)8 b Fn(f)p Fm(p)1012 1155 y Fk(a)1047 1148
y Fs(:)13 b Fm(a)h Fn(2)g(Ag)p Fs(\))p Fm(:)237 1250
y Fs(The)g(pseudo)q(co)q(de)h(in)f(T)l(able)g(3)g(returns)h
Fm(p)1009 1257 y Fk(a)1030 1250 y Fs(,)f(an)g(optimal)f
Fm(t)p Fs(-step)h(p)q(olicy)f(tree)h(giv)o(en)164 1310
y(an)22 b(initial)e(action,)i Fm(a)p Fs(,)g(and)h(b)q(elief)d(state,)i
Fm(b)p Fs(.)37 b(T)l(o)22 b(a)o(v)o(oid)f(constructing)h(extraneous)164
1370 y(p)q(olicy)15 b(trees,)f(ties)h(are)h(brok)o(en)f(in)g(a)h(sligh)
o(tly)e(un)o(usual)i(w)o(a)o(y)l(.)k(See)15 b(Section)g(7.5)h(for)f(an)
164 1430 y(explanation.)164 1596 y Ft(6)83 b(The)27 b(witness)f
(algorithm)164 1705 y Fs(This)21 b(section)f(dev)o(elops)f(an)i(exact)f
(algorithm)g(for)g(p)q(erforming)g(v)m(alue)g(iteration)g(in)164
1765 y(POMDP)f(problems.)29 b(The)20 b(name)e(\\witness")i(comes)d
(from)i(the)g(tec)o(hnique)e(w)o(e)i(use)164 1826 y(for)d(determining)e
(when)j(w)o(e)f(ha)o(v)o(e)f(an)i(exact)f(represen)o(tation)f(of)i(a)f
(v)m(alue)g(function.)164 1969 y Fq(6.1)70 b(Basic)22
b(approac)n(h)164 2061 y Fs(A)17 b(single)g(step)h(of)g(v)m(alue)f
(iteration)g(in)o(v)o(olv)o(es)f(taking)h(a)h(represen)o(tation)f(of)h
Fm(V)1626 2068 y Fk(t)p Fl(\000)p Fj(1)1704 2061 y Fs(and)164
2121 y(a)h(POMDP)g(mo)q(del,)f Fn(M)p Fs(,)h(and)g(returning)g(a)g
(represen)o(tation)f(for)i Fm(V)1451 2128 y Fk(t)1466
2121 y Fs(.)29 b(As)18 b(describ)q(ed)164 2181 y(in)f(the)g(previous)g
(section,)g(w)o(e)g(can)h(represen)o(t)e(b)q(oth)j Fm(V)1200
2188 y Fk(t)p Fl(\000)p Fj(1)1278 2181 y Fs(and)f Fm(V)1402
2188 y Fk(t)1434 2181 y Fs(using)g(collections)164 2242
y(of)24 b(p)q(olicy)e(trees,)j(whic)o(h)d(w)o(e'll)g(write)h(as)h
Fn(V)1013 2249 y Fk(t)p Fl(\000)p Fj(1)1096 2242 y Fs(and)g
Fn(V)1229 2249 y Fk(t)1243 2242 y Fs(,)h(resp)q(ectiv)o(ely)l(.)40
b(Although)164 2302 y(these)17 b(represen)o(tations)g(are)h(not)g
(necessarily)e(unique,)h(as)h(long)g(as)g(they)f(con)o(tain)g(no)164
2362 y(extraneous)d(p)q(olicy)g(trees)f(they)h(are)g(guaran)o(teed)h
(to)f(b)q(e)g(of)h(minim)n(um)10 b(size.)20 b(This)14
b(can)164 2422 y(b)q(e)i(sho)o(wn)h(using)g(a)f(fairly)f(straigh)o
(tforw)o(ard)i(application)f(of)h(matroid)e(theory)h(but)g(is)164
2482 y(b)q(ey)o(ond)g(the)g(scop)q(e)h(of)g(this)f(pap)q(er.)949
2607 y(22)p eop
%%Page: 23 23
23 22 bop 164 772 a Ff(besttree)m Fs(\()p Fm(b;)8 b(a;)g
Fn(V)510 779 y Fk(t)p Fl(\000)p Fj(1)568 772 y Fm(;)g
Fn(M)p Fs(\))16 b(:=)g Fn(f)257 833 y Fs(Let)h Fm(p)369
815 y Fl(\003)405 833 y Fs(b)q(e)g(a)f(new)h(p)q(olicy)e(tree)257
893 y Fd(action)p Fs(\()p Fm(p)p Fn(\003)p Fs(\))f(:=)g
Fm(a)257 953 y Fd(foreac)n(h)j Fm(o)g Fd(in)f Fn(O)h(f)351
1013 y Fr(b)n(estp)n(ol)494 992 y Fl(0)520 1013 y Fs(:=)c
Fn(fg)351 1073 y Fr(b)n(estve)n(c)497 1052 y Fl(0)523
1073 y Fs(:=)g([)p Fn(\0001)p Fm(;)8 b Fn(\0001)p Fm(;)g(:)g(:)g(:)e(;)
i Fn(\0001)p Fs(])351 1134 y Fr(b)n(estval)20 b Fs(:=)13
b Fn(\0001)351 1194 y Fd(foreac)n(h)k Fr(p)n(ol)607 1172
y Fl(0)635 1194 y Fd(in)f Fn(V)729 1201 y Fk(t)p Fl(\000)p
Fj(1)805 1194 y Fn(f)444 1254 y Fr(ve)n(c)512 1236 y
Fl(0)538 1254 y Fs(:=)d Ff(back)n Fs(\()p Ff(value)o
Fs(\()p Fr(p)n(ol)936 1232 y Fl(0)948 1254 y Fm(;)8 b
Fn(M)p Fs(\))p Fm(;)g(a;)g(o;)g Fn(M)p Fs(\))444 1314
y Fr(val)20 b Fs(:=)14 b Fm(b)c Fn(\001)h Fr(ve)n(c)713
1296 y Fl(0)444 1374 y Fd(if)16 b Fs(\(\()p Fr(val)k
Fm(>)14 b Fr(b)n(estval)6 b Fs(\))16 b Fd(or)h Fs(\(\()p
Fr(val)i Fs(=)14 b Fr(b)n(estval)7 b Fs(\))16 b Fd(and)h
Fs(\()p Fr(ve)n(c)1447 1356 y Fl(0)1473 1374 y Fn(\037)c
Fr(b)n(estve)n(c)1671 1353 y Fl(0)1683 1374 y Fs(\)\)\))j
Fn(f)538 1435 y Fr(b)n(estp)n(ol)681 1413 y Fl(0)707
1435 y Fs(:=)d Fr(p)n(ol)837 1413 y Fl(0)538 1495 y Fr(b)n(estve)n(c)
684 1473 y Fl(0)709 1495 y Fs(:=)h Fr(ve)n(c)842 1477
y Fl(0)538 1555 y Fr(b)n(estval)20 b Fs(:=)13 b Fr(val)444
1615 y Fn(g)351 1675 y(g)351 1735 y Fd(c)n(hoice)o Fs(\()p
Fm(p)542 1717 y Fl(\003)563 1735 y Fm(;)8 b(o)p Fs(\))14
b(:=)f Fr(b)n(estp)n(ol)849 1714 y Fl(0)257 1796 y Fn(g)257
1856 y Fd(return)j Fm(p)453 1838 y Fl(\003)164 1916 y
Fn(g)164 2072 y Fs(T)l(able)d(3:)20 b(Algorithm)11 b(to)j(return)f(the)
g(b)q(est)g(p)q(olicy)g(tree)f(starting)i(with)f(a)h(giv)o(en)e(action)
164 2132 y(for)k(a)h(b)q(elief)e(state.)949 2607 y(23)p
eop
%%Page: 24 24
24 23 bop 237 315 a Fs(There)19 b(are)g(t)o(w)o(o)g(classical)f(w)o(a)o
(ys)h(of)h(generating)f Fn(V)1202 322 y Fk(t)1216 315
y Fs(.)30 b(The)19 b(\014rst)h(in)o(v)o(olv)o(es)d(gener-)164
376 y(ating)22 b(a)f(sup)q(erset)h(of)f(the)g(p)q(olicy)f(trees,)i
Fn(V)1005 355 y Fj(+)1001 386 y Fk(t)1034 376 y Fs(,)g(and)g(then)f
(deleting)f(those)h(that)h(are)164 436 y(extraneous)414
432 y([)428 436 y(Monahan,)h(1982,)f(Eagle,)g(1984)1044
432 y(])1059 436 y(.)36 b(The)21 b(pro)q(cess)g(for)h(deleting)e
(extra-)164 496 y(neous)i(trees)g(is)g(describ)q(ed)f(in)g(Section)h
(7.4.)38 b(Regardless)22 b(of)g(the)g(true)g(size)f(of)h
Fn(V)1755 503 y Fk(t)1769 496 y Fs(,)164 556 y(algorithms)d(based)i(on)
g(this)f(approac)o(h)h(will)e(generate)h(an)h(exp)q(onen)o(tial)e(\(in)
h Fn(jV)1691 563 y Fk(t)p Fl(\000)p Fj(1)1750 556 y Fn(j)p
Fs(\))164 616 y(n)o(um)o(b)q(er)14 b(of)j(p)q(olicy)f(trees.)237
677 y(Another)22 b(class)f(of)h(algorithms)f(w)o(ork)h(with)g(the)f
(set)1280 664 y(^)1274 677 y Fn(V)1305 684 y Fk(t)1342
677 y Fn(\022)i(V)1435 684 y Fk(t)1471 677 y Fs(and)f(searc)o(h)g(for)
164 737 y(p)q(olicy)14 b(trees)g(in)g Fn(V)507 744 y
Fk(t)529 737 y Fn(\000)581 724 y Fs(^)575 737 y Fn(V)606
744 y Fk(t)620 737 y Fs(.)21 b(That)15 b(is,)f(they)g(build)g(up)g(to)h
Fn(V)1224 744 y Fk(t)1253 737 y Fs(one)f(p)q(olicy)g(tree)g(at)h(a)g
(time.)164 797 y(These)24 b(approac)o(hes)h(are)g(sometime)o(s)d
(called)h Fr(r)n(elaxe)n(d)i(r)n(e)n(gion)g(algorithms)1620
793 y Fs([)1634 797 y(Cheng,)164 857 y(1988)260 853 y(])295
857 y(b)q(ecause)20 b(the)f(v)o(ectors)g(corresp)q(onding)i(to)f(the)g
(p)q(olicy)f(trees)g(in)1537 845 y(^)1531 857 y Fn(V)1562
864 y Fk(t)1596 857 y Fs(partition)164 917 y(b)q(elief)e(space)h(in)o
(to)g(regions)g(that)g(constitute)g(a)g(relaxation)g(\(a)g(form)f(of)i
(appro)o(xima-)164 978 y(tion\))g(of)h(the)f(regions)h(corresp)q
(onding)g(to)g(the)f(true)g Fm(V)1201 985 y Fk(t)1235
978 y Fs(function.)30 b(The)20 b(algorithms)164 1038
y(w)o(ork)15 b(b)o(y)g(extending)f(the)h(set)735 1025
y(^)729 1038 y Fn(V)760 1045 y Fk(t)789 1038 y Fs(with)g
(non-extraneous)h(p)q(olicy)f(trees)g(un)o(til)f(no)h(more)164
1098 y(exist)g(at)i(whic)o(h)f(p)q(oin)o(t)g Fn(V)637
1105 y Fk(t)665 1098 y Fs(=)723 1085 y(^)717 1098 y Fn(V)748
1105 y Fk(t)778 1098 y Fs(and)h(the)f(algorithms)g(can)g(terminate.)237
1158 y(The)21 b(earlier)e(algorithms)g(that)i(follo)o(w)f(this)h
(approac)o(h)1309 1154 y([)1322 1158 y(Cheng,)h(1988,)f(Sondik,)164
1218 y(1971)260 1214 y(])291 1218 y(ha)o(v)o(e)14 b(w)o(orst-case)i
(running)g(times)e(that)i(are)f(exp)q(onen)o(tial)g(in)g(the)g(size)g
(of)h Fn(V)1710 1225 y Fk(t)p Fl(\000)p Fj(1)1769 1218
y Fs(.)164 1279 y(There)c(is)f(some)g(reason)i(to)f(b)q(eliev)o(e)e
(that)i(this)g(is)g(a)g(necessary)g(feature)f(of)i(this)e(problem)164
1339 y(\(see)16 b(Section)g(7.1\).)237 1399 y(In)h(this)h(section)f(w)o
(e)f(tak)o(e)h(a)h(sligh)o(tly)e(di\013eren)o(t)h(approac)o(h.)25
b(Instead)18 b(of)f(building)164 1459 y(up)c(a)g(represen)o(tation)g
(of)g Fm(V)664 1466 y Fk(t)692 1459 y Fs(directly)l(,)f(w)o(e)g
(\014rst)h(\014nd)h(a)f(collection)e(of)j(p)q(olicy)e(trees)g(that)164
1519 y(represen)o(ts)i Fm(Q)431 1501 y Fk(a)431 1532
y(t)452 1519 y Fs(,)h(for)g(eac)o(h)g Fm(a)f Fn(2)g(A)p
Fs(.)20 b(These)c Fm(Q)p Fs(-functions)f(are)g(de\014ned)g(analogously)
i(to)164 1579 y(the)c Fm(Q)p Fs(-functions)h(of)f(W)l(atkins)749
1575 y([)762 1579 y(W)l(atkins,)h(1989)1061 1575 y(])1076
1579 y(|the)f(expression)g Fm(Q)1477 1561 y Fk(a)1477
1592 y(t)1498 1579 y Fs(\()p Fm(b)p Fs(\))g(represen)o(ts)164
1640 y(the)k(exp)q(ected)g(rew)o(ard)h(for)g(taking)g(action)g
Fm(a)f Fs(from)g(b)q(elief)f(state)i Fm(b)g Fs(and)g(then)g(acting)164
1700 y(optimally)c(for)j(the)f(the)g(remaining)e Fm(t)d
Fn(\000)g Fs(1)16 b(steps.)237 1760 y(More)g(formally)l(,)e(w)o(e)i
(can)g(write)478 1865 y Fm(Q)517 1845 y Fk(a)517 1878
y(t)538 1865 y Fs(\()p Fm(b)p Fs(\))d(=)662 1824 y Fi(X)684
1911 y Fk(s)730 1865 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p
Fs([)p Fm(s;)8 b(a)p Fs(])h(+)i Fm(\015)1033 1824 y Fi(X)1054
1911 y Fk(o)1101 1865 y Fs(Pr\()p Fm(o)p Fn(j)p Fm(a;)d(b)p
Fs(\))p Fm(V)1325 1872 y Fk(t)p Fl(\000)p Fj(1)1385 1865
y Fs(\()p Fm(b)1425 1845 y Fl(0)1436 1865 y Fs(\))p Fm(;)227
b Fs(\(14\))164 2001 y(where)20 b Fm(b)330 1983 y Fl(0)362
2001 y Fs(is)g(the)h(b)q(elief)e(state)i(resulting)f(from)f(taking)i
(action)g Fm(a)f Fs(and)h(observing)f Fm(o)164 2061 y
Fs(from)g(b)q(elief)f(state)i Fm(b)p Fs(.)34 b(Since)20
b Fm(V)32 b Fs(is)20 b(de\014ned)g(to)h(b)q(e)g(the)g(v)m(alue)f(of)h
(the)f(b)q(est)h(action,)164 2121 y(w)o(e)d(ha)o(v)o(e)h
Fm(V)382 2128 y Fk(t)397 2121 y Fs(\()p Fm(b)p Fs(\))f(=)g(max)621
2128 y Fk(a)650 2121 y Fm(Q)689 2103 y Fk(a)689 2134
y(t)709 2121 y Fs(\()p Fm(b)p Fs(\).)29 b(This)19 b(follo)o(ws)g
(directly)e(from)h(the)h(v)m(alue)f(iteration)164 2181
y(equation,)e(Equation)g(4.)237 2242 y(Using)h(argumen)o(ts)f(similar)f
(to)j(those)f(in)g(Theorem)f(4,)h(w)o(e)g(can)g(sho)o(w)h(that)f(these)
164 2302 y Fm(Q)p Fs(-functions)h(are)g(piecewise-linear)e(and)i(con)o
(v)o(ex)f(and)h(can)h(b)q(e)f(represen)o(ted)f(b)o(y)g(col-)164
2362 y(lections)j(of)i(p)q(olicy)e(trees.)35 b(W)l(e'll)20
b(use)h Fn(Q)964 2344 y Fk(a)964 2374 y(t)1005 2362 y
Fs(to)h(represen)o(t)e(the)h(collection)e(of)j(p)q(olicy)164
2422 y(trees)e(that)h(sp)q(ecify)f Fm(Q)600 2404 y Fk(a)600
2434 y(t)620 2422 y Fs(.)35 b(Once)20 b(again,)i(an)o(y)e(represen)o
(tation)g(with)h(no)g(extraneous)164 2482 y(p)q(olicy)16
b(trees)f(is)h(guaran)o(teed)h(to)g(b)q(e)f(of)h(minim)n(um)12
b(size.)949 2607 y(24)p eop
%%Page: 25 25
25 24 bop 237 315 a Fs(Note)13 b(that)g(the)f(p)q(olicy)h(trees)f
(needed)g(to)h(represen)o(t)f(the)h(function)f Fm(V)1506
322 y Fk(t)1534 315 y Fs(are)h(a)h(subset)164 376 y(of)k(the)f(p)q
(olicy)g(trees)h(needed)f(to)h(represen)o(t)f(all)g(of)h(the)f
Fm(Q)1257 358 y Fk(a)1257 388 y(t)1295 376 y Fs(functions:)24
b Fn(V)1558 383 y Fk(t)1589 376 y Fn(\022)1644 342 y
Fi(S)1679 386 y Fk(a)1708 376 y Fn(Q)1749 358 y Fk(a)1749
388 y(t)1769 376 y Fs(.)164 436 y(This)15 b(is)g(b)q(ecause)g(maximi)o
(zi)o(ng)e(o)o(v)o(er)h(actions)h(and)g(then)g(p)q(olicy)f(trees)g(is)h
(the)f(same)g(as)164 496 y(maximi)o(zing)f(o)o(v)o(er)j(the)g(p)q(o)q
(oled)h(p)q(olicy)e(trees.)21 b(Section)15 b(7.4)i(describ)q(es)f(a)g
(metho)q(d)g(for)164 556 y(remo)o(ving)9 b(the)j Fn(Q)491
538 y Fk(a)491 569 y(t)523 556 y Fs(p)q(olicy)e(trees)h(that)h(are)g
(not)f(needed)g(for)h(a)g(minim)o(al)c(represen)o(tation)164
616 y(of)17 b Fm(V)248 623 y Fk(t)263 616 y Fs(.)237
677 y(A)o(t)e(an)o(y)h(momen)o(t)e(in)h(time,)f(the)i(witness)g
(algorithm)f(main)o(tains)g(a)h(subset)h(of)f(the)164
737 y(complete)g(set)j(of)g(non-extraneous)g(p)q(olicy)f(trees,)1144
724 y(^)1131 737 y Fn(Q)1172 719 y Fk(a)1172 749 y(t)1210
737 y Fn(\022)g(Q)1308 719 y Fk(a)1308 749 y(t)1328 737
y Fs(.)28 b(In)19 b(p)q(olynomial)e(time)164 797 y Fr(p)n(er)i(p)n
(olicy)h(tr)n(e)n(e)f Fs(of)g Fn(Q)585 779 y Fk(a)585
809 y(t)605 797 y Fs(,)g(the)g(algorithm)f(generates)h(a)g(represen)o
(tation)g(for)g Fm(Q)1648 779 y Fk(a)1648 809 y(t)1668
797 y Fs(.)30 b(F)l(or)164 857 y(problems)12 b(in)i(whic)o(h)f
Fm(Q)601 839 y Fk(a)601 870 y(t)635 857 y Fs(has)i(a)f(simple)d
(represen)o(tation,)i(the)h(algorithm)f(will)f(b)q(e)i(v)o(ery)164
917 y(e\016cien)o(t.)20 b(Ho)o(w)o(ev)o(er,)15 b(there)h(are)g
(problems)g(for)h(whic)o(h)e Fm(Q)1244 899 y Fk(a)1244
930 y(t)1282 917 y Fs(requires)g(a)i(h)o(uge)g(n)o(um)o(b)q(er)164
978 y(of)k(p)q(olicy)g(trees)g(to)g(b)q(e)h(represen)o(ted)e(exactly)l
(.)35 b(Ev)o(en)20 b(w)o(orse,)i(there)f(are)g(problems)164
1038 y(in)g(whic)o(h)g Fm(V)399 1045 y Fk(t)436 1038
y Fs(can)h(b)q(e)g(represen)o(ted)f(succinctly)f(but)i
Fm(Q)1234 1020 y Fk(a)1234 1050 y(t)1276 1038 y Fs(can)g(not.)38
b(Lik)o(e)21 b(previous)164 1098 y(algorithms,)16 b(the)g(witness)h
(algorithm)e(can)i(run)g(in)f(time)f(exp)q(onen)o(tial)h(in)g(the)h
(size)f(of)164 1158 y Fn(V)195 1165 y Fk(t)209 1158 y
Fs(.)237 1218 y(In)k(what)i(sense)e(is)h(the)f(witness)h(algorithm)e
(sup)q(erior)i(to)g(previous)g(algorithms)164 1279 y(for)14
b(solving)g(POMDP)g(problems,)e(then?)21 b(F)l(or)14
b(one)g(thing,)g(preliminary)d(exp)q(erimen)o(ts)164
1339 y(indicate)g(that)i(the)e(witness)h(algorithm)f(is)h(faster)g(in)g
(practice)f(\(see)1412 1335 y([)1425 1339 y(Cassandra,)k(1994)1768
1335 y(])164 1399 y(for)g(some)f(v)o(ery)f(informal)h(results\).)20
b(The)15 b(primary)e(complexit)o(y-theoretic)e(di\013erence)164
1459 y(is)i(that)g(the)g(witness)g(algorithm)f(runs)h(in)f(p)q
(olynomial)g(time)f(in)h(the)h(n)o(um)o(b)q(er)e(of)j(p)q(olicy)164
1519 y(trees)k(in)g Fn(Q)383 1501 y Fk(a)383 1532 y(t)403
1519 y Fs(.)27 b(There)18 b(are)h(examples)d(that)j(cause)f(the)g
(other)g(algorithms,)g(although)164 1579 y(they)k(nev)o(er)g(construct)
h(the)f Fn(Q)769 1561 y Fk(a)769 1592 y(t)790 1579 y
Fs('s)g(directly)l(,)g(to)i(run)f(in)f(time)f(exp)q(onen)o(tial)h(in)g
(the)164 1640 y(n)o(um)o(b)q(er)14 b(of)j(p)q(olicy)f(trees)f(in)h
Fn(Q)755 1622 y Fk(a)755 1652 y(t)776 1640 y Fs(.)237
1700 y(The)g(co)q(de)f(in)g(T)l(able)g(4)h(outlines)f(our)h(approac)o
(h)g(to)g(solving)f(POMDP)h(problems.)237 1760 y(The)g(basic)f
(structure)h(is)f(that)h(of)g(v)m(alue)f(iteration)g(\(Section)g(3.1\))
h(with)g(the)f(stop-)164 1820 y(ping)24 b(criteria)f(de\014ned)h(in)f
(Section)h(3.4)g(\(metho)q(ds)g(for)g(computing)f(the)g(Bellman)164
1880 y(residual)16 b(are)h(giv)o(en)f(in)h(Section)f(7.2\).)24
b(A)o(t)16 b(iteration)g Fm(t)p Fs(,)h(the)f(algorithm)g(has)i(a)f
(repre-)164 1941 y(sen)o(tation)k(of)h(the)f(optimal)e
Fm(t)p Fs(-step)i(v)m(alue)g(function.)36 b(Within)21
b(the)f(v)m(alue)h(iteration)164 2001 y(lo)q(op,)d(separate)g
Fm(Q)p Fs(-functions)g(are)g(found)g(for)g(eac)o(h)f(action,)h
(represen)o(ted)f(b)o(y)g(sets)h(of)164 2061 y(p)q(olicy)g(trees.)28
b(The)18 b(union)h(of)g(these)f(sets)h(forms)e(a)i(represen)o(tation)f
(of)h(the)f(optimal)164 2121 y(v)m(alue)f(function.)23
b(Since)16 b(there)h(ma)o(y)e(b)q(e)i(extraneous)h(p)q(olicy)e(trees)h
(in)f(the)h(com)o(bined)164 2181 y(set,)h(a)h(separate)g(routine)f
(\(Section)f(7.4\))i(is)f(called)f(to)i(simplify)c(the)j(represen)o
(tation)164 2242 y(of)f Fm(V)248 2249 y Fk(t)263 2242
y Fs(.)949 2607 y(25)p eop
%%Page: 26 26
26 25 bop 164 422 a Ff(solvepomdp)l Fs(\()p Fm(\017;)8
b Fn(M)p Fs(\))16 b(:=)g Fn(f)257 482 y(V)288 489 y Fj(0)322
482 y Fs(:=)d Fn(fg)257 542 y Fm(t)h Fs(:=)f(1)257 603
y Fd(do)k Fn(f)351 663 y Fd(foreac)n(h)g Fm(a)e Fd(in)h
Fn(A)444 723 y(Q)485 705 y Fk(a)485 735 y(t)520 723 y
Fs(:=)d Ff(witness)n Fs(\()p Fn(V)815 730 y Fk(t)p Fl(\000)p
Fj(1)874 723 y Fm(;)8 b(a;)g Fn(M)p Fs(\))351 783 y Fn(V)382
790 y Fk(t)410 783 y Fs(:=)13 b Ff(purge)o Fs(\()623
750 y Fi(S)657 793 y Fk(a)686 783 y Fn(Q)727 765 y Fk(a)727
795 y(t)748 783 y Fs(\))351 843 y Fm(t)g Fs(:=)h Fm(t)c
Fs(+)h(1)257 903 y Fn(g)17 b Fd(un)n(til)f Fs(\()p Ff(differenc)o(e)m
Fs(\()p Fn(V)754 910 y Fk(t)p Fl(\000)p Fj(1)813 903
y Fm(;)8 b Fn(V)866 910 y Fk(t)880 903 y Fs(\))14 b Fn(\024)g
Fm(\017)p Fs(\))257 964 y Fd(return)i Fn(V)460 971 y
Fk(t)164 1024 y Fn(g)552 1180 y Fs(T)l(able)g(4:)21 b(Algorithm)15
b(to)h(solv)o(e)g(a)h(POMDP)l(.)164 1322 y Fq(6.2)70
b(Witness)21 b(lo)r(op)164 1414 y Fs(The)c(basic)g(structure)g(of)g
(the)g(witness)g(algorithm)f(is)h(as)g(follo)o(ws.)24
b(W)l(e'd)16 b(lik)o(e)f(to)j(\014nd)164 1475 y(a)j(minimal)c(set)k(of)
g(p)q(olicy)f(trees)h(for)g(represen)o(ting)f Fm(Q)1212
1457 y Fk(a)1212 1487 y(t)1253 1475 y Fs(for)h(eac)o(h)f
Fm(a)p Fs(.)35 b(W)l(e)20 b(consider)164 1535 y(the)c
Fm(Q)p Fs(-functions)h(one)g(at)g(a)g(time.)j(The)d(set)1027
1522 y(^)1014 1535 y Fn(Q)1055 1517 y Fk(a)1055 1547
y(t)1092 1535 y Fs(is)f(a)h(set)g(of)g(non-extraneous)h(p)q(olicy)164
1595 y(trees)g(and)h(it)f(is)g(initialized)e(with)i(a)h(single)f(p)q
(olicy)g(tree)f(that)i(is)f(the)h(b)q(est)f(for)h(some)164
1655 y(arbitrary)d(b)q(elief)f(state.)22 b(A)o(t)16 b(eac)o(h)f
(iteration)h(w)o(e)g(ask,)g(is)g(there)g(some)f(b)q(elief)g(state,)i
Fm(b)p Fs(,)164 1715 y(for)d(whic)o(h)g(the)g(true)g(v)m(alue,)g
Fm(Q)734 1697 y Fk(a)734 1728 y(t)754 1715 y Fs(\()p
Fm(b)p Fs(\),)g(computed)f(b)o(y)h(one-step)g(lo)q(ok)m(ahead,)i(is)e
(di\013eren)o(t)164 1776 y(from)289 1763 y(^)277 1776
y Fm(Q)316 1757 y Fk(a)316 1788 y(t)337 1776 y Fs(\()p
Fm(b)p Fs(\))g(computed)f(using)i(the)g(set)930 1763
y(^)916 1776 y Fn(Q)957 1757 y Fk(a)957 1788 y(t)978
1776 y Fs(?)21 b(W)l(e)14 b(call)g(suc)o(h)g(a)h(p)q(oin)o(t)g(a)g
Fr(witness)h Fs(p)q(oin)o(t)164 1836 y(b)q(ecause)21
b(it)f(can,)h(in)g(a)g(sense,)g(testify)e(to)i(the)g(fact)f(that)h(the)
g(set)1460 1823 y(^)1446 1836 y Fn(Q)1487 1818 y Fk(a)1487
1848 y(t)1528 1836 y Fs(is)g(not)g(y)o(et)f(a)164 1896
y(p)q(erfect)c(represen)o(tation)f(of)i Fm(Q)740 1878
y Fk(a)740 1908 y(t)760 1896 y Fs(\()p Fm(b)p Fs(\).)237
1956 y(Once)i(a)h(witness)f(is)g(iden)o(ti\014ed,)g(w)o(e)g(can)g(use)h
Ff(besttree)c Fs(\(Section)j(5.2\))h(to)g(\014nd)164
2016 y(a)f(non-extraneous)h(p)q(olicy)e(tree)g(that)i(is)e(missing)g
(from)1264 2004 y(^)1251 2016 y Fn(Q)1292 1998 y Fk(a)1292
2029 y(t)1312 2016 y Fs(.)29 b(W)l(e)19 b(include)e(the)i(new)164
2077 y(p)q(olicy)g(tree)f(to)i(impro)o(v)o(e)d(the)i(appro)o(ximation.)
30 b(This)19 b(pro)q(cess)h(con)o(tin)o(ues)f(un)o(til)f(w)o(e)164
2137 y(can)h(pro)o(v)o(e)e(that)i(no)g(more)f(witness)g(p)q(oin)o(ts)h
(exist)f(and)h(therefore)f(that)h(the)f(curren)o(t)164
2197 y(appro)o(ximation)d(is)h(p)q(erfect.)237 2257 y(T)l(able)g(5)g
(giv)o(es)f(pseudo)q(co)q(de)i(for)f(this)g(outer)g(lo)q(op.)22
b(The)15 b(function)h Ff(findb)e Fs(iden)o(ti-)164 2317
y(\014es)i(witness)g(p)q(oin)o(ts)h(and)g(will)e(b)q(e)h(de\014ned)g
(later.)949 2607 y(26)p eop
%%Page: 27 27
27 26 bop 164 422 a Ff(witness)m Fs(\()p Fn(V)393 429
y Fk(t)p Fl(\000)p Fj(1)453 422 y Fm(;)8 b(a;)g Fn(M)p
Fs(\))15 b(:=)h Fn(f)271 475 y Fs(^)257 487 y Fn(Q)298
469 y Fk(a)298 500 y(t)333 487 y Fs(:=)d Fn(f)p Ff(besttree)m
Fs(\([1)p Fm(;)8 b Fs(0)p Fm(;)g Fs(0)p Fm(;)g(:)g(:)g(:)g(;)g
Fs(0])p Fm(;)g(a;)g Fn(V)1026 494 y Fk(t)p Fl(\000)p
Fj(1)1084 487 y Fm(;)g Fn(M)p Fs(\))p Fn(g)257 552 y
Fm(b)14 b Fs(:=)f Ff(findb)o Fs(\()p Fm(a;)8 b Fn(V)584
559 y Fk(t)p Fl(\000)p Fj(1)642 552 y Fm(;)678 540 y
Fs(^)664 552 y Fn(Q)705 534 y Fk(a)705 565 y(t)726 552
y Fm(;)g Fn(M)p Fs(\))257 613 y Fd(while)16 b Fs(\()p
Fm(b)e Fn(6)p Fs(=)f Ff(nil)o Fs(\))j Fn(f)365 665 y
Fs(^)351 678 y Fn(Q)392 660 y Fk(a)392 690 y(t)426 678
y Fs(:=)505 665 y(^)492 678 y Fn(Q)533 660 y Fk(a)533
690 y(t)564 678 y Fn([)11 b(f)p Ff(besttree)m Fs(\()p
Fm(b;)d(a;)g Fn(V)979 685 y Fk(t)p Fl(\000)p Fj(1)1038
678 y Fm(;)g Fn(M)p Fs(\))p Fn(g)351 743 y Fm(b)14 b
Fs(:=)f Ff(findb)n Fs(\()p Fm(a;)8 b Fn(V)677 750 y Fk(t)p
Fl(\000)p Fj(1)736 743 y Fm(;)771 731 y Fs(^)758 743
y Fn(Q)799 725 y Fk(a)799 755 y(t)819 743 y Fm(;)g Fn(M)p
Fs(\))257 803 y Fn(g)257 869 y Fd(return)443 856 y Fs(^)429
869 y Fn(Q)470 850 y Fk(a)470 881 y(t)164 929 y Fn(g)282
1084 y Fs(T)l(able)16 b(5:)22 b(Algorithm)14 b(for)j(\014nding)f(a)h
(represen)o(tation)f(for)g(a)h Fm(Q)p Fs(-function.)164
1227 y Fq(6.3)70 b(Iden)n(tifying)21 b(a)j(witness)164
1319 y Fs(This)c(section)f(describ)q(es)h(ho)o(w)g(w)o(e)f(go)i(ab)q
(out)g(\014nding)f(a)g(witness)g(p)q(oin)o(t.)32 b(First,)19
b(w)o(e)164 1379 y(need)d(to)g(de\014ne)g(ho)o(w)h(the)f(p)q(olicy)g
(trees)f(in)995 1367 y(^)981 1379 y Fn(Q)1022 1361 y
Fk(a)1022 1392 y(t)1059 1379 y Fs(divide)g(b)q(elief)g(space)h(in)o(to)
g(regions.)237 1440 y(Eac)o(h)23 b(p)q(olicy)f(tree,)i
Fm(p)i Fn(2)757 1427 y Fs(^)743 1440 y Fn(Q)784 1422
y Fk(a)784 1452 y(t)828 1440 y Fs(accoun)o(ts)d(for)g(a)g(region)g(of)h
(b)q(elief)d(space)j(in)e(the)164 1500 y(follo)o(wing)16
b(sense.)21 b(De\014ne:)204 1610 y Fd(region)o Fs(\()p
Fm(p;)434 1597 y Fs(^)420 1610 y Fn(Q)461 1589 y Fk(a)461
1622 y(t)482 1610 y Fs(\))14 b(:=)f Fn(f)p Fm(b)h Fn(2)g
Fs(\005\()p Fn(S)t Fs(\))f(:)h Fd(v)m(alue)o Fs(\()p
Fm(p)p Fs(\))d Fn(\001)g Fm(b)i Fn(\025)h Fd(v)m(alue)o
Fs(\()t(~)-28 b Fm(p)p Fs(\))12 b Fn(\001)e Fm(b;)e Fs(for)17
b(all)i(~)-28 b Fm(p)15 b Fn(2)1656 1597 y Fs(^)1643
1610 y Fn(Q)1684 1589 y Fk(a)1684 1622 y(t)1704 1610
y Fn(g)p Fm(:)1696 1670 y Fs(\(15\))164 1730 y(A)i(p)q(olicy)f(tree's)g
(region)h(is)g(just)g(the)g(set)g(of)g(b)q(elief)f(states)i(o)o(v)o(er)
e(whic)o(h)g(it)g(is)h(optimal)164 1790 y(\(with)i(resp)q(ect)g(to)g
(the)g(curren)o(t)f(appro)o(ximation\).)29 b(It)19 b(should)g(b)q(e)h
(clear)e(that)h(ev)o(ery)164 1851 y(p)q(oin)o(t)j(in)g(b)q(elief)e
(space)i(is)g(in)g(some)f(region)h(and)g(that,)i(along)e(the)g(b)q
(orders,)i(some)164 1911 y(b)q(elief)15 b(states)i(are)f(in)g(m)o
(ultiple)d(regions.)237 1971 y(F)l(or)20 b(simplicit)o(y)d(of)j
(notation,)h(w)o(e)f(de\014ne)1059 1958 y(^)1048 1971
y Fm(Q)1087 1953 y Fk(a)1087 1983 y(t)1107 1971 y Fs(\()p
Fm(b)p Fs(\))g(=)h Fd(b)r(est)o Fs(\()p Fm(b;)1422 1958
y Fs(^)1409 1971 y Fn(Q)1450 1953 y Fk(a)1450 1983 y(t)1470
1971 y Fs(\))13 b Fn(\001)h Fm(b)p Fs(,)20 b(the)g(v)m(alue)164
2031 y(at)i Fm(b)f Fs(of)h(the)g(curren)o(t)e(appro)o(ximation.)37
b(F)l(urther,)22 b(if)f Fm(p)h Fs(is)f(a)h Fm(t)p Fs(-step)g(p)q(olicy)
f(tree,)g Fm(o)164 2091 y Fs(an)f(observ)m(ation,)h(and)f
Fm(p)634 2073 y Fl(0)665 2091 y Fs(a)g Fm(t)13 b Fn(\000)g
Fs(1-step)20 b(p)q(olicy)f(tree,)g(then)h(w)o(e)f(de\014ne)g
Fm(p)1559 2098 y Fj(new)1642 2091 y Fs(as)h(a)g Fm(t)p
Fs(-)164 2152 y(step)h(p)q(olicy)f(tree)h(that)g(agrees)h(with)f
Fm(p)g Fs(in)g(its)g(action)g(and)h(all)e(its)h(c)o(hoices)f(except)164
2212 y(for)j(observ)m(ation)g Fm(o)f Fs(for)h(whic)o(h)f
Fd(c)n(hoice)o Fs(\()p Fm(p)973 2219 y Fj(new)1037 2212
y Fm(;)8 b(o)p Fs(\))24 b(=)h Fm(p)1212 2194 y Fl(0)1224
2212 y Fs(.)39 b(Figure)22 b(7)h(illustrates)e(the)164
2272 y(relationship)16 b(b)q(et)o(w)o(een)f Fm(p)i Fs(and)g
Fm(p)778 2279 y Fj(new)842 2272 y Fs(.)164 2386 y Fd(Theorem)g(5)24
b Fr(\(Witness)19 b(the)n(or)n(em\):)24 b(The)19 b(true)g
Fm(Q)p Fr(-function,)i Fm(Q)1397 2368 y Fk(a)1397 2398
y(t)1417 2386 y Fr(,)e(di\013ers)g(fr)n(om)e(the)164
2446 y(appr)n(oximate)e Fm(Q)p Fr(-function,)711 2434
y Fs(^)700 2446 y Fm(Q)739 2428 y Fk(a)739 2459 y(t)759
2446 y Fr(,)h(if)g(and)g(only)g(if)f(ther)n(e)h(is)g(some)f
Fm(p)g Fn(2)1470 2434 y Fs(^)1457 2446 y Fn(Q)1498 2428
y Fk(a)1498 2459 y(t)1518 2446 y Fr(,)h Fm(o)f Fn(2)f(O)q
Fr(,)i(and)949 2607 y Fs(27)p eop
%%Page: 28 28
28 27 bop 409 266 a
 17832119 7104430 4604723 36706222 37035130 49599447 startTexFig
 409 266 a
%%BeginDocument: pnew.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 14 Q
0 X
0 0 0 1 0 0 0 K
(a) 284.82 715 T
(c) 291.82 715 T
(t) 298.03 715 T
(i) 302.7 715 T
(o) 306.59 715 T
(n) 313.59 715 T
1 F
(p) 330.54 715 T
0 F
(\050) 324.53 715 T
(\051) 338.18 715 T
1 36 Q
(p) 108.24 739 T
2 18 Q
(n) 126.77 733.9 T
(e) 135.77 733.9 T
(w) 143.76 733.9 T
271.5 705 355.5 730 12.5 RR
3 H
0 Z
N
4 14 Q
(c) 255.67 596 T
(h) 261.88 596 T
(o) 269.67 596 T
(i) 276.67 596 T
(c) 280.56 596 T
(e) 286.77 596 T
1 F
(p) 302.16 596 T
(o) 316.16 596 T
2 12 Q
(2) 323.69 589.9 T
0 14 Q
(,) 309.16 596 T
(\050) 296.15 596 T
(\051) 330.33 596 T
290.5 637 222.5 587 371.5 587 3 Y
N
4 F
(c) 441 596 T
(h) 447.22 596 T
(o) 455 596 T
(i) 462 596 T
(c) 465.9 596 T
(e) 472.11 596 T
1 F
(p) 487.5 596 T
(o) 501.49 596 T
1 12 Q
(k) 509.03 589.9 T
0 14 Q
(,) 494.5 596 T
(\050) 481.49 596 T
(\051) 515 596 T
475.5 637 407.5 587 556.5 587 3 Y
N
2 36 Q
(...) 336.5 649 T
314.5 705 141.5 637 2 L
1 H
2 Z
N
311.5 705 289.5 638 2 L
N
310.5 705 474.5 636 2 L
N
216 540 414 576 R
7 X
V
2 20 Q
0 X
(-step policy trees) 271 562.67 T
216 549 271 576 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 20 Q
0 X
0 0 0 1 0 0 0 K
(t) 229.67 562.67 T
2 F
(1) 255.22 562.67 T
(\320) 240.22 562.67 T
0 -208 1000 792 C
1 24 Q
0 X
0 0 0 1 0 0 0 K
(p) 143.05 596 T
2 F
(') 155.05 596 T
141.5 637 73.5 587 222.5 587 3 Y
3 H
0 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 581 817 a Fs(Figure)16 b(7:)22 b(Constructing)17 b(a)f(new)h(p)q
(olicy)l(.)164 958 y Fm(p)188 940 y Fl(0)214 958 y Fn(2)d(V)292
965 y Fk(t)p Fl(\000)p Fj(1)369 958 y Fr(for)j(which)h(ther)n(e)f(is)g
(some)h Fm(b)13 b Fn(2)i Fd(region)o Fs(\()p Fm(p;)1194
946 y Fs(^)1180 958 y Fn(Q)1221 940 y Fk(a)1221 971 y(t)1242
958 y Fs(\))i Fr(such)h(that)288 1065 y Fd(bac)n(k)q
Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)588 1045 y Fl(0)600
1065 y Fs(\))p Fm(;)8 b(a;)g(o)p Fs(\))j Fn(\001)f Fm(b)k(>)g
Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)p
Fs(\()p Fm(p;)8 b(o)p Fs(\)\))p Fm(;)g(a;)g(o)p Fs(\))j
Fn(\001)g Fm(b)124 b Fs(\(16\))237 1284 y(In)17 b(w)o(ords,)g(if)f
(there)g(is)h(a)g(b)q(elief)f(state,)h Fm(b)p Fs(,)f(for)h(whic)o(h)f
(w)o(e)h(can)g(c)o(hange)g(the)f(c)o(hoice)164 1344 y(made)h(for)i(an)o
(y)f(observ)m(ation)h(to)f(a)h(b)q(etter)f(p)q(olicy)f(tree,)h(then)g
Fm(b)g Fs(is)g(a)h(witness.)27 b(Con-)164 1404 y(v)o(ersely)l(,)10
b(if)i(none)g(of)g(the)f(individual)g(c)o(hoices)f(can)i(b)q(e)g(impro)
o(v)o(ed,)e(there)h(are)h(no)g(witness)164 1464 y(p)q(oin)o(ts.)237
1524 y(Pro)q(of:)22 b(De\014ne)15 b(the)g(p)q(olicy)g(tree)f
Fm(p)885 1531 y Fj(new)964 1524 y Fs(as)i(ab)q(o)o(v)o(e:)21
b Fd(action)p Fs(\()p Fm(p)1372 1531 y Fj(new)1435 1524
y Fs(\))14 b(=)g Fd(action)p Fs(\()p Fm(p)p Fs(\))g(=)164
1584 y Fm(a)p Fs(,)j Fd(c)n(hoice)o Fs(\()p Fm(p)412
1591 y Fj(new)476 1584 y Fm(;)8 b(o)p Fs(\))16 b(=)g
Fm(p)634 1566 y Fl(0)646 1584 y Fs(,)h(and)h Fd(c)n(hoice)p
Fs(\()p Fm(p)965 1591 y Fj(new)1029 1584 y Fm(;)10 b
Fs(~)-26 b Fm(o)p Fs(\))16 b(=)f Fd(c)n(hoice)p Fs(\()p
Fm(p;)10 b Fs(~)-26 b Fm(o)q Fs(\),)17 b(for)j(~)-27
b Fm(o)17 b Fn(6)p Fs(=)e Fm(o)p Fs(.)25 b(First)164
1645 y(w)o(e)16 b(sho)o(w)h(that)f(if)g(Condition)h(16holds,)g(w)o(e'v)
o(e)d(found)j(a)f(witness.)248 1799 y(^)237 1812 y Fm(Q)276
1791 y Fk(a)276 1824 y(t)297 1812 y Fs(\()p Fm(b)p Fs(\))41
b(=)g Fm(b)11 b Fn(\001)g Fd(v)m(alue)o Fs(\()p Fm(p)p
Fs(\))397 1916 y(=)476 1874 y Fi(X)498 1961 y Fk(s)545
1916 y Fm(b)p Fs([)p Fm(s)p Fs(])625 1843 y Fi( )657
1916 y Fm(R)p Fs([)p Fm(s;)d(a)p Fs(])i(+)h Fm(\015)888
1874 y Fi(X)911 1966 y Fj(~)-20 b Fk(o)956 1916 y Fd(bac)n(k)q
Fs(\()p Fd(v)m(alue)n Fs(\()p Fd(c)n(hoice)p Fs(\()p
Fm(p;)11 b Fs(~)-27 b Fm(o)q Fs(\)\))p Fm(;)8 b(a;)h
Fs(~)-25 b Fm(o)o Fs(\)[)p Fm(s)p Fs(])1669 1843 y Fi(!)397
2032 y Fs(=)476 1991 y Fi(X)498 2078 y Fk(s)545 2032
y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p Fs([)p Fm(s;)8 b(a)p
Fs(])h(+)i Fm(\015)848 1991 y Fi(X)848 2083 y Fj(~)-19
b Fk(o)p Fl(6)p Fj(=)p Fk(o)917 2032 y Fd(bac)n(k)p Fs(\()p
Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o Fs(\()p Fm(p;)11
b Fs(~)-27 b Fm(o)q Fs(\)\))p Fm(;)8 b(a;)i Fs(~)-26
b Fm(o)p Fs(\))11 b Fn(\001)g Fm(b)476 2147 y Fs(+)p
Fm(\015)s Fd(bac)n(k)q Fs(\()p Fd(v)m(alue)n Fs(\()p
Fd(c)n(hoice)p Fs(\()p Fm(p;)d(o)p Fs(\)\))p Fm(;)g(a;)g(o)p
Fs(\))j Fn(\001)g Fm(b)397 2220 y(<)476 2179 y Fi(X)498
2266 y Fk(s)545 2220 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p
Fs([)p Fm(s;)d(a)p Fs(])h(+)i Fm(\015)848 2179 y Fi(X)848
2271 y Fj(~)-19 b Fk(o)p Fl(6)p Fj(=)p Fk(o)917 2220
y Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o
Fs(\()p Fm(p;)11 b Fs(~)-27 b Fm(o)q Fs(\)\))p Fm(;)8
b(a;)i Fs(~)-26 b Fm(o)p Fs(\))11 b Fn(\001)g Fm(b)476
2337 y Fs(+)p Fm(\015)s Fd(bac)n(k)q Fs(\()p Fd(v)m(alue)n
Fs(\()p Fm(p)841 2317 y Fl(0)854 2337 y Fs(\))p Fm(;)d(a;)g(o)p
Fs(\))i Fn(\001)h Fm(b)397 2410 y(<)41 b(b)11 b Fn(\001)g
Fd(v)m(alue)o Fs(\()p Fm(p)702 2417 y Fj(new)766 2410
y Fs(\))397 2482 y Fm(<)41 b(Q)515 2462 y Fk(a)515 2495
y(t)536 2482 y Fs(\()p Fm(b)p Fs(\))p Fm(:)949 2607 y
Fs(28)p eop
%%Page: 29 29
29 28 bop 164 315 a Fs(Since)15 b(w)o(e)g(can)h(replace)f
Fd(c)n(hoice)p Fs(\()p Fm(p;)8 b(o)p Fs(\))16 b(with)g
Fm(p)1023 297 y Fl(0)1051 315 y Fs(and)h(impro)o(v)o(e)c(the)i(v)m
(alue,)h Fm(Q)1593 297 y Fk(a)1593 328 y(t)1629 315 y
Fs(and)1735 303 y(^)1723 315 y Fm(Q)1762 297 y Fk(a)1762
328 y(t)164 376 y Fs(di\013er.)237 436 y(T)l(o)22 b(pro)o(v)o(e)e(the)g
(con)o(v)o(erse,)h(assume)f Fm(Q)964 418 y Fk(a)964 448
y(t)1006 436 y Fn(6)p Fs(=)1077 423 y(^)1066 436 y Fm(Q)1105
418 y Fk(a)1105 448 y(t)1147 436 y Fs(and)h(for)g(ev)o(ery)f
Fm(p;)8 b(o;)g(p)1574 418 y Fl(0)1608 436 y Fs(and)21
b Fm(b)h Fn(2)164 496 y Fd(region)o Fs(\()p Fm(p;)394
483 y Fs(^)380 496 y Fn(Q)421 478 y Fk(a)421 508 y(t)442
496 y Fs(\))d(quadruple,)h(Condition)g(16)g(is)f(not)h(satis\014ed.)31
b(W)l(e)19 b(sho)o(w)h(that)g(this)164 556 y(leads)c(to)h(a)f(con)o
(tradiction.)237 616 y(If)k Fm(Q)329 598 y Fk(a)329 629
y(t)370 616 y Fn(6)p Fs(=)441 604 y(^)429 616 y Fm(Q)468
598 y Fk(a)468 629 y(t)489 616 y Fs(,)h(it)f(m)o(ust)f(b)q(e)h(the)g
(case)h(that)g Fm(Q)1117 598 y Fk(a)1117 629 y(t)1137
616 y Fs(\()p Fm(b)p Fs(\))g Fm(>)1287 604 y Fs(^)1276
616 y Fm(Q)1315 598 y Fk(a)1315 629 y(t)1335 616 y Fs(\()p
Fm(b)p Fs(\))f(for)h(some)e Fm(b)p Fs(.)34 b(This)164
677 y(is)20 b(b)q(ecause)h Fm(Q)441 659 y Fk(a)441 689
y(t)461 677 y Fs(\()p Fm(b)p Fs(\))g(is)f(computed)f(as)i(a)g(maximi)o
(zation)d(o)o(v)o(er)i(a)g(set)h(of)g(p)q(olicy)e(trees)164
737 y(that)h(is)g(a)h(sup)q(erset)f(of)639 724 y(^)625
737 y Fn(Q)666 719 y Fk(a)666 749 y(t)687 737 y Fs(.)33
b(Let)20 b Fm(p)849 719 y Fl(\003)889 737 y Fs(b)q(e)g(a)h(p)q(olicy)e
(tree)g(that)i(ac)o(hiev)o(es)d Fm(Q)1593 719 y Fk(a)1593
749 y(t)1614 737 y Fs(\()p Fm(b)p Fs(\),)i(i.e.,)164
797 y Fm(Q)203 779 y Fk(a)203 809 y(t)223 797 y Fs(\()p
Fm(b)p Fs(\))e(=)f Fm(b)12 b Fn(\001)h Fd(v)m(alue)o
Fs(\()p Fm(p)584 779 y Fl(\003)604 797 y Fs(\).)27 b(Let)19
b Fm(p)g Fs(b)q(e)f(a)h(p)q(olicy)f(tree)g(in)1226 784
y(^)1213 797 y Fn(Q)1254 779 y Fk(a)1254 809 y(t)1292
797 y Fs(whic)o(h)g(is)g(b)q(est)h(at)g Fm(b)p Fs(,)f(i.e.,)175
845 y(^)164 857 y Fm(Q)203 839 y Fk(a)203 870 y(t)223
857 y Fs(\()p Fm(b)p Fs(\))c(=)g Fm(b)6 b Fn(\001)g Fd(v)m(alue)n
Fs(\()p Fm(p)p Fs(\).)21 b(By)13 b(construction)h(w)o(e)f(ha)o(v)o(e)g
Fm(b)6 b Fn(\001)g Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)1382
839 y Fl(\003)1402 857 y Fs(\))g Fn(\000)g Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\)\))14 b Fm(>)g Fs(0.)164 917 y(But,)310
1008 y Fm(b)d Fn(\001)g Fs(\()p Fd(v)m(alue)n Fs(\()p
Fm(p)554 988 y Fl(\003)575 1008 y Fs(\))g Fn(\000)f Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\)\))352 1081 y(=)432 1039 y Fi(X)453
1127 y Fk(s)500 1081 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p
Fs([)p Fm(s;)e(a)p Fs(])h(+)i Fm(\015)802 1039 y Fi(X)825
1131 y Fj(~)-19 b Fk(o)870 1081 y Fd(bac)n(k)q Fs(\()p
Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o Fs(\()p Fm(p)1337
1060 y Fl(\003)1357 1081 y Fm(;)10 b Fs(~)-26 b Fm(o)q
Fs(\)\))p Fm(;)8 b(a;)h Fs(~)-25 b Fm(o)o Fs(\))11 b
Fn(\001)g Fm(b)432 1197 y Fn(\000)479 1156 y Fi(X)500
1243 y Fk(s)547 1197 y Fm(b)p Fs([)p Fm(s)p Fs(])p Fm(R)p
Fs([)p Fm(s;)d(a)p Fs(])h Fn(\000)i Fm(\015)850 1156
y Fi(X)873 1247 y Fj(~)-20 b Fk(o)918 1197 y Fd(bac)n(k)p
Fs(\()p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)p Fs(\()p
Fm(p;)10 b Fs(~)-26 b Fm(o)q Fs(\)\))p Fm(;)8 b(a;)h
Fs(~)-25 b Fm(o)o Fs(\))11 b Fn(\001)g Fm(b)352 1314
y Fs(=)42 b Fm(\015)468 1272 y Fi(X)491 1364 y Fj(~)-20
b Fk(o)536 1314 y Fm(b)11 b Fn(\001)g Fs(\()p Fd(bac)n(k)p
Fs(\()p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)p Fs(\()p
Fm(p)1079 1293 y Fl(\003)1099 1314 y Fm(;)f Fs(~)-26
b Fm(o)p Fs(\)\))p Fm(;)8 b(a;)i Fs(~)-26 b Fm(o)p Fs(\))432
1422 y Fn(\000)13 b Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o
Fs(\()p Fd(c)n(hoice)o Fs(\()p Fm(p;)e Fs(~)-27 b Fm(o)q
Fs(\)\))p Fm(;)8 b(a;)i Fs(~)-26 b Fm(o)p Fs(\)\))351
1494 y Fn(\024)42 b Fs(0)237 1585 y(The)23 b(last)g(step)g(is)g
(justi\014ed)g(b)q(ecause)g(w)o(e)g(assumed)f(that)i(Condition)f(16)h
(do)q(es)164 1645 y(not)e(hold)f(for)h(an)o(y)f Fm(p;)8
b(o;)g(p)661 1627 y Fl(0)674 1645 y Fm(;)g(b)22 b Fn(2)h
Fd(region)o Fs(\()p Fm(p;)1025 1633 y Fs(^)1011 1645
y Fn(Q)1052 1627 y Fk(a)1052 1658 y(t)1073 1645 y Fs(\))e(quadruple)g
(\(in)g(particular,)h Fm(p)1697 1627 y Fl(0)1731 1645
y Fs(:=)164 1706 y Fd(c)n(hoice)p Fs(\()p Fm(p;)10 b
Fs(~)-26 b Fm(o)p Fs(\),)12 b Fm(o)i Fs(:=)i(~)-27 b
Fm(o)q Fs(,)11 b Fm(p)k Fs(:=)e Fm(p)725 1687 y Fl(\003)745
1706 y Fs(\).)19 b(But)11 b(this)g(con)o(tradicts)f(the)h(fact)f(that)i
Fm(b)p Fn(\001)p Fs(\()p Fd(v)m(alue)n Fs(\()p Fm(p)1716
1687 y Fl(\003)1736 1706 y Fs(\))p Fn(\000)164 1766 y
Fd(v)m(alue)o Fs(\()p Fm(p)p Fs(\)\))17 b Fm(>)g Fs(0.)28
b(The)18 b(conclusion)g(is)g(that,)g(if)g(our)g(appro)o(ximation)f(is)h
(not)h(p)q(erfect,)164 1826 y(there)d(m)o(ust)e(b)q(e)j(some)e(single)h
(c)o(hoice)f(that)h(can)h(b)q(e)f(impro)o(v)o(ed.)j Fc(2)164
1968 y Fq(6.4)70 b(Chec)n(king)21 b(the)i(witness)e(condition)164
2060 y Fs(Theorem)c(5)h(requires)f(us)h(to)g(searc)o(h)g(for)g(a)g
Fm(p)f Fn(2)1097 2047 y Fs(^)1083 2060 y Fn(Q)1124 2042
y Fk(a)1124 2072 y(t)1145 2060 y Fs(,)h(an)g Fm(o)f Fn(2)g(O)q
Fs(,)h(a)g Fm(p)1475 2042 y Fl(0)1504 2060 y Fn(2)f(V)1585
2067 y Fk(t)p Fl(\000)p Fj(1)1662 2060 y Fs(and)i(a)164
2120 y Fm(b)14 b Fn(2)g Fd(region)o Fs(\()p Fm(p;)476
2107 y Fs(^)462 2120 y Fn(Q)503 2102 y Fk(a)503 2132
y(t)524 2120 y Fs(\))i(suc)o(h)g(that)332 2211 y Fd(bac)n(k)p
Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)631 2190 y Fl(0)643
2211 y Fs(\))p Fm(;)8 b(a;)g(o)p Fs(\))j Fn(\001)g Fm(b)i(>)h
Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)p
Fs(\()p Fm(p;)8 b(o)p Fs(\)\))p Fm(;)g(a;)g(o)p Fs(\))j
Fn(\001)g Fm(b)164 2302 y Fs(or)20 b(to)g(guaran)o(tee)g(that)g(no)h
(suc)o(h)e(quadruple)h(exists.)31 b(Since)1352 2289 y(^)1338
2302 y Fn(Q)1379 2284 y Fk(a)1379 2314 y(t)1400 2302
y Fs(,)20 b Fn(O)q Fs(,)g(and)h Fn(V)1639 2309 y Fk(t)p
Fl(\000)p Fj(1)1718 2302 y Fs(are)164 2362 y(\014nite)13
b(and)i(hop)q(efully)e(small,)g(c)o(hec)o(king)f(all)i(com)o(binations)
e(is)i(not)h(to)q(o)g(time)c(consum-)164 2422 y(ing.)21
b(Ho)o(w)o(ev)o(er,)14 b(for)i(eac)o(h)f(com)o(bination,)f(w)o(e)i
(need)f(to)h(c)o(hec)o(k)e(all)i(the)f(b)q(elief)g(states)h(in)164
2482 y Fd(region)o Fs(\()p Fm(p;)394 2470 y Fs(^)380
2482 y Fn(Q)421 2464 y Fk(a)421 2495 y(t)442 2482 y Fs(\).)21
b(This)c(w)o(e)e(can)i(do)f(using)h(linear)f(programming.)949
2607 y(29)p eop
%%Page: 30 30
30 29 bop 237 315 a Fs(F)l(or)17 b(eac)o(h)e(com)o(bination)g(of)i
Fm(p)p Fs(,)f Fm(o)p Fs(,)g Fm(p)899 297 y Fl(0)927 315
y Fs(w)o(e)g(compute)f(the)h(v)o(ector)336 425 y Fm(\014)g
Fs(=)e Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)731
405 y Fl(0)743 425 y Fs(\))p Fm(;)8 b(a;)g(o)p Fs(\))j
Fn(\000)g Fd(bac)n(k)p Fs(\()p Fd(v)m(alue)o Fs(\()p
Fd(c)n(hoice)p Fs(\()p Fm(p;)d(o)p Fs(\)\))p Fm(;)g(a;)g(o)p
Fs(\))p Fm(:)164 535 y Fs(F)l(or)17 b(an)o(y)g(b)q(elief)f(state,)g
Fm(b)p Fs(,)h Fm(\014)d Fn(\001)d Fm(b)17 b Fs(giv)o(es)f(the)g
(\(undiscoun)o(ted\))h(adv)m(an)o(tage)h(of)f(follo)o(wing)164
596 y(p)q(olicy)23 b(tree)f Fm(p)443 603 y Fj(new)530
596 y Fs(instead)h(of)h Fm(p)f Fs(starting)h(from)e Fm(b)p
Fs(.)42 b(W)l(e'd)23 b(lik)o(e)e(to)i(\014nd)h(a)g Fm(b)e
Fs(that)164 656 y(maximi)o(zes)14 b(this)i(adv)m(an)o(tage)i(under)f
(the)f(restriction)g(that)h Fm(b)e Fn(2)f Fd(region)p
Fs(\()p Fm(p;)1605 643 y Fs(^)1591 656 y Fn(Q)1632 638
y Fk(a)1632 668 y(t)1652 656 y Fs(\))j(\(i.e.,)164 716
y(that)g(w)o(e)e(w)o(ould)i(ha)o(v)o(e)e(follo)o(w)o(ed)g
Fm(p)i Fs(in)f(the)g(\014rst)h(place\).)237 776 y(The)i(linear)e
(program)h(in)h(T)l(able)f(6)h(solv)o(es)f(exactly)f(this)h(problem.)26
b(It)18 b(has)h(a)g(set)164 836 y(of)c(region)g(constrain)o(ts)f(that)h
(restrict)f Fm(b)g Fs(to)h(the)g(region)f(o)o(v)o(er)g(whic)o(h)g
Fm(p)h Fs(is)f(optimal)f(and)164 897 y(a)18 b(set)g(of)g(simplex)d
(constrain)o(ts)j(that)h(force)e Fm(b)h Fs(to)g(b)q(e)g(a)g(w)o
(ell-formed)d(b)q(elief)i(state.)26 b(It)164 957 y(then)18
b(seeks)f(to)i(maximi)o(ze)c(the)i(adv)m(an)o(tage)j(of)e
Fm(p)1083 964 y Fj(new)1165 957 y Fs(o)o(v)o(er)f Fm(p)p
Fs(.)27 b(Since)17 b(the)h(constrain)o(ts)164 1017 y(and)d(the)g(adv)m
(an)o(tage)h(function)f(are)g(all)f(linear,)g(this)h(can)g(b)q(e)g
(accomplished)e(b)o(y)i(linear)164 1077 y(programming.)26
b(The)19 b(total)f(size)g(of)h(the)f(linear)g(program)g(is)g(one)h(v)m
(ariable)f(for)g(eac)o(h)164 1137 y(comp)q(onen)o(t)f(of)h(the)g(b)q
(elief)f(state)h(and)h(one)f(constrain)o(t)g(for)g(eac)o(h)g(p)q(olicy)
f(tree)h(in)1735 1125 y(^)1721 1137 y Fn(Q)1762 1119
y Fk(a)1762 1150 y(t)164 1198 y Fs(plus)e(one)h(constrain)o(t)f(to)g
(ensure)h(that)f(the)g(b)q(elief)f(state)i(sums)e(to)i(unit)o(y)l(.)237
1258 y(If)e(the)g(linear)f(program)h(\014nds)h(that)g(the)f(biggest)g
(adv)m(an)o(tage)i(is)e(not)g(p)q(ositiv)o(e,)g(i.e.)164
1318 y(max)255 1325 y Fk(b)280 1318 y Fm(\014)e Fn(\001)e
Fm(b)j Fn(\024)f Fs(0,)k(then)f Fm(p)623 1325 y Fj(new)703
1318 y Fs(is)g(not)g(an)h(impro)o(v)o(em)o(en)n(t)d(o)o(v)o(er)h
Fm(p)p Fs(.)22 b(Otherwise,)15 b(it)g(is)h(and)164 1378
y Fm(b)g Fs(is)g(a)h(witness)f(p)q(oin)o(t.)237 1438
y(T)l(able)h(7)h(giv)o(es)e(the)h(complete)e(algorithm.)23
b(It)17 b(in)o(tro)q(duces)g(some)f(additional)h(no-)164
1499 y(tation)k(for)f(e\016ciency)e(reasons.)34 b(The)20
b(external)f(v)m(ariable)h(\\)p Fr(che)n(ckme)6 b Fs(")20
b(holds)h(on)g(to)164 1559 y(the)16 b(triple)g Fm(p)p
Fs(,)h Fm(o)p Fs(,)f Fm(p)511 1541 y Fl(0)540 1559 y
Fs(that)h(needs)g(to)g(b)q(e)f(c)o(hec)o(k)o(ed)f(next)h(in)g
Ff(findb)p Fs(.)21 b(The)16 b(function)h(call)164 1619
y Ff(nextcheckm)o(e)m Fs(\()p Fr(che)n(ckme)5 b Fs(\))16
b(is)g(in)o(tended)e(to)j(return)e(the)h(next)g(triple)e(to)j(c)o(hec)o
(k)d(or)i Ff(nil)164 1679 y Fs(if)j(all)g(ha)o(v)o(e)g(b)q(een)g(c)o
(hec)o(k)o(ed.)29 b(The)19 b(implem)o(en)o(tation)e(of)i(these)h
(functions)f(is)h(hea)o(vily)164 1739 y(language)d(dep)q(enden)o(t)f
(and)h(so)g(is)f(not)g(addressed)h(in)f(this)g(pap)q(er.)237
1800 y(Note)c(that)h(in)f(this)g(function,)h(once)f(a)h(region)g(has)g
(b)q(een)f(searc)o(hed)g(and)h(no)g(witness)164 1860
y(p)q(oin)o(t)j(is)g(found,)g(it)g(is)f(nev)o(er)g(c)o(hec)o(k)o(ed)f
(again.)22 b(This)16 b(is)g(safe)g(b)q(ecause)g(the)g(only)g(thing)164
1920 y(that)c(c)o(hanges)f(b)q(et)o(w)o(een)f(successiv)o(e)g(calls)h
(is)g(that)h(new)f(p)q(olicy)g(trees)f(are)i(added)f(to)1722
1907 y(^)1708 1920 y Fn(Q)1749 1902 y Fk(a)1749 1932
y(t)1769 1920 y Fs(.)164 1980 y(Additional)19 b(p)q(olicy)g(trees)g
(can)g(only)g(shrink)h(the)f(existing)f(regions)i(and)g(hence)f(will)
164 2040 y(not)c(in)o(tro)q(duce)f(an)o(y)h(witness)g(p)q(oin)o(ts)g
(in)f(regions)h(that)h(ha)o(v)o(e)e(already)g(b)q(een)h(searc)o(hed.)
237 2100 y(The)f(comparison)f(b)q(et)o(w)o(een)g(the)h(ob)s(jectiv)o(e)
e(v)m(alue)i(and)g(zero)g(in)f Ff(findb)f Fs(ma)o(y)h(seem)164
2161 y(a)19 b(little)d(susp)q(ect.)28 b(F)l(or)18 b(the)h(theoretical)e
(analysis,)h(w)o(e)g(assume)g(that)h(all)e(arithmetic)164
2221 y(uses)c(arbitrary)g(precision)f(rational)h(n)o(um)o(b)q(ers)e
(and)i(hence)f(a)h(direct)f(comparison)g(with)164 2281
y(zero)j(is)h(p)q(ossible.)21 b(In)16 b(practice,)e(ho)o(w)o(ev)o(er,)g
(it)i(ma)o(y)e(b)q(e)i(necessary)f(to)h(c)o(ho)q(ose)h(a)f(preci-)164
2341 y(sion)h(factor,)f Fm(\016)r Fs(,)g(and)h(to)g(compare)f
Fr(obje)n(ctive)21 b Fs(to)c Fm(\016)h Fs(instead)f(of)g(to)g(zero.)22
b(Using)16 b Fm(\016)g(>)f Fs(0)164 2401 y(is)i(equiv)m(alen)o(t)e(to)j
(running)f(appro)o(ximate)f(v)m(alue)g(iteration.)24
b(See)16 b(Section)h(3.3)g(for)g(an)164 2462 y(explanation)f(of)h(ho)o
(w)f(this)g(a\013ects)h(the)f(\014nal)g(results.)949
2607 y(30)p eop
%%Page: 31 31
31 30 bop 164 439 a Fs(Inputs:)297 491 y(^)283 504 y
Fn(Q)324 486 y Fk(a)324 516 y(t)345 504 y Fm(;)8 b(\014)s(;)g(p)164
624 y Fs(V)l(ariables:)283 685 y Fm(b)p Fs([)p Fm(s)p
Fs(])15 b(for)i(eac)o(h)f Fm(s)d Fn(2)h(S)164 805 y Fs(Maximize:)k
Fm(b)11 b Fn(\001)g Fm(\014)164 925 y Fs(Region)16 b(constrain)o(ts:)
283 991 y(F)l(or)h(eac)o(h)e Fm(p)504 998 y Fj(2)541
991 y Fs(in)611 978 y(^)598 991 y Fn(Q)639 972 y Fk(a)639
1003 y(t)659 991 y Fs(:)21 b Fm(b)11 b Fn(\001)g Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\))j Fn(\025)g Fm(b)d Fn(\001)g Fd(v)m(alue)o
Fs(\()p Fm(p)1232 998 y Fj(2)1252 991 y Fs(\))164 1111
y(Simplex)j(constrain)o(ts:)283 1171 y(F)l(or)j(eac)o(h)e
Fm(s)f Fn(2)g(S)t Fs(:)21 b Fm(b)p Fs([)p Fm(s)p Fs(])13
b Fn(\025)h Fs(0)283 1198 y Fi(P)327 1242 y Fk(s)p Fl(2S)401
1231 y Fm(b)p Fs([)p Fm(s)p Fs(])f(=)g(1)369 1447 y(T)l(able)j(6:)22
b(The)16 b(linear)g(program)g(used)g(to)h(\014nd)f(witness)h(p)q(oin)o
(ts.)164 1693 y Ff(findb)n Fs(\()p Fm(a;)8 b Fn(V)390
1700 y Fk(t)p Fl(\000)p Fj(1)449 1693 y Fm(;)485 1681
y Fs(^)471 1693 y Fn(Q)512 1675 y Fk(a)512 1706 y(t)532
1693 y Fm(;)g Fn(M)p Fs(\))16 b(:=)g Fn(f)257 1753 y
Fs(lo)q(op:)351 1814 y(\()p Fm(p;)8 b(o;)g(p)485 1796
y Fl(0)498 1814 y Fs(\))13 b(:=)h Fr(che)n(ckme)351 1874
y Fm(\014)i Fs(:=)d Ff(back)o Fs(\()p Ff(value)n Fs(\()p
Fm(p)753 1856 y Fl(0)765 1874 y Fm(;)8 b Fn(M)p Fs(\))p
Fm(;)g(a;)g(o;)g Fn(M)p Fs(\))i Fn(\000)h Ff(back)o Fs(\()p
Ff(value)n Fs(\()p Fd(c)n(hoice)o Fs(\()p Fm(p;)d(o)p
Fs(\))p Fm(;)g Fn(M)p Fs(\))p Fm(;)g(a;)g(o;)g Fn(M)p
Fs(\))351 1939 y(LP)17 b(:=)f(set)g(up)g(the)g(witness)g(LP)h(\(T)l
(able)f(6\))h(with)1318 1926 y(^)1304 1939 y Fn(Q)1345
1921 y Fk(a)1345 1951 y(t)1366 1939 y Fm(;)8 b(\014)s(;)g(p)351
1999 y Fs(\()p Fm(obj)s(ectiv)r(e;)g(b)p Fs(\))14 b(:=)h
Ff(solveLP)p Fs(\(LP\))351 2059 y Fd(if)h Fs(\()p Fm(obj)s(ectiv)r(e)c
(>)h Fs(0\))k Fd(return)f Fm(b)351 2120 y Fr(che)n(ckme)j
Fs(:=)13 b Ff(nextcheckme)l Fs(\()p Fr(che)n(ckme)5 b
Fs(\))351 2180 y Fd(if)16 b Fs(\()p Fr(che)n(ckme)j Fs(=)14
b Ff(nil)n Fs(\))j Fd(return)e Ff(nil)351 2240 y Fd(goto)h
Fs(lo)q(op)164 2300 y Fn(g)456 2456 y Fs(T)l(able)h(7:)k(Pseudo)q(co)q
(de)d(for)e(\014nding)h(a)f(witness)h(p)q(oin)o(t.)949
2607 y(31)p eop
%%Page: 32 32
32 31 bop 164 315 a Fq(6.5)70 b(Analysis)22 b(of)h(running)g(time)164
408 y Fs(This)16 b(section)g(analyzes)g(the)g(running)h(time)d(of)i
(the)g(witness)h(algorithm.)164 506 y Fd(Theorem)g(6)24
b Fr(\(R)o(unning)c(time)f(of)g(witness\):)26 b(The)19
b(running)h(time)f(of)g(a)f(single)j(p)n(ass)164 566
y(of)d(value)h(iter)n(ation)g(using)g(the)f(witness)i(algorithm)e(is)g
(b)n(ounde)n(d)g(by)g(a)g(p)n(olynomial)h(in)164 627
y(the)c(size)g(of)g(the)g(state)h(sp)n(ac)n(e)e(\()p
Fn(jS)t(j)p Fr(\),)h(the)g(size)g(of)g(the)g(action)g(sp)n(ac)n(e)g(\()
p Fn(jAj)p Fr(\),)f(the)i(numb)n(er)164 687 y(of)h(p)n(olicy)f(tr)n(e)n
(es)h(in)g(the)h(r)n(epr)n(esentation)f(of)f(the)i(pr)n(evious)f(iter)n
(ation)-5 b('s)16 b(value)j(function)164 747 y(\()p Fn(jV)229
754 y Fk(t)p Fl(\000)p Fj(1)288 747 y Fn(j)p Fr(\),)e(the)h(numb)n(er)f
(of)g(observations)h(\()p Fn(jO)q(j)p Fr(\),)f(and)g(the)h(numb)n(er)f
(of)g(p)n(olicy)g(tr)n(e)n(es)g(in)164 807 y(the)h(r)n(epr)n
(esentation)f(of)h(the)g(curr)n(ent)f(iter)n(ation)-5
b('s)18 b Fm(Q)p Fr(-functions)g(\()1386 774 y Fi(P)1430
818 y Fk(a)1459 807 y Fn(jQ)1514 789 y Fk(a)1514 819
y(t)1535 807 y Fn(j)p Fr(\).)237 906 y Fs(Note)g(that)i(w)o(e)e(m)o
(ust)f(assume)h(that)h(the)g(n)o(um)o(b)q(er)e(of)i(bits)f(of)h
(precision)f(used)h(in)164 966 y(sp)q(ecifying)14 b(the)g(mo)q(del,)g
Fn(M)p Fs(,)g(is)g(p)q(olynomial)g(in)g(these)h(quan)o(tities)e(since)h
(the)h(running)164 1026 y(time)20 b(of)i(linear)f(programming)g(is)g
(expressed)h(as)g(a)g(function)g(of)g(the)g(input)g(preci-)164
1086 y(sion)264 1082 y([)278 1086 y(Sc)o(hrijv)o(er,)14
b(1986)591 1082 y(])606 1086 y(.)237 1146 y(Pro)q(of:)20
b(W)l(e)11 b(w)o(ould)g(lik)o(e)e(to)j(b)q(ound)g(the)f(running)g(time)
e(of)j(a)f(single)g(call)f(to)h Ff(witness)164 1207 y
Fs(\(T)l(able)16 b(5\).)22 b(The)16 b(w)o(ork)g(can)h(b)q(e)f(divided)f
(up)h(as)h(follo)o(ws.)237 1267 y(Eac)o(h)f(time)e(the)i(witness)g
(linear)g(program)g(\(T)l(able)g(6\))g(is)g(solv)o(ed,)f(either)h(a)g
Fm(p;)8 b(o;)g(p)1770 1249 y Fl(0)164 1327 y Fs(triple)14
b(can)h(b)q(e)g(discarded,)f(or)h(a)h(witness)f(is)f(found)i(and)f(is)g
(turned)g(in)o(to)f(a)h(p)q(olicy)g(tree)164 1387 y(and)f(added)g(to)
468 1374 y(^)454 1387 y Fn(Q)495 1369 y Fk(a)495 1399
y(t)516 1387 y Fs(.)20 b(Th)o(us)14 b(the)f(total)h(n)o(um)o(b)q(er)e
(of)i(linear)f(programs)g(solv)o(ed)g(in)h(\014nding)164
1447 y(the)i Fm(Q)p Fs(-function)g(for)g(action)h Fm(a)f
Fs(is)g(exactly)711 1543 y Fn(jQ)766 1523 y Fk(a)766
1556 y(t)787 1543 y Fn(jjO)q(jjV)915 1550 y Fk(t)p Fl(\000)p
Fj(1)974 1543 y Fn(j)10 b Fs(+)h Fn(jQ)1102 1523 y Fk(a)1102
1556 y(t)1123 1543 y Fn(j)g(\000)g Fs(1)p Fm(:)164 1640
y Fs(This)16 b(is)f(the)g(sum)g(of)h(the)f(n)o(um)o(b)q(er)f(of)i
Fm(p;)8 b(o;)g(p)994 1622 y Fl(0)1022 1640 y Fs(triples)15
b(encoun)o(tered)g(during)h(the)f(com-)164 1700 y(putation)20
b(plus)f(the)g(n)o(um)o(b)q(er)f(of)h(witnesses)g(found)h(\(min)o(us)e
(one)h(b)q(ecause)h(no)g(linear)164 1760 y(program)c(is)g(needed)g(to)g
(iden)o(tify)f(the)h(\014rst)g(witness.\))237 1820 y(Eac)o(h)i(of)f
(these)h(linear)e(programs)i(has)g Fn(jS)t(j)f Fs(v)m(ariables)h(and)g
Fn(j)1389 1808 y Fs(^)1376 1820 y Fn(Q)1417 1802 y Fk(a)1417
1833 y(t)1437 1820 y Fn(j)12 b Fs(+)g(1)k Fn(\024)g(jQ)1663
1802 y Fk(a)1663 1833 y(t)1683 1820 y Fn(j)c Fs(+)g(1)164
1880 y(constrain)o(ts.)20 b(The)13 b(total)h(w)o(ork)f(due)g(to)g
(solving)g(linear)f(programs)h(consists)h(of)f(solving)164
1941 y(a)i(p)q(olynomial)e(n)o(um)o(b)q(er)f(of)j(p)q(olynomial-sized)d
(linear)i(programs,)g(eac)o(h)g(of)g(whic)o(h)g(can)164
2001 y(b)q(e)i(solv)o(ed)g(in)g(p)q(olynomial)f(time)797
1997 y([)811 2001 y(Sc)o(hrijv)o(er,)e(1986)1123 1997
y(])1138 2001 y(.)237 2061 y(The)21 b(other)f(w)o(ork)h(p)q(erformed)e
(is)h(primarily)e(in)i(calls)g(to)h Ff(back)e Fs(and)i
Ff(besttree)m Fs(,)164 2121 y(eac)o(h)i(of)i(whic)o(h)e(is)g(trivially)
f(implem)o(en)o(te)o(d)f(to)k(run)f(in)f(p)q(olynomial)g(time.)42
b(Eac)o(h)164 2181 y(routine)14 b(is)h(called)f(only)g(a)h(p)q
(olynomial)f(n)o(um)o(b)q(er)e(of)j(times:)k Ff(back)13
b Fs(is)i(called)e(t)o(wice)h(p)q(er)164 2242 y(linear)k(program)g(and)
i Ff(besttree)15 b Fs(is)k(solv)o(ed)f(once)g(for)h(eac)o(h)g(witness)f
(and)i(therefore)164 2302 y(eac)o(h)c(p)q(olicy)f(tree)h(in)g
Fn(jQ)627 2284 y Fk(a)627 2314 y(t)647 2302 y Fn(j)p
Fs(.)237 2362 y(The)23 b Ff(witness)e Fs(function)i(is)g(called)f
Fn(jAj)h Fs(times)e(p)q(er)i(iteration)g(and)h(a)f(total)h(of)164
2389 y Fi(P)208 2433 y Fk(a)237 2422 y Fn(jQ)292 2404
y Fk(a)292 2434 y(t)312 2422 y Fn(j)15 b Fs(p)q(olicy)f(trees)h(are)g
(created)f(and)i(sen)o(t)e(to)i Ff(purge)p Fs(.)j(Section)14
b(7.4)h(explains)g(ho)o(w)164 2482 y Ff(purge)f Fs(is)i(impleme)o(n)o
(ted)d(in)j(p)q(olynomial)f(time.)949 2607 y(32)p eop
%%Page: 33 33
33 32 bop 237 315 a Fs(Th)o(us,)15 b(the)g(total)g(run)o(time)d(of)j(a)
g(single)g(iteration)f(of)h(v)m(alue)g(iteration)f(tak)o(es)h(p)q(oly-)
164 376 y(nomial)g(time)f(in)i(the)g(quan)o(tities)f(listed.)20
b Fc(2)164 542 y Ft(7)83 b(Odds)26 b(and)i(ends)164 652
y Fs(This)22 b(section)f(con)o(tains)g(sev)o(eral)g(results)g(needed)g
(elsewhere)g(in)g(the)g(pap)q(er)h(whose)164 712 y(inclusion)15
b(w)o(ould)i(ha)o(v)o(e)e(in)o(terrupted)g(the)h(\015o)o(w.)164
856 y Fq(7.1)70 b(Comparison)22 b(to)h(the)g(earlier)e(witness)g
(algorithm)164 949 y Fs(W)l(e)11 b(sk)o(etc)o(hed)f(an)h(earlier)f(v)o
(ersion)h(of)h(the)e(witness)i(algorithm)e(in)h(a)g(recen)o(t)f(pap)q
(er)1674 945 y([)1688 949 y(Cas-)164 1009 y(sandra)19
b Fr(et)h(al.)p Fs(,)f(1994)562 1005 y(])577 1009 y(.)27
b(The)18 b(gross)h(structure)f(of)g(the)g(algorithm)f(presen)o(ted)h
(here)f(is)164 1069 y(iden)o(tical)i(to)j(that)f(of)h(the)f(earlier)f
(algorithm:)29 b(b)q(oth)22 b(use)g(v)m(alue)e(iteration)h(to)h(\014nd)
164 1129 y(an)15 b(appro)o(ximate)e(represen)o(tation)h(of)h(the)g(v)m
(alue)f(function)h(using)g(\014nite-horizon)f(p)q(ol-)164
1189 y(icy)k(trees.)27 b(The)19 b(primary)e(di\013erence)g(is)i(that)g
(where)f(the)g(curren)o(t)g(algorithm)f(\014nds)164 1250
y(a)k(represen)o(tation)f(for)i Fm(Q)651 1231 y Fk(a)651
1262 y(t)692 1250 y Fs(and)f(creates)g(from)e(that)j(a)f(represen)o
(tation)f(for)h Fm(V)1664 1257 y Fk(t)1680 1250 y Fs(,)g(the)164
1310 y(earlier)15 b(algorithm)h(attempted)f(to)i(solv)o(e)f(for)h
Fm(V)1055 1317 y Fk(t)1087 1310 y Fs(directly)l(.)k(Although)c(the)f
(di\013erence)164 1370 y(ma)o(y)f(seem)f(subtle,)i(it)f(has)i(profound)
h(consequences.)237 1430 y(The)23 b(main)f(distinction)g(b)q(et)o(w)o
(een)g(the)g(t)o(w)o(o)h(approac)o(hes)h(comes)d(do)o(wn)j(to)f(the)164
1490 y(follo)o(wing)16 b(fact.)21 b(Consider)16 b(the)g
Fm(Q)p Fr(-function)i(witness)h(pr)n(oblem)d Fs(de\014ned)g(as:)21
b(Giv)o(en)16 b(a)164 1550 y(set)f(of)g Fm(t)p Fs(-step)g(p)q(olicy)g
(trees,)715 1538 y(^)701 1550 y Fn(Q)742 1532 y Fk(a)742
1563 y(t)763 1550 y Fs(,)g(that)g(constitutes)g(a)h(partial)f(represen)
o(tation)f(of)i Fm(Q)1749 1532 y Fk(a)1749 1563 y(t)1769
1550 y Fs(,)164 1611 y(and)j(a)f(set)g(of)h Fm(t)12 b
Fn(\000)g Fs(1-step)19 b(p)q(olicy)e(trees,)h Fn(V)975
1618 y Fk(t)p Fl(\000)p Fj(1)1034 1611 y Fs(,)g(that)h(exactly)e
(represen)o(ts)g(the)h Fm(t)12 b Fn(\000)g Fs(1-)164
1671 y(step)j(v)m(alue)f(function,)h(is)f(there)g(a)h(p)q(oin)o(t,)g
Fm(b)p Fs(,)f(at)h(whic)o(h)f(the)h(partial)f(represen)o(tation)h(of)
164 1731 y Fm(Q)203 1713 y Fk(a)203 1743 y(t)242 1731
y Fs(is)j(not)g(exact?)27 b(As)18 b(sho)o(wn)h(in)f(this)g(pap)q(er,)h
(this)f(question)g(can)h(b)q(e)f(answ)o(ered)g(in)164
1791 y(p)q(olynomial)d(time.)237 1851 y(Surprisingly)l(,)g(the)g(same)g
(question)g(applied)g(to)h Fm(V)c Fs(-functions)k(is)f(m)o(uc)o(h)f
(more)g(dif-)164 1912 y(\014cult:)25 b(the)18 b(corresp)q(onding)h
Fm(V)11 b Fr(-function)22 b(witness)e(pr)n(oblem)e Fs(is)h
(NP-complete.)25 b(This)164 1972 y(means)16 b(that)i(there)e(is)h(a)g
(p)q(olynomial)f(time)f(algorithm)h(to)h(solv)o(e)g(it)f(if)h(and)g
(only)g(if)g(P)164 2032 y(=)d(NP)l(.)f(This)g(can)h(b)q(e)g(sho)o(wn)g
(using)g(a)h(somewhat)e(messy)f(reduction)h(to)h(MAX-2-SA)l(T)164
2092 y(or)g(quadratic)g(programming)735 2088 y([)749
2092 y(Garey)g(and)g(Johnson,)i(1979)1283 2088 y(])1298
2092 y(.)k(Our)14 b(earlier)f(algorithm)164 2152 y(claimed)e(to)k(solv)
o(e)e(the)h Fm(V)d Fs(-function)j(witness)g(problem)e(in)i(p)q
(olynomial)e(time.)19 b(In)13 b(fact,)164 2213 y(the)18
b(algorithm)g(runs)h(in)f(p)q(olynomial)g(time)e(but)j(will)f(not)h
(alw)o(a)o(ys)f(giv)o(e)g(correct)g(an-)164 2273 y(sw)o(ers.)j(It)14
b(is)h(p)q(ossible)g(to)h(construct)f(cases)g(in)g(whic)o(h)f(it)g
(fails)h(to)g(\014nd)h(witness)f(p)q(oin)o(ts)164 2333
y(in)i(certain)f(regions)i(of)f(b)q(elief)f(space)i(with)f(the)g
(result)g(that)g(the)g(algorithm)f(ma)o(y)g(re-)164 2393
y(p)q(ort)d(\\there)f(is)g(no)g(di\013erence)g(b)q(et)o(w)o(een)f(the)h
(true)g Fm(V)1126 2400 y Fk(t)1153 2393 y Fs(and)h(our)f(appro)o
(ximation")g(when)164 2453 y(in)k(fact)g(witnesses)g(to)h(this)f
(di\013erence)f(exist.)949 2607 y(33)p eop
%%Page: 34 34
34 33 bop 237 315 a Fs(The)19 b(di\016cult)o(y)e(of)i(the)g
Fm(V)11 b Fs(-function)19 b(witness)g(problem)e(stems)g(from)h(the)h
(break-)164 376 y(do)o(wn)h(of)h(the)e(Witness)h(Theorem)f(\(Theorem)g
(5\))h(for)g Fm(V)11 b Fs(-functions.)33 b(The)20 b(Witness)164
436 y(Theorem)d(tells)h(us)h(that)g(to)g(determine)d(if)i(there)g(is)g
(an)h(impro)o(v)o(em)o(en)n(t)d(that)j(can)g(b)q(e)164
496 y(made)14 b(to)h(the)g Fm(Q)p Fs(-function,)g(w)o(e)g(need)f(only)h
(examine)e(a)j(p)q(olynomial)e(n)o(um)o(b)q(er)f(of)i(can-)164
556 y(didate)k(p)q(olicy)f(trees)g(\(those)h(deriv)o(ed)e(from)h(all)g
Fn(jQ)1146 538 y Fk(a)1146 569 y(t)1167 556 y Fn(jjO)q(jjV)1295
563 y Fk(t)p Fl(\000)p Fj(1)1353 556 y Fn(j)h Fs(w)o(a)o(ys)g(of)g(com)
o(bining)164 616 y Fm(p)p Fs(,)i Fm(o)p Fs(,)h(and)f
Fm(p)405 598 y Fl(0)417 616 y Fs(\).)33 b(On)20 b(the)h(other)f(hand,)i
(no)e(simple)e(test)j(is)f(kno)o(wn)g(for)h(\014nding)f(im-)164
677 y(pro)o(v)o(emen)o(ts)e(in)i(the)g Fm(V)12 b Fs(-function.)34
b(It)20 b(app)q(ears)h(that)g(it)f(is)h(necessary)f(to)h(c)o(hec)o(k)d
(an)164 737 y(exp)q(onen)o(tial)j(n)o(um)o(b)q(er)g(of)h(com)o
(binations)f(\(all)h Fn(j)p Fm(A)p Fn(jjO)q(j)1206 719
y Fl(jV)1238 724 y Fb(t)p Fe(\000)p Fa(1)1289 719 y Fl(j)1323
737 y Fs(p)q(ossible)h Fm(t)p Fs(-step)f(p)q(olicy)164
797 y(trees\).)237 857 y(Th)o(us,)12 b(the)g(extra)f(constrain)o(t)h
(of)f(holding)h(the)g(\014rst)f(action)h(in)f(the)h(p)q(olicy)e
(constan)o(t)164 917 y(yields)18 b(great)h(computational)g(lev)o
(erage.)28 b(The)19 b(do)o(wnside)g(is)g(that)g(the)g
Fm(Q)p Fs(-functions)164 978 y(migh)o(t)13 b(b)q(e)j(a)f(great)h(deal)f
(more)e(complicated)g(than)j(the)f(monolithic)e Fm(V)e
Fs(-function)k(and)164 1038 y(therefore)f(migh)o(t)f(require)g(a)j
(great)f(deal)f(more)g(w)o(ork)g(to)h(deriv)o(e.)20 b(But)14
b(since)g(w)o(e)g(allo)o(w)164 1098 y(ourselv)o(es)j(time)f(p)q
(olynomial)g(in)i(the)f(size)g(of)i(the)e Fm(Q)p Fs(-function,)h(this)f
(is)h(not)g(coun)o(ted)164 1158 y(against)k(us.)37 b(In)21
b(a)g(sense,)h(the)f(apparen)o(t)h(e\016ciency)d(of)j(the)f(revised)f
(algorithm)g(is)164 1218 y(a)e(sleigh)o(t)f(of)i(hand:)25
b(w)o(e)17 b(are)h(measuring)f(the)h(p)q(erformance)f(of)h(the)g(t)o(w)
o(o)g(algorithms)164 1279 y(di\013eren)o(tly)l(.)i(Nonetheless,)c(w)o
(e)g(feel)f(b)q(ounding)j(the)e(computation)g(b)o(y)g(a)h(p)q
(olynomial)164 1339 y(in)d(the)h(size)f(of)h(the)f Fm(Q)p
Fs(-functions)h(is)g(b)q(etter)f(than)h(b)q(ounding)h(it)f(as)g(an)g
(exp)q(onen)o(tial)f(in)164 1399 y(the)19 b(size)f(of)h(the)f
Fm(V)12 b Fs(-function)18 b(since)h(in)f(the)h(case)g(when)f(b)q(oth)i
(functions)f(are)g(small,)164 1459 y(our)e(running)f(time)e(will)h(b)q
(e)i(small)d(also.)237 1519 y(The)j(NP-completeness)e(result)h(only)h
(applies)f(to)h(sp)q(eci\014c)f(iterativ)o(e)f(approac)o(hes)164
1579 y(to)21 b(impro)o(ving)e(the)i(v)m(alue)g(function)f(represen)o
(tation.)35 b(It)20 b(ma)o(y)g(b)q(e)h(p)q(ossible,)h(using)164
1640 y(more)11 b(of)j(the)e(structure)h(of)g(the)f(problem)g(at)h
(hand,)g(to)h(\014nd)f(a)g(represen)o(tation)f(quic)o(kly)164
1700 y(for)g(the)f Fm(V)h Fs(-function)g(without)g(\014rst)g
(generating)g(a)g(represen)o(tation)f(for)h(eac)o(h)f
Fm(Q)1627 1682 y Fk(a)1627 1712 y(t)1648 1700 y Fs(.)19
b(Suc)o(h)164 1760 y(an)e(algorithm)e(has)i(eluded)e(us)i(th)o(us)f
(far.)237 1820 y(Tw)o(o)i(additional)g(p)q(oin)o(ts)g(are)g(w)o(orth)g
(making)f(here.)25 b(First,)18 b(although)g(the)g(algo-)164
1880 y(rithm)12 b(describ)q(ed)g(in)h(our)h(earlier)e(pap)q(er)927
1876 y([)941 1880 y(Cassandra)j Fr(et)h(al.)p Fs(,)e(1994)1404
1876 y(])1432 1880 y(w)o(as)g(not)g(formally)164 1941
y(correct,)k(the)h(exp)q(erimen)o(tal)d(results)i(rep)q(orted)i(there)e
(w)o(ere)g(v)m(alid.)28 b(W)l(e)19 b(ha)o(v)o(e)f(rerun)164
2001 y(the)g(same)f(examples)f(with)i(the)f(revised)g(algorithm)g(and)i
(found)f(no)h(imp)q(ortan)o(t)e(dif-)164 2061 y(ferences.)237
2121 y(Secondly)l(,)k(although)h(the)f(presen)o(t)g(algorithm)f(p)q
(oten)o(tially)g(do)q(es)i(a)g(great)f(deal)164 2181
y(more)15 b(w)o(ork)g(than)i(the)e(original)h(one,)g(it)f(do)q(es)i(ha)
o(v)o(e)e(the)h(imp)q(ortan)o(t)f(adv)m(an)o(tage)h(that)164
2242 y(no)e(error)f(tolerance)f(factor)i(need)e(b)q(e)i(sp)q(eci\014ed)
e(in)h(adv)m(ance.)21 b(The)13 b(witness)g(algorithm)164
2302 y(is)j(an)h(exact)e(metho)q(d.)949 2607 y(34)p eop
%%Page: 35 35
35 34 bop 164 315 a Fq(7.2)70 b(Computing)22 b(the)g(Bellman)e
(residual)164 408 y Fs(In)j(deciding)g(when)h(the)g(curren)o(t)f(appro)
o(ximation)f(to)i(the)g(in\014nite-horizon)f(v)m(alue)164
468 y(function)11 b(is)h(go)q(o)q(d)i(enough,)f(the)e
Ff(solvepomdp)d Fs(algorithm)j(calls)g Ff(difference)d
Fs(to)k(com-)164 528 y(pute)18 b(the)f(Bellman)e(residual.)26
b(Recall)16 b(that)i(the)g(Bellman)d(residual)j(is)f(the)h(greatest)164
588 y(di\013erence)d(b)q(et)o(w)o(een)g(the)h(v)m(alue)g(functions)h
(of)f(t)o(w)o(o)g(successiv)o(e)f(iterations.)237 649
y(W)l(e)24 b(ha)o(v)o(e)f(lo)q(ok)o(ed)h(at)g(t)o(w)o(o)g(metho)q(ds)f
(for)i(computing)e(the)g(Bellman)f(residual.)164 709
y(One)e(is)h(exact)f(and)h(somewhat)f(exp)q(ensiv)o(e.)33
b(The)21 b(other)f(is)h(w)o(eak)f(but)h(v)o(ery)e(c)o(heap)164
769 y(to)j(compute.)37 b(W)l(e)22 b(ha)o(v)o(e)f(only)h(implem)o(en)o
(ted)d(the)i(w)o(eak)h(metho)q(d)f(for)i(use)f(in)f(our)164
829 y(exp)q(erimen)o(ts)423 811 y Fj(3)440 829 y Fs(.)e(There)11
b(are)g(actually)f(man)o(y)g(w)o(a)o(ys)h(to)g(compute)e(the)i(Bellman)
d(residual)164 889 y(but)14 b(since)g(w)o(e)g(w)o(ere)f(satis\014ed)i
(with)f(the)g(w)o(eak)g(metho)q(d)f(in)h(our)h(exp)q(erimen)o(ts,)c(w)o
(e)j(did)164 950 y(not)j(pursue)f(this)g(issue)g(v)o(ery)f(deeply)l(.)
164 1077 y Fd(7.2.1)55 b(An)19 b(exact)f(metho)r(d)164
1170 y Fs(Brie\015y)l(,)24 b(the)f(exact)g(metho)q(d)g(considers)h(all)
f(pairs)h(of)g(p)q(olicy)f(trees)g Fm(p)1534 1177 y Fk(t)1576
1170 y Fn(2)j(V)1666 1177 y Fk(t)1704 1170 y Fs(and)164
1230 y Fm(p)188 1237 y Fk(t)p Fl(\000)p Fj(1)264 1230
y Fn(2)17 b(V)345 1237 y Fk(t)p Fl(\000)p Fj(1)404 1230
y Fs(.)26 b(It)17 b(then)g(uses)h(linear)f(programming)f(to)i(\014nd)g
(a)g Fm(b)e Fn(2)g Fd(region)o Fs(\()p Fm(p)1636 1237
y Fk(t)1652 1230 y Fm(;)8 b Fn(V)1705 1237 y Fk(t)1719
1230 y Fs(\))k Fn(\\)164 1290 y Fd(region)o Fs(\()p Fm(p)358
1297 y Fk(t)p Fl(\000)p Fj(1)419 1290 y Fm(;)c Fn(V)472
1297 y Fk(t)p Fl(\000)p Fj(1)531 1290 y Fs(\))k(\(if)g(it)g(is)g
(non-empt)o(y\))f(suc)o(h)h(that)h Fn(j)p Fm(b)s Fn(\001)s
Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)1422 1297 y Fk(t)1438
1290 y Fs(\))s Fn(\000)s Fd(v)m(alue)o Fs(\()p Fm(p)1671
1297 y Fk(t)p Fl(\000)p Fj(1)1731 1290 y Fs(\)\))p Fn(j)164
1350 y Fs(is)19 b(maximi)o(ze)o(d.)26 b(The)19 b(maxim)o(um)14
b(di\013erence)k(o)o(v)o(er)g(all)g(pairs)h(of)g(p)q(olicy)f(trees)h
(is)f(the)164 1410 y(maxim)o(um)12 b(di\013erence)j(b)q(et)o(w)o(een)g
Fm(V)826 1417 y Fk(t)858 1410 y Fs(and)h Fm(V)980 1417
y Fk(t)p Fl(\000)p Fj(1)1041 1410 y Fs(.)237 1471 y(The)k(linear)e
(program)i(and)g(pseudo)q(co)q(de)h(for)e(this)h(metho)q(d)e(app)q(ear)
j(in)e(T)l(able)h(8)164 1531 y(and)d(T)l(able)f(9,)g(resp)q(ectiv)o
(ely)l(.)164 1658 y Fd(7.2.2)55 b(A)19 b(w)n(eak)g(metho)r(d)164
1751 y Fs(The)g(previous)g(section)g(describ)q(ed)f(a)i(metho)q(d)e
(for)i(computing)e(the)h(maxim)n(um)c(dif-)164 1811 y(ference)i(b)q(et)
o(w)o(een)g(t)o(w)o(o)h(piecewise-linear)f(and)h(con)o(v)o(ex)f(v)m
(alue)h(functions)h(o)o(v)o(er)e(b)q(elief)164 1871 y(space.)k(This)16
b(section)f(describ)q(es)h(a)g(simpler)e(approac)o(h)i(that)g(is)g(m)o
(uc)o(h)d(more)i(e\016cien)o(t)164 1931 y(to)i(compute)d(but)j(only)f
(giv)o(es)f(a)i(w)o(eak)f(upp)q(er)g(b)q(ound)i(on)f(the)f
(di\013erence.)237 1992 y(W)l(e'd)21 b(lik)o(e)e(to)i(\014nd)h(a)f(b)q
(ound)h(on)g(the)f(biggest)g(di\013erence)f(b)q(et)o(w)o(een)g(t)o(w)o
(o)h(v)m(alue)164 2052 y(functions,)12 b Fm(X)t Fs(\()p
Fm(b)p Fs(\))i(=)g Fm(b)q Fn(\001)q Fd(v)m(alue)o Fs(\()p
Fd(b)r(est)o Fs(\()p Fm(b;)8 b Fn(X)f Fs(\)\))k(and)h
Fm(Y)f Fs(\()p Fm(b)p Fs(\))i(=)h Fm(b)q Fn(\001)q Fd(v)m(alue)o
Fs(\()p Fd(b)r(est)o Fs(\()p Fm(b;)8 b Fn(Y)t Fs(\)\).)20
b(The)164 2112 y(follo)o(wing)15 b(theorem)e(giv)o(es)h(a)h(c)o(heap)g
(w)o(a)o(y)g(to)g(b)q(ound)h(the)f(biggest)g(p)q(ositiv)o(e)f
(di\013erence)164 2172 y(b)q(et)o(w)o(een)h Fm(X)21 b
Fs(and)c Fm(Y)11 b Fs(.)164 2269 y Fd(Theorem)17 b(7)24
b Fr(\(We)n(ak)17 b(value)i(function)g(c)n(omp)n(arison\):)i(L)n(et)471
2364 y Fm(\016)15 b Fs(=)f(max)560 2394 y Fk(p)578 2398
y Fb(x)597 2394 y Fl(2X)661 2364 y Fs(min)659 2394 y
Fk(p)677 2398 y Fb(y)695 2394 y Fl(2Y)753 2364 y Fs(max)767
2394 y Fk(s)p Fl(2S)844 2364 y Fs(\()p Fd(v)m(alue)o
Fs(\()p Fm(p)1032 2371 y Fk(x)1055 2364 y Fs(\)[)p Fm(s)p
Fs(])c Fn(\000)g Fd(v)m(alue)o Fs(\()p Fm(p)1353 2371
y Fk(y)1375 2364 y Fs(\)[)p Fm(s)p Fs(]\))p Fm(:)p 164
2437 648 2 v 220 2467 a Fh(3)239 2482 y Fo(In)k(fact,)f(the)h(metho)q
(d)g(w)o(e)g(use)g(is)g(a)g(simpli\014cation)d(of)i(the)i(w)o(eak)e
(metho)q(d)h(describ)q(ed)h(here.)949 2607 y Fs(35)p
eop
%%Page: 36 36
36 35 bop 164 888 a Fs(Inputs:)283 948 y Fm(p)307 955
y Fk(x)330 948 y Fm(;)8 b Fn(X)f Fm(;)h(p)441 955 y Fk(y)461
948 y Fm(;)g Fn(Y)164 1069 y Fs(V)l(ariables:)283 1129
y Fm(b)p Fs([)p Fm(s)p Fs(])15 b(for)i(eac)o(h)f Fm(s)d
Fn(2)h(S)164 1249 y Fs(Maximize:)k Fm(b)11 b Fn(\001)g
Fs(\()p Fd(v)m(alue)o Fs(\()p Fm(p)650 1256 y Fk(x)672
1249 y Fs(\))g Fn(\000)g Fd(v)m(alue)o Fs(\()p Fm(p)921
1256 y Fk(y)942 1249 y Fs(\)\))164 1369 y(Region)16 b(constrain)o(ts:)
283 1430 y(F)l(or)h(eac)o(h)26 b(~)-35 b Fm(p)504 1437
y Fk(x)543 1430 y Fs(in)16 b Fn(X)7 b Fs(:)21 b Fm(b)11
b Fn(\001)g Fd(v)m(alue)o Fs(\()p Fm(p)904 1437 y Fk(x)926
1430 y Fs(\))j Fn(\025)f Fm(b)e Fn(\001)g Fd(v)m(alue)o
Fs(\()g(~)-35 b Fm(p)1237 1437 y Fk(x)1259 1430 y Fs(\))283
1490 y(F)l(or)17 b(eac)o(h)26 b(~)-35 b Fm(p)504 1497
y Fk(y)542 1490 y Fs(in)16 b Fn(Y)t Fs(:)21 b Fm(b)11
b Fn(\001)g Fd(v)m(alue)o Fs(\()p Fm(p)897 1497 y Fk(y)918
1490 y Fs(\))j Fn(\025)g Fm(b)c Fn(\001)h Fd(v)m(alue)o
Fs(\()g(~)-35 b Fm(p)1229 1497 y Fk(y)1250 1490 y Fs(\))164
1610 y(Simplex)14 b(constrain)o(ts:)283 1670 y(F)l(or)j(eac)o(h)e
Fm(s)f Fn(2)g(S)t Fs(:)21 b Fm(b)p Fs([)p Fm(s)p Fs(])13
b Fn(\025)h Fs(0)283 1697 y Fi(P)327 1741 y Fk(s)p Fl(2S)401
1731 y Fm(b)p Fs([)p Fm(s)p Fs(])f(=)g(1)164 1946 y(T)l(able)i(8:)21
b(The)15 b(linear)f(program)h(used)g(to)g(compute)e(the)i(maxim)o(um)10
b(v)m(alue)15 b(di\013erence)164 2007 y(b)q(et)o(w)o(een)g(t)o(w)o(o)h
(p)q(olicy)g(trees.)949 2607 y(36)p eop
%%Page: 37 37
37 36 bop 164 923 a Ff(difference)l Fs(\()p Fn(V)470
930 y Fk(t)p Fl(\000)p Fj(1)530 923 y Fm(;)8 b Fn(V)583
930 y Fk(t)597 923 y Fs(\))16 b(:=)g Fn(f)257 983 y Fr(maxdi\013)25
b Fs(:=)13 b Fn(\0001)257 1043 y Fd(foreac)n(h)k Fm(p)473
1050 y Fk(t)505 1043 y Fd(in)f Fn(V)599 1050 y Fk(t)629
1043 y Fn(f)351 1103 y Fd(foreac)n(h)h Fm(p)567 1110
y Fk(t)p Fl(\000)p Fj(1)643 1103 y Fd(in)f Fn(V)737 1110
y Fk(t)p Fl(\000)p Fj(1)813 1103 y Fn(f)444 1164 y Fs(LP)h(:=)f(set)g
(up)h(the)f(di\013erence)f(LP)i(\(T)l(able)f(8\))g(with)h
Fm(p)1469 1171 y Fk(t)1484 1164 y Fm(;)8 b Fn(V)1537
1171 y Fk(t)1551 1164 y Fm(;)g(p)1597 1171 y Fk(t)p Fl(\000)p
Fj(1)1657 1164 y Fm(;)g Fn(V)1710 1171 y Fk(t)p Fl(\000)p
Fj(1)444 1224 y Fs(\()p Fr(obje)n(ctive)648 1236 y Fj(1)667
1224 y Fm(;)g(b)p Fs(\))16 b(:=)g Ff(solveLP)p Fs(\(LP\))444
1284 y Fd(if)g Fs(\()p Fr(obje)n(ctive)697 1296 y Fj(1)730
1284 y Fs(=)e Ff(nil)o Fs(\))p Fr(obje)n(ctive)1062 1296
y Fj(1)1096 1284 y Fs(:=)f Fn(\0001)444 1344 y Fs(LP)k(:=)f(set)g(up)h
(the)f(di\013erence)f(LP)i(\(T)l(able)f(8\))g(with)h
Fm(p)1469 1351 y Fk(t)p Fl(\000)p Fj(1)1529 1344 y Fm(;)8
b Fn(V)1582 1351 y Fk(t)p Fl(\000)p Fj(1)1641 1344 y
Fm(;)g(p)1687 1351 y Fk(t)1702 1344 y Fm(;)g Fn(V)1755
1351 y Fk(t)444 1404 y Fs(\()p Fr(obje)n(ctive)648 1416
y Fj(2)667 1404 y Fm(;)g(b)p Fs(\))16 b(:=)g Ff(solveLP)p
Fs(\(LP\))444 1465 y Fd(if)g Fs(\()p Fr(obje)n(ctive)697
1476 y Fj(2)730 1465 y Fs(=)e Ff(nil)o Fs(\))p Fr(obje)n(ctive)1062
1476 y Fj(2)1096 1465 y Fs(:=)f Fn(\0001)444 1525 y Fr(maxdi\013)25
b Fs(:=)13 b(max)o(\()p Fr(maxdi\013)d Fm(;)e Fr(obje)n(ctive)1174
1537 y Fj(1)1194 1525 y Fm(;)g Fr(obje)n(ctive)1400 1537
y Fj(2)1420 1525 y Fs(\))351 1585 y Fn(g)257 1645 y(g)257
1705 y Fd(return)16 b Fr(maxdi\013)164 1766 y Fn(g)164
1921 y Fs(T)l(able)g(9:)22 b(Pseudo)q(co)q(de)17 b(for)g(computing)e
(the)h(Bellman)e(residual)i(exactly)f(in)h(p)q(olyno-)164
1981 y(mial)e(time.)949 2607 y(37)p eop
%%Page: 38 38
38 37 bop 472 266 a
 15819190 9472573 7367557 32167280 34601205 48415375 startTexFig
 472 266 a
%%BeginDocument: componentdiff.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
125 532 318 532 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
187 719 276 703 2 L
V
1 H
N
185 619 276 649 2 L
V
N
168 601 168 710 2 L
V
N
186 596 276 603 2 L
V
N
90 450 4 4 232.5 711 G
0 Z
90 450 4 4 232.5 711 A
90 450 4 4 232.5 635 G
90 450 4 4 232.5 635 A
90 450 4 4 232.5 600 G
90 450 4 4 232.5 600 A
168 711 186 711 2 L
V
2 Z
N
168 600 187 600 2 L
V
N
J
234 523 232.5 735 2 L
V
J
234 523 233.98 526.5 2 L
N
[7.069 7.069] 7.069 I
233.98 526.5 232.53 731.5 2 L
N
J
232.53 731.5 232.5 735 2 L
N
J
1 24 Q
(X) 293.97 698 T
(b) 324.35 698 T
0 F
(\050) 314.06 698 T
(\051) 337.45 698 T
1 F
(b) 386.97 698 T
4 F
(v) 416.97 698 T
(a) 430.38 698 T
(l) 443.8 698 T
(u) 451.89 698 T
(e) 466.64 698 T
1 F
(p) 493.02 698 T
1 20 Q
(x) 505.93 688.4 T
2 F
(*) 505.93 712.6 T
0 24 Q
(\350) 478.72 690.93 T
(\370) 517.03 690.93 T
(\346) 478.72 711.5 T
(\366) 517.03 711.5 T
(\327) 404.97 698 T
2 F
(=) 361.45 698 T
1 36 Q
(b) 228.29 489.5 T
1 24 Q
(Y) 292.63 638 T
(b) 321.69 638 T
0 F
(\050) 311.39 638 T
(\051) 334.79 638 T
1 F
(b) 384.31 638 T
4 F
(v) 414.31 638 T
(a) 427.72 638 T
(l) 441.14 638 T
(u) 449.23 638 T
(e) 463.98 638 T
1 F
(p) 490.36 638 T
1 20 Q
(y) 503.27 628.4 T
2 F
(*) 503.27 652.6 T
0 24 Q
(\350) 476.05 630.93 T
(\370) 514.37 630.93 T
(\346) 476.05 651.5 T
(\366) 514.37 651.5 T
(\327) 402.31 638 T
2 F
(=) 358.79 638 T
1 F
(b) 306.26 600 T
4 F
(v) 328.75 600 T
(a) 341.58 600 T
(l) 354.4 600 T
(u) 361.9 600 T
(e) 376.07 600 T
1 F
(p) 401.85 600 T
1 20 Q
(y) 414.76 590.4 T
0 24 Q
(\050) 391.56 600 T
(\051) 424.75 600 T
0 14 Q
(\327) 321.75 600 T
0 36 Q
(d) 140.99 645 T
(\243) 112.23 645 T
2 24 Q
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 165 967 a Fs(Figure)16 b(8:)21 b(W)l(eak)16 b(b)q(ound)i(on)e(the)g
(maxim)o(um)c(di\013erence)j(b)q(et)o(w)o(een)h(v)m(alue)g(functions.)
164 1110 y Fr(Then)i(for)f(al)r(l)i(b)n(elief)f(states,)g
Fm(b)p Fr(,)f Fm(X)t Fs(\()p Fm(b)p Fs(\))11 b Fn(\000)g
Fm(Y)g Fs(\()p Fm(b)p Fs(\))j Fn(\024)f Fm(\016)r Fr(.)237
1224 y Fs(Pro)q(of:)34 b(Consider)22 b(some)g(particular)f(b)q(elief)g
(state,)i Fm(b)p Fs(.)39 b(Let)22 b Fm(p)1436 1206 y
Fl(\003)1436 1236 y Fk(x)1482 1224 y Fs(=)i Fd(b)r(est)o
Fs(\()p Fm(b;)8 b Fn(X)f Fs(\),)164 1284 y Fm(p)188 1266
y Fl(\003)188 1297 y Fk(y)223 1284 y Fs(=)14 b Fd(b)r(est)o
Fs(\()p Fm(b;)8 b Fn(Y)t Fs(\),)16 b(and)471 1394 y Fm(p)495
1401 y Fk(y)530 1394 y Fs(=)e(arg)e(min)668 1424 y Fj(~)-27
b Fk(p)677 1428 y Fb(y)695 1424 y Fl(2Y)753 1394 y Fs(max)767
1424 y Fk(s)p Fl(2S)844 1394 y Fs(\()p Fd(v)m(alue)o
Fs(\()p Fm(p)1032 1374 y Fl(\003)1032 1407 y Fk(x)1054
1394 y Fs(\)[)p Fm(s)p Fs(])10 b Fn(\000)h Fd(v)m(alue)o
Fs(\()f(~)-34 b Fm(p)1353 1401 y Fk(y)1374 1394 y Fs(\)[)p
Fm(s)p Fs(]\))p Fm(:)164 1526 y Fs(F)l(urther,)19 b(de\014ne)g
Fm(\016)h Fs(as)g(in)f(the)g(statemen)o(t)e(of)i(the)g(theorem.)28
b(This)20 b(situation)f(is)g(de-)164 1586 y(picted)c(in)h(Figure)g(8.)
237 1646 y(W)l(e)g(can)h(b)q(ound,)330 1756 y Fm(X)t
Fs(\()p Fm(b)p Fs(\))11 b Fn(\000)g Fm(Y)g Fs(\()p Fm(b)p
Fs(\))42 b(=)g Fm(b)11 b Fn(\001)g Fs(\()p Fd(v)m(alue)n
Fs(\()p Fm(p)958 1735 y Fl(\003)958 1768 y Fk(x)981 1756
y Fs(\))g Fn(\000)g Fd(v)m(alue)o Fs(\()p Fm(p)1230 1735
y Fl(\003)1230 1768 y Fk(y)1251 1756 y Fs(\)\))634 1829
y Fn(\024)41 b Fm(b)11 b Fn(\001)g Fs(\()p Fd(v)m(alue)n
Fs(\()p Fm(p)958 1808 y Fl(\003)958 1841 y Fk(x)981 1829
y Fs(\))g Fn(\000)g Fd(v)m(alue)o Fs(\()p Fm(p)1230 1836
y Fk(y)1251 1829 y Fs(\)\))634 1901 y Fn(\024)41 b Fs(max)727
1931 y Fk(s)p Fl(2S)805 1901 y Fs(\()p Fd(v)m(alue)o
Fs(\()p Fm(p)993 1881 y Fl(\003)993 1914 y Fk(x)1015
1901 y Fs(\)[)p Fm(s)p Fs(])10 b Fn(\000)h Fd(v)m(alue)o
Fs(\()p Fm(p)1314 1908 y Fk(y)1335 1901 y Fs(\)[)p Fm(s)p
Fs(]\))634 1991 y Fn(\024)43 b Fs(min)723 2021 y Fj(~)-27
b Fk(p)732 2025 y Fb(y)750 2021 y Fl(2Y)808 1991 y Fs(max)822
2021 y Fk(s)p Fl(2S)899 1991 y Fs(\()p Fd(v)m(alue)o
Fs(\()p Fm(p)1087 1970 y Fl(\003)1087 2003 y Fk(x)1109
1991 y Fs(\)[)p Fm(s)p Fs(])11 b Fn(\000)f Fd(v)m(alue)o
Fs(\()h(~)-35 b Fm(p)1408 1998 y Fk(y)1429 1991 y Fs(\)[)p
Fm(s)p Fs(]\))634 2088 y Fn(\024)41 b Fs(max)724 2117
y Fj(~)-28 b Fk(p)732 2121 y Fb(x)751 2117 y Fl(2X)815
2088 y Fs(min)822 2117 y Fj(~)h Fk(p)831 2121 y Fb(y)849
2117 y Fl(2Y)907 2088 y Fs(max)921 2117 y Fk(s)p Fl(2S)998
2088 y Fs(\()p Fd(v)m(alue)o Fs(\()11 b(~)-35 b Fm(p)1186
2095 y Fk(x)1209 2088 y Fs(\)[)p Fm(s)p Fs(])10 b Fn(\000)g
Fd(v)m(alue)o Fs(\()h(~)-35 b Fm(p)1507 2095 y Fk(y)1529
2088 y Fs(\)[)p Fm(s)p Fs(]\))634 2182 y Fn(\024)41 b
Fm(\016)o(;)164 2292 y Fs(as)17 b(desired.)j(Since)c
Fm(b)g Fs(is)g(arbitrary)l(,)g(the)g(b)q(ound)h(holds)g(ev)o(erywhere.)
i Fc(2)237 2352 y Fs(Although)d(this)f(b)q(ound)i(can)f(b)q(e)f
(arbitrarily)g(w)o(eak,)g(it)g(is)g(a)h(go)q(o)q(d)i(appro)o(ximation)
164 2412 y(in)13 b(the)f(follo)o(wing)h(sense.)20 b(If)13
b(the)f(p)q(olicy)h(trees)f(in)h Fn(X)20 b Fs(are)13
b(iden)o(tical)e(to)i(the)g(p)q(olicy)f(trees)164 2472
y(in)k Fn(Y)t Fs(,)h(the)f(w)o(eak)g(b)q(ound)i(will)d(\(correctly\))g
(state)i(that)g(the)g(t)o(w)o(o)f(v)m(alue)g(functions)h(are)949
2607 y(38)p eop
%%Page: 39 39
39 38 bop 164 422 a Ff(weakbound)m Fs(\()p Fn(X)7 b Fm(;)h
Fn(Y)t Fs(\))16 b(:=)g Fn(f)257 482 y Fm(\016)g Fs(:=)d
Fn(\0001)257 542 y Fd(foreac)n(h)k Fm(p)473 549 y Fk(x)512
542 y Fd(in)f Fn(X)23 b(f)351 603 y Fr(mindi\013)h Fs(:=)14
b Fn(1)351 663 y Fd(foreac)n(h)j Fm(p)567 670 y Fk(y)604
663 y Ff(in)e Fn(Y)21 b(f)444 723 y Fr(maxc)n(omp)n(onent)f
Fs(:=)13 b(max)932 730 y Fk(s)p Fl(2S)997 723 y Fs(\()p
Fd(v)m(alue)o Fs(\()p Fm(p)1185 730 y Fk(x)1208 723 y
Fs(\)[)p Fm(s)p Fs(])d Fn(\000)h Fd(v)m(alue)o Fs(\()p
Fm(p)1507 730 y Fk(y)1528 723 y Fs(\)[)p Fm(s)p Fs(]\))444
783 y Fr(mindi\013)25 b Fs(:=)13 b(min)n(\()p Fr(mindi\013)e
Fm(;)d Fr(maxc)n(omp)n(onent)d Fs(\))351 843 y Fn(g)351
903 y Fm(\016)15 b Fs(:=)f(max)n(\()p Fm(\016)o(;)8 b
Fr(mindi\013)i Fs(\))257 964 y Fn(g)257 1024 y Fd(return)16
b Fm(\016)164 1084 y Fn(g)164 1240 y Fs(T)l(able)11 b(10:)20
b(Pseudo)q(co)q(de)13 b(for)f(computing)e(a)j(b)q(ound)f(on)g
(di\013erence)f(b)q(et)o(w)o(een)g(t)o(w)o(o)g(v)m(alue)164
1300 y(functions.)164 1514 y Ff(difference)420 1496 y
Fl(0)432 1514 y Fs(\()p Fn(V)482 1521 y Fk(t)p Fl(\000)p
Fj(1)541 1514 y Fm(;)d Fn(V)594 1521 y Fk(t)609 1514
y Fs(\))16 b(:=)g Fn(f)257 1575 y Fd(return)g Fs(max)o(\()p
Ff(weakbound)m Fs(\()p Fn(V)820 1582 y Fk(t)p Fl(\000)p
Fj(1)879 1575 y Fm(;)8 b Fn(V)932 1582 y Fk(t)946 1575
y Fs(\))p Fm(;)g Ff(weakbound)m Fs(\()p Fn(V)1268 1582
y Fk(t)1282 1575 y Fm(;)g Fn(V)1335 1582 y Fk(t)p Fl(\000)p
Fj(1)1394 1575 y Fs(\)\))164 1635 y Fn(g)276 1790 y Fs(T)l(able)16
b(11:)22 b(Pseudo)q(co)q(de)c(for)e(a)h(w)o(eak)f(b)q(ound)h(on)g(the)f
(Bellman)e(residual.)164 1923 y(iden)o(tical.)26 b(And,)18
b(although)h(it)f(is)g(di\016cult)f(to)h(formalize,)e(if)i(the)g(t)o(w)
o(o)g(sets)h(are)f(only)164 1983 y(sligh)o(tly)d(di\013eren)o(t,)g(the)
h(giv)o(en)f(b)q(ound)j(will)d(b)q(e)h(fairly)g(accurate.)237
2044 y(T)l(ables)h(10)g(and)f(11)h(pro)o(vide)f(pseudo)q(co)q(de)h(for)
g(the)f(w)o(eak)o(er)f(b)q(ound.)164 2188 y Fq(7.3)70
b(Deriv)l(ation)21 b(of)j(v)l(alue)164 2280 y Fs(By)16
b(de\014nition,)f Fd(v)m(alue)o Fs(\()p Fm(p)p Fs(\)[)p
Fm(s)p Fs(])h(is)h(the)f(exp)q(ected)f(discoun)o(ted)i(rew)o(ard)f(for)
h(follo)o(wing)f Fm(t)p Fs(-)164 2341 y(step)d(p)q(olicy)f(tree)g
Fm(p)h Fs(starting)h(from)d(state)i Fm(s)p Fs(.)20 b(Equation)14
b(12)f(giv)o(es)f(a)h(recursiv)o(e)e(form)o(ula)164 2401
y(for)16 b(this)h(expression.)j(This)d(section)f(justi\014es)g(that)g
(form)o(ula.)949 2607 y(39)p eop
%%Page: 40 40
40 39 bop 237 315 a Fs(Let)17 b Fm(a)e Fs(b)q(e)i Fd(action)o
Fs(\()p Fm(p)p Fs(\).)22 b(W)l(e)16 b(ha)o(v)o(e:)167
419 y Fd(v)m(alue)o Fs(\()p Fm(p)p Fs(\)[)p Fm(s)p Fs(])41
b(=)h Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])i(+)h Fm(\015)758
377 y Fi(X)761 470 y Fk(s)777 460 y Fe(0)788 470 y Fk(;o)826
419 y Fs(Pr\()p Fm(o;)d(s)965 398 y Fl(0)977 419 y Fn(j)p
Fm(a;)g(s)p Fs(\))p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o
Fs(\()p Fm(p;)g(o)p Fs(\)\)[)p Fm(s)1537 398 y Fl(0)1549
419 y Fs(])447 543 y(=)42 b Fm(R)p Fs([)p Fm(s;)8 b(a)p
Fs(])i(+)h Fm(\015)758 501 y Fi(X)761 594 y Fk(s)777
584 y Fe(0)788 594 y Fk(;o)826 543 y Fs(Pr\()p Fm(s)920
522 y Fl(0)932 543 y Fn(j)p Fm(a;)d(s)p Fs(\))g(Pr\()p
Fm(o)p Fn(j)p Fm(s;)g(a;)g(s)1268 522 y Fl(0)1279 543
y Fs(\))p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o Fs(\()p
Fm(p;)g(o)p Fs(\)\)[)p Fm(s)1754 522 y Fl(0)1766 543
y Fs(])447 667 y(=)42 b Fm(R)p Fs([)p Fm(s;)8 b(a)p Fs(])i(+)h
Fm(\015)758 625 y Fi(X)761 718 y Fk(o;s)804 708 y Fe(0)826
667 y Fm(T)c Fs([)p Fm(s;)h(a;)g(s)992 646 y Fl(0)1002
667 y Fs(])p Fm(O)q Fs([)p Fm(s)1091 646 y Fl(0)1102
667 y Fm(;)g(a;)g(o)p Fs(])p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o
Fs(\()p Fm(p;)g(o)p Fs(\)\)[)p Fm(s)1665 646 y Fl(0)1677
667 y Fs(])447 790 y(=)42 b Fm(R)p Fs([)p Fm(s;)8 b(a)p
Fs(])i(+)h Fm(\015)758 749 y Fi(X)779 836 y Fk(o)826
790 y Fd(bac)n(k)q Fs(\()p Fd(v)m(alue)o Fs(\()p Fd(c)n(hoice)o
Fs(\()p Fm(p;)d(o)p Fs(\)\))p Fm(;)g(a;)g(o)p Fs(\)[)p
Fm(s)p Fs(])164 922 y(as)17 b(desired.)164 1066 y Fq(7.4)70
b(Elimi)o(nating)20 b(extraneous)k(p)r(olicy)d(trees)164
1158 y Fs(Giv)o(en)h(a)h(set)g Fn(X)29 b Fs(of)23 b(p)q(olicy)g(trees,)
g(ho)o(w)g(can)g(w)o(e)g(\014nd)g(a)g(minim)n(um)o(-siz)o(ed)d(subset,)
164 1218 y Fn(V)d(\022)d(X)7 b Fs(,)16 b(that)g(represen)o(ts)g(the)g
(same)f(v)m(alue)h(function?)237 1279 y(Monahan)456 1275
y([)470 1279 y(Monahan,)22 b(1982)800 1275 y(])835 1279
y(describ)q(es)e(a)g(metho)q(d)f(that)i(is)f(further)g(explored)164
1339 y(b)o(y)i(Eagle)377 1335 y([)390 1339 y(Eagle,)i(1984)641
1335 y(])678 1339 y(for)e(eliminating)e(extraneous)i(p)q(olicy)f(trees)
h(from)f(a)h(set.)164 1399 y(In)o(terestingly)l(,)h(Monahan)i
(attributes)f(the)g(metho)q(d)f(to)h(Sondik)1435 1395
y([)1449 1399 y(Smallw)o(o)q(o)q(d)f(and)164 1459 y(Sondik,)g(1973)442
1455 y(])478 1459 y(but)f(the)g(t)o(w)o(o)f(metho)q(ds)h(are)f(only)h
(similar)d(at)j(a)h(high)e(lev)o(el.)36 b(The)164 1519
y(metho)q(d)15 b(describ)q(ed)h(here)g(is)g(a)h(sligh)o(t)e(v)m(arian)o
(t)i(of)f(the)g(one)g(discussed)h(b)o(y)e(Monahan.)237
1579 y(The)h(basic)f(metho)q(d)g(is)g(to)g(consider)h(eac)o(h)e
Fm(p)h Fn(2)f(X)22 b Fs(in)15 b(turn)h(and)g(to)f(ask,)h(\\Is)g(there)
164 1640 y(a)h(b)q(elief)f(state,)h Fm(b)p Fs(,)f(suc)o(h)h(that)h(the)
e(v)m(alue)h(ac)o(hiev)o(ed)e(b)o(y)i(follo)o(wing)f
Fm(p)i Fs(starting)f(from)f Fm(b)164 1700 y Fs(is)g(larger)g(than)h
(that)g(of)f(follo)o(wing)g(an)o(y)g(other)h(p)q(olicy)e(tree)h(in)g
Fn(X)7 b Fs(?")237 1760 y(Once)15 b(again,)h(there)f(is)h(a)g(simple)d
(linear)i(program)g(for)h(answ)o(ering)g(this)g(question.)164
1820 y(The)g(linear)g(program)g(is)g(giv)o(en)f(in)h(T)l(able)g(12.)237
1880 y(The)f(linear)f(program)g(searc)o(hes)h(for)g(a)g
Fm(b)f Fs(and)h(a)g Fm(\016)i Fs(suc)o(h)d(that)h(a)g(giv)o(en)f(p)q
(olicy)g(tree,)164 1941 y Fm(p)p Fs(,)i(giv)o(es)f(a)h(v)m(alue)g(of)g
(at)g(least)g Fm(\016)i Fs(more)c(than)j(an)o(y)e(other)h(p)q(olicy)g
(tree)f(in)g(the)h(set)g Fn(X)23 b Fs(at)164 2001 y Fm(b)p
Fs(.)237 2061 y(If)14 b(the)h(linear)f(program)h(returns)f(a)i(negativ)
o(e)e(v)m(alue)g(for)h Fm(\016)r Fs(,)f(then)h Fm(p)g
Fs(m)o(ust)f(b)q(e)h(dom-)164 2121 y(inated)22 b(ev)o(erywhere)f(and)i
(therefore)f(extraneous)h(in)f(the)h(manner)e(sho)o(wn)j(in)e(Fig-)164
2181 y(ure)14 b(6\(a\).)21 b(If)13 b(the)h(returned)g(v)m(alue)g(for)g
Fm(\016)h Fs(is)f(zero,)g(that)g(means)g(that,)g(at)g
Fm(b)p Fs(,)g(p)q(olicy)g(tree)164 2242 y Fm(p)k Fs(is)f(optimal)f(but)
i(that)g(there)e(is)i(no)g(b)q(elief)e(state)h(for)h(whic)o(h)f(p)q
(olicy)g(tree)f Fm(p)i Fs(strictly)164 2302 y(dominates)i(all)g(the)h
(others.)36 b(Th)o(us)21 b Fm(p)g Fs(is)g(again)h(extraneous,)f(but)h
(in)e(the)h(sense)g(of)164 2362 y(Figure)16 b(6\(b\))g(or)h(\(c\).)237
2422 y(Only)d Fm(p)p Fs('s)h(for)f(whic)o(h)g Fm(\016)h(>)f
Fs(0)h(are)f(k)o(ept.)20 b(These)15 b(p)q(olicy)e(trees)h(will)g(not)h
(b)q(e)f(extrane-)164 2482 y(ous)h(since)f(remo)o(ving)f(them)g(from)h
(the)g(set)h(w)o(ould)g(c)o(hange)f(the)h(v)m(alue)f(function)h(b)q
(eing)949 2607 y(40)p eop
%%Page: 41 41
41 40 bop 164 446 a Fs(Inputs:)283 506 y Fm(p;)8 b Fn(X)164
627 y Fs(V)l(ariables:)283 687 y Fm(\016)r Fs(,)15 b
Fm(b)p Fs([)p Fm(s)p Fs(])h(for)g(eac)o(h)g Fm(s)e Fn(2)g(S)164
807 y Fs(Maximize:)k Fm(\016)164 928 y Fs(Domination)e(constrain)o(ts:)
283 988 y(F)l(or)h(eac)o(h)i(~)-28 b Fm(p)17 b Fs(in)f
Fn(X)7 b Fs(:)21 b Fm(b)11 b Fn(\001)g Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\))j Fn(\025)g Fm(\016)e Fs(+)f Fm(b)g
Fn(\001)g Fd(v)m(alue)o Fs(\()t(~)-28 b Fm(p)p Fs(\))164
1108 y(Simplex)14 b(constrain)o(ts:)283 1169 y(F)l(or)j(eac)o(h)e
Fm(s)f Fn(2)g(S)t Fs(:)21 b Fm(b)p Fs([)p Fm(s)p Fs(])13
b Fn(\025)h Fs(0)283 1195 y Fi(P)327 1239 y Fk(s)p Fl(2S)401
1229 y Fm(b)p Fs([)p Fm(s)p Fs(])f(=)g(1)164 1445 y(T)l(able)f(12:)20
b(A)12 b(linear)f(program)i(used)f(to)h(decide)e(whether)h(p)q(olicy)f
(tree)h Fm(p)h Fs(is)f(extraneous)164 1505 y(in)k(the)g(set)g
Fn(X)7 b Fs(.)164 1751 y Ff(purge)n Fs(\()p Fn(X)g Fs(\))16
b(:=)g Fn(f)257 1811 y(V)i Fs(:=)13 b Fn(fg)257 1871
y Fd(foreac)n(h)k Fm(p)g Fd(in)f Fn(X)23 b(f)351 1932
y Fs(LP)17 b(:=)f(set)g(up)g(the)g(Monahan)i(LP)f(\(T)l(able)f(12\))h
(with)f Fm(p;)8 b Fn(X)351 1992 y Fs(\()p Fm(\016)o(;)g(b)p
Fs(\))15 b(:=)h Ff(solveLP)p Fs(\(LP\))351 2052 y Fd(if)g
Fs(\()p Fm(\016)f Fn(\024)f Fs(0\))p Fn(X)21 b Fs(:=)13
b Fn(X)18 b(\000)11 b(f)p Fm(p)p Fn(g)351 2112 y Fd(else)k
Fn(V)i Fs(:=)d Fn(V)g([)e(f)p Fm(p)p Fn(g)257 2172 y(g)257
2233 y Fd(return)k Fn(V)164 2293 y(g)237 2448 y Fs(T)l(able)g(13:)22
b(Pseudo)q(co)q(de)17 b(for)g(purging)g(extraneous)f(p)q(olicy)g(trees)
g(from)f(a)i(set.)949 2607 y(41)p eop
%%Page: 42 42
42 41 bop 164 315 a Fs(represen)o(ted.)237 376 y(The)15
b(running)f(time)f(for)h(this)h(pro)q(cedure)f(is)h(that)f(of)h
(solving)g(one)f(linear)g(program)164 436 y(for)k(eac)o(h)e(p)q(olicy)h
(tree)g(in)g Fn(X)7 b Fs(.)24 b(Eac)o(h)17 b(linear)g(program)g(has)h
Fn(jS)t(j)11 b Fs(+)h(1)17 b(v)m(ariables)h(and)g(at)164
496 y(most)11 b(one)g(constrain)o(t)h(for)f(eac)o(h)g(p)q(olicy)g(tree)
g(in)g Fn(X)c Fs(.)19 b(Th)o(us)12 b(it)f(runs)h(in)f(time)e(p)q
(olynomial)164 556 y(in)16 b Fn(jS)t(j)g Fs(and)h Fn(jX)7
b(j)15 b Fs(\(and)i(the)f(precision\).)164 701 y Fq(7.5)70
b(Ties)21 b(in)h(c)n(ho)r(osing)h(the)g(b)r(est)f(v)n(ector)164
793 y Fs(The)17 b(most)g(di\016cult)f(part)i(of)g(the)f(witness)h
(algorithm,)e(b)q(oth)i(computationally)e(and)164 853
y(conceptually)l(,)k(is)g(the)g(iden)o(ti\014cation)f(of)i(a)f(witness)
h(p)q(oin)o(t.)33 b(Recall)19 b(that)i(giv)o(en)e(an)164
913 y(appro)o(ximation)d(of)h Fm(Q)585 895 y Fk(a)585
926 y(t)605 913 y Fs(,)g Fm(b)f Fs(is)h(a)g(witness)g(if)f
Fm(Q)1020 895 y Fk(a)1020 926 y(t)1041 913 y Fs(\()p
Fm(b)p Fs(\))e Fn(6)p Fs(=)1178 901 y(^)1167 913 y Fm(Q)1206
895 y Fk(a)1206 926 y(t)1226 913 y Fs(\()p Fm(b)p Fs(\).)23
b(In)16 b(addition)h(to)h(\014nding)164 974 y(a)i(witness,)h
Fm(b)p Fs(,)f(w)o(e)f(m)o(ust)g(select)g(a)h(p)q(olicy)f(tree,)h
Fm(p)p Fs(,)h(to)f(add)h(to)1395 961 y(^)1381 974 y Fn(Q)1422
956 y Fk(a)1422 986 y(t)1463 974 y Fs(to)f(impro)o(v)o(e)d(the)164
1034 y(appro)o(ximation.)25 b(W)l(e)18 b(need)f(to)i(\014nd)f(a)g
Fm(p)h Fs(suc)o(h)e(that)i Fd(v)m(alue)o Fs(\()p Fm(p)p
Fs(\))12 b Fn(\001)g Fm(b)17 b Fs(=)f Fm(Q)1536 1016
y Fk(a)1536 1046 y(t)1557 1034 y Fs(\()p Fm(b)p Fs(\).)26
b(But)17 b(if)164 1094 y(there)f(are)g(m)o(ultiple)d(p)q(olicy)j(trees)
f(for)i(whic)o(h)e(this)i(is)f(true,)f(whic)o(h)h(do)g(w)o(e)g(add?)237
1154 y(If)e(w)o(e)g(are)g(v)o(ery)f(careless,)g(w)o(e)h(migh)o(t)f(add)
i(an)f(extraneous)h(p)q(olicy)e(tree)h(suc)o(h)g(as)h
Fm(p)1763 1161 y Fj(2)164 1214 y Fs(sho)o(wn)g(in)f(Figure)f(6\(b\))i
(whic)o(h)e(con)o(tributes)h(only)g(a)g(single,)g(redundan)o(t)g(p)q
(oin)o(t)h(to)f(the)164 1275 y(represen)o(tation)19 b(of)h
Fm(Q)584 1256 y Fk(a)584 1287 y(t)605 1275 y Fs(.)31
b(In)20 b(this)f(section,)h(w)o(e)g(argue)g(that)g(breaking)g(ties)f(b)
q(et)o(w)o(een)164 1335 y(p)q(olicy)13 b(trees)f(using)i(a)g
(lexicographic)e(ordering)h(on)h(their)f(v)m(alue)g(v)o(ectors)f
(ensures)h(that)164 1395 y(no)20 b(extraneous)g(p)q(olicy)f(trees)g
(are)h(included.)30 b(F)l(urther,)19 b(w)o(e)h(sho)o(w)g(ho)o(w)g(to)g
(iden)o(tify)164 1455 y(the)c(lexicographically)d(b)q(est)k(p)q(olicy)e
(tree)g(in)h(the)f(set)h(of)g(all)f(optimal)g(p)q(olicy)g(trees)h(at)
164 1515 y Fm(b)g Fs(without)h(ha)o(ving)f(to)g(en)o(umerate)e(this)j
(set.)164 1645 y Fd(7.5.1)55 b(Motiv)m(ation)164 1738
y Fs(It)16 b(is)f(w)o(orth)i(asking)f(whether)g(or)g(not)h(this)e(is)h
(a)h(signi\014can)o(t)e(problem.)20 b(Consider)c(the)164
1798 y(v)m(alue)f(function)f(sho)o(wn)i(in)f(Figure)f(9.)21
b(It)15 b(consists)g(of)g(3)g(segmen)o(ts)f(and,)h(in)g(the)f(w)o(orst)
164 1858 y(p)q(ossible)g(case,)f(there)g(are)h(only)f(5)h(extraneous)g
(p)q(olicy)f(trees)g(that)h(migh)o(t)e(b)q(e)i(included)164
1918 y(if)g(w)o(e)g(break)g(ties)g(arbitrarily)l(.)20
b(In)14 b(general,)g(the)g(n)o(um)o(b)q(er)f(of)i(extraneous)g(p)q
(olicy)e(trees)164 1978 y(can)j(not)g(b)q(e)f(greater)h(than)g(the)f(n)
o(um)o(b)q(er)f(of)i(in)o(tersection)e(p)q(oin)o(ts)i(b)q(et)o(w)o(een)
e(segmen)o(ts)164 2039 y(\(or)19 b(segmen)o(ts)f(and)i(the)f(edges)g
(of)h(b)q(elief)e(space\).)30 b(Therefore,)19 b(in)g(t)o(w)o(o)g
(dimensions,)164 2099 y(this)d(at)h(most)e(doubles)i(the)f(n)o(um)o(b)q
(er)e(of)j(p)q(olicy)e(trees)h(that)h(are)f(considered.)237
2159 y(Since)23 b(the)g(extraneous)g(p)q(olicy)g(trees)g(can)g(b)q(e)h
(eliminated)c(quic)o(kly)h(using)j(the)164 2219 y(tec)o(hniques)15
b(in)g(Section)h(7.4,)g(this)g(w)o(ould)g(seem)f(to)h(imply)e(that)j
(the)e(problem)g(of)h(ties)164 2279 y(con)o(tributes)h(at)i(most)e(a)i
(constan)o(t)f(factor)h(to)f(the)g(computation.)26 b(Ho)o(w)o(ev)o(er,)
16 b(this)i(is)164 2339 y(not)e(true.)21 b(The)16 b(n)o(um)o(b)q(er)f
(of)h(in)o(tersection)f(p)q(oin)o(ts)h(can)g(blo)o(w)g(up)g(exp)q(onen)
o(tially)f(with)164 2400 y(the)e(size)f(of)h(the)g(state)h(space,)f
Fn(jS)t(j)p Fs(,)g(and)h(this)f(w)o(ould)g(add)g(signi\014can)o(t)g(o)o
(v)o(erhead)g(to)g(the)949 2607 y(42)p eop
%%Page: 43 43
43 42 bop 735 266 a
 7530694 7104430 8091156 37100912 19142492 47494430 startTexFig
 735 266 a
%%BeginDocument: ties.ps
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
{}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
%	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
%	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
FrameDict begin /papersize {false} def end
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 1 /Symbol FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /ZapfChancery-MediumItalic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
126.22 632.15 261.22 632.15 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
171 670 126.22 685.82 2 L
3 H
N
171 670 226.25 681 2 L
N
226.89 681.82 269 709 2 L
N
1 14 Q
(p) 278.92 716.1 T
2 12 Q
(1) 286.45 710 T
2 14 Q
(1) 260 617 T
(0) 126 614 T
1 F
(b) 182 615 T
J
124 671 262 665 2 L
J
124 671 127.75 670.84 2 L
0.5 H
N
[7.394 6.408] 7.394 I
127.75 670.84 258.25 665.16 2 L
N
J
258.25 665.16 262 665 2 L
N
J
129 632 271 704 2 L
J
129 632 132.35 633.7 2 L
N
[7.767 6.731] 7.767 I
132.35 633.7 267.65 702.3 2 L
N
J
267.65 702.3 271 704 2 L
N
J
(p) 277.92 698.1 T
2 12 Q
(2) 285.45 692 T
J
124 685 262 591 2 L
J
124 685 127.1 682.89 2 L
N
[7.452 6.458] 7.452 I
127.1 682.89 258.9 593.11 2 L
N
J
258.9 593.11 262 591 2 L
N
J
128 564 269 710 2 L
J
128 564 130.6 566.7 2 L
N
[7.777 6.74] 7.777 I
130.6 566.7 266.39 707.3 2 L
N
J
266.39 707.3 269 710 2 L
N
J
1 14 Q
(p) 270.92 585.1 T
2 12 Q
(4) 278.45 579 T
1 14 Q
(p) 270.92 663.1 T
2 12 Q
(3) 278.45 657 T
2 24 Q
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndDocument

 endTexFig
 369 817 a Fs(Figure)16 b(9:)21 b(A)16 b(v)m(alue)g(function)g(and)h
(some)e(extraneous)i(v)o(ectors.)164 960 y(computation.)j(It)14
b(is)g(imp)q(ortan)o(t,)f(at)i(least)f(for)g(the)h(analysis,)f(that)h
(these)f(extraneous)164 1020 y(p)q(olicy)i(trees)f(not)i(tak)o(e)f(o)o
(v)o(er)f(the)h(computation)g(time.)164 1150 y Fd(7.5.2)55
b(Lexicographic)17 b(tie)h(breaking)164 1242 y Fs(Let)e
Fn(U)22 b Fs(b)q(e)16 b(the)g(set)g(of)h(v)o(ectors)e(deriv)o(ed)g
(from)g(all)h Fm(t)p Fs(-step)g(p)q(olicy)g(trees,)709
1352 y Fn(U)j Fs(=)13 b Fn(f)p Fd(v)m(alue)o Fs(\()p
Fm(p)p Fs(\))i(:)e Fm(p)h Fn(2)g(P)1185 1359 y Fk(t)1200
1352 y Fn(g)p Fm(:)164 1462 y Fs(Let)19 b Fn(W)k Fs(b)q(e)c(the)f(set)h
(of)g(v)o(ectors)f(corresp)q(onding)h(to)g(p)q(olicy)f(trees)g(that)i
(are)e(optimal)164 1523 y(at)f Fm(b)p Fs(,)430 1583 y
Fn(W)h Fs(=)c Fn(f)p Fd(v)m(alue)o Fs(\()p Fm(p)p Fs(\))g(:)g
Fm(p)g Fn(2)g(P)924 1590 y Fk(t)955 1583 y Fs(and)i Fd(v)m(alue)o
Fs(\()p Fm(p)p Fs(\))c Fn(\001)f Fm(b)i Fs(=)h Fm(Q)1399
1562 y Fk(a)1399 1595 y(t)1420 1583 y Fs(\()p Fm(b)p
Fs(\))p Fn(g)p Fm(:)237 1670 y Fs(This)k(section)f(argues)h(that)f(the)
g Fr(lexic)n(o)n(gr)n(aphic)n(al)r(ly)i(lar)n(gest)p
Fs(,)f(v)o(ector)e(in)h Fn(W)22 b Fs(corre-)164 1730
y(sp)q(onds)15 b(to)e(a)h(p)q(olicy)f(tree)f(that)i(can)f(not)h(b)q(e)f
(extraneous.)21 b(W)l(e)13 b(sa)o(y)g Fm(\013)1445 1737
y Fj(1)1478 1730 y Fs(is)g(lexicograph-)164 1790 y(ically)k(greater)i
(than)g Fm(\013)610 1797 y Fj(2)648 1790 y Fs(\()p Fm(\013)698
1797 y Fj(1)735 1790 y Fn(\037)f Fm(\013)823 1797 y Fj(2)842
1790 y Fs(\))h(if)f Fm(\013)958 1797 y Fj(1)978 1790
y Fs('s)g(\014rst)h(comp)q(onen)o(t)e(is)i(bigger)f(than)h
Fm(\013)1730 1797 y Fj(2)1750 1790 y Fs('s)164 1850 y(\014rst)h(comp)q
(onen)o(t.)32 b(If)20 b(they)f(are)h(tied)g(at)g(the)g(\014rst)h(comp)q
(onen)o(t,)e(the)h(tie)f(is)h(brok)o(en)164 1911 y(b)o(y)e(the)f
(second)i(comp)q(onen)o(t,)e(and)i(so)f(on.)28 b(The)18
b(upshot)h(of)f(this)g(is)g(that)h(an)o(y)f(set)g(of)164
1971 y Fn(jS)t(j)p Fs(-v)o(ectors,)13 b(suc)o(h)g(as)h
Fn(W)t Fs(,)f(has)h(exactly)e(one)i(lexicographic)e(maxim)n(um)o(.)17
b(W)l(e)c(de\014ne)g Fm(\025)164 2031 y Fs(to)i(b)q(e)f(the)g
(lexicographic)f(maxim)o(um)d(v)o(ector)j(in)h Fn(W)t
Fs(.)21 b(That)15 b(is,)f(for)h(all)f Fm(\013)g Fn(2)g(W)d(\000)c(f)p
Fm(\025)p Fn(g)p Fs(,)164 2091 y Fm(\025)14 b Fn(\037)g
Fm(\013)p Fs(.)237 2151 y(Our)21 b(goal)g(is)f(to)h(sho)o(w)g(that)g
(the)f(p)q(olicy)g(tree)g(corresp)q(onding)h(to)g Fm(\025)g
Fs(cannot)g(b)q(e)164 2212 y(extraneous.)g(The)c(pro)q(of)g(of)g(this)f
(is)g(more)f(complicated)f(than)i(it)g(deserv)o(es)f(to)i(b)q(e.)k(It)
164 2272 y(is)e(included)g(b)q(elo)o(w)g(completeness.)29
b(The)19 b(in)o(tuition)g(b)q(ehind)g(the)h(pro)q(of)g(is)f(that)h(w)o
(e)164 2332 y(can)g(mo)o(v)o(e)e(a)i(little)f(bit)g(a)o(w)o(a)o(y)h
(from)f Fm(b)p Fs(,)i(increasing)e(its)h(\014rst)g(comp)q(onen)o(t)f(a)
i(bit,)f(its)164 2392 y(second)c(comp)q(onen)o(t)e(a)j(little)c(bit)j
(less,)f(and)h(so)g(on,)g(so)g(that)g Fm(\025)h Fs(giv)o(es)d(an)j
(answ)o(er)e(that)164 2452 y(is)h(a)h(tin)o(y)e(bit)h(bigger)g(than)h
(an)o(y)f(of)h(the)f(other)g(v)o(ectors)g(in)f Fn(U)5
b Fs(.)949 2607 y(43)p eop
%%Page: 44 44
44 43 bop 237 315 a Fs(T)l(o)22 b(sho)o(w)g(this)e(formally)l(,)g(w)o
(e)h(need)g(a)g(little)f(notation.)36 b(Let)22 b Fm(e)1454
322 y Fk(s)1493 315 y Fs(b)q(e)f(the)g(v)o(ector)164
376 y(corresp)q(onding)c(to)g(the)g(\\corner")g(of)f(b)q(elief)g(space)
g(where)h(all)f(the)g(probabilit)o(y)f(mass)164 436 y(is)j(on)g(state)g
Fm(s)p Fs(.)26 b(That)19 b(is,)f Fm(e)680 443 y Fk(s)698
436 y Fs([)p Fm(s)p Fs(])d(=)i(1)h(and)h Fm(e)981 443
y Fk(s)999 436 y Fs(\()r(~)-26 b Fm(s)p Fs(\))16 b(=)h(0,)h(for)i(~)-26
b Fm(s)17 b Fn(6)p Fs(=)f Fm(s)i Fs(.)26 b(The)18 b(p)q(oin)o(t)1667
423 y(~)1669 436 y Fm(b)g Fs(is)g(a)164 496 y Fm(\032)p
Fr(-step)f(fr)n(om)f Fm(b)442 503 y Fj(1)478 496 y Fr(towar)n(ds)f
Fm(b)676 503 y Fj(2)711 496 y Fs(if)753 483 y(~)755 496
y Fm(b)e Fs(=)h Fm(\032)p Fs(\()p Fm(b)906 503 y Fj(1)935
496 y Fn(\000)8 b Fm(b)1003 503 y Fj(2)1023 496 y Fs(\))h(+)g
Fm(b)1119 503 y Fj(2)1154 496 y Fs(since)14 b(the)h(expression)g(ev)m
(aluates)164 556 y(to)i Fm(b)245 563 y Fj(1)280 556 y
Fs(when)g Fm(\032)f Fs(is)g(0)h(and)g Fm(b)655 563 y
Fj(2)690 556 y Fs(when)g Fm(\032)f Fs(is)g(1)h(and)g(in)o(terp)q
(olates)e(linearly)g(for)i(0)d Fm(<)g(\032)g(<)f Fs(1.)164
670 y Fd(Lemma)j(2)24 b Fr(\(Safe)f(c)n(orner)f(moves\):)33
b(If)22 b Fn(W)27 b Fr(is)22 b(the)h(set)g(of)g(ve)n(ctors)f(in)h
Fn(U)28 b Fr(that)23 b(ar)n(e)164 731 y(maximal)c(at)f
Fm(b)p Fr(,)h(then)g(ther)n(e)f(is)g(a)h(value)h Fm(\032)15
b(>)h Fs(0)j Fr(such)f(that)h(for)f(the)h(p)n(oint)1563
717 y Fs(~)1565 731 y Fm(b)f Fr(that)h(is)f(a)164 791
y Fm(\032)p Fr(-step)g(fr)n(om)e Fm(b)h Fr(towar)n(ds)g(a)g(c)n(orner)g
(of)g(b)n(elief)h(sp)n(ac)n(e,)f Fm(e)1180 798 y Fk(s)1198
791 y Fr(,)g(the)h(ve)n(ctors)g(in)f Fn(W)22 b Fr(stil)r(l)d(give)164
851 y(a)e(bigger)i(answer)f(than)g(al)r(l)g(the)g(other)g(ve)n(ctors.)
237 965 y Fs(Pro)q(of:)27 b(F)l(or)19 b(an)o(y)f Fm(\013)g
Fn(2)g(W)k Fs(and)e(an)o(y)e Fm(\014)i Fn(2)e(U)f(\000)c(W)t
Fs(,)19 b Fm(\013)12 b Fn(\001)h Fm(b)f Fn(\000)h Fm(\014)h
Fn(\001)f Fm(b)k(>)h Fs(0.)28 b(Call)18 b(the)164 1025
y(di\013erence)d(\001.)22 b(Let)545 1012 y(~)547 1025
y Fm(b)14 b Fs(=)g Fm(\032)p Fs(\()p Fm(e)701 1032 y
Fk(s)730 1025 y Fn(\000)d Fm(b)p Fs(\))g(+)g Fm(b)p Fs(.)22
b(W)l(e)16 b(can)h(\014nd)g(a)g(v)m(alue)f(for)h Fm(\032)d(>)g
Fs(0)j(suc)o(h)f(that)164 1086 y Fm(\013)h Fs(is)f(bigger)g(than)h
Fm(\014)h Fs(at)625 1072 y(~)627 1086 y Fm(b)p Fs(.)j(The)16
b(follo)o(wing)g(statemen)o(ts)f(are)h(equiv)m(alen)o(t:)1192
1196 y Fm(\013)c Fn(\001)1258 1182 y Fs(~)1260 1196 y
Fm(b)41 b(>)g(\014)14 b Fn(\001)1466 1182 y Fs(~)1468
1196 y Fm(b)477 1268 y(\013)d Fn(\001)g Fs(\()p Fm(\032)p
Fs(\()p Fm(e)630 1275 y Fk(s)659 1268 y Fn(\000)g Fm(b)p
Fs(\))g(+)g Fm(b)p Fs(\))g Fn(\000)g Fm(\014)i Fn(\001)e
Fs(\()p Fm(\032)p Fs(\()p Fm(e)1062 1275 y Fk(s)1091
1268 y Fn(\000)g Fm(b)p Fs(\))g(+)g Fm(b)p Fs(\))41 b
Fm(>)g Fs(0)459 1341 y(\(1)11 b Fn(\000)g Fm(\032)p Fs(\)\()p
Fm(\013)g Fn(\001)g Fm(b)g Fn(\000)g Fm(\014)i Fn(\001)e
Fm(b)p Fs(\))g(+)g Fm(\032)p Fs(\()p Fm(\013)g Fn(\001)g
Fm(e)1075 1348 y Fk(s)1104 1341 y Fn(\000)g Fm(\014)j
Fn(\001)c Fm(e)1243 1348 y Fk(s)1261 1341 y Fs(\))42
b Fm(>)f Fs(0)746 1413 y(\(1)11 b Fn(\000)g Fm(\032)p
Fs(\)\001)g(+)g Fm(\032)p Fs(\()p Fm(\013)p Fs([)p Fm(s)p
Fs(])f Fn(\000)h Fm(\014)s Fs([)p Fm(s)p Fs(]\))40 b
Fm(>)h Fs(0)894 1486 y Fm(\032)p Fs(\(\001)11 b(+)g Fm(\014)s
Fs([)p Fm(s)p Fs(])e Fn(\000)i Fm(\013)p Fs([)p Fm(s)p
Fs(]\))41 b Fm(<)g Fs(\001)164 1596 y(Since)23 b(\001)j
Fm(>)h Fs(0,)f(w)o(e)d(can)h(divide)e(b)o(y)i(it)f(without)h(c)o
(hanging)g(the)g(inequalit)o(y)l(.)42 b(Let)164 1656
y Fm(\024)14 b Fs(=)g(1)d(+)347 1633 y Fk(\014)r Fj([)p
Fk(s)p Fj(])p Fl(\000)p Fk(\013)p Fj([)p Fk(s)p Fj(])p
347 1645 144 2 v 404 1673 a(\001)496 1656 y Fs(.)21 b(Then)16
b(the)g(ab)q(o)o(v)o(e)g(expression)g(is)g(equiv)m(alen)o(t)f(to)i
Fm(\032\024)d(<)f Fs(1.)237 1716 y(If)k Fm(\024)f Fn(\024)g
Fs(0,)h(the)h(inequalit)o(y)d(holds)j(with)f Fm(\032)f
Fs(=)g(1.)25 b(Otherwise,)17 b(w)o(e)g(can)h(set)f Fm(\032)f
Fs(=)1750 1697 y Fj(1)p 1740 1705 38 2 v 1740 1734 a(2)p
Fk(\024)164 1777 y Fs(to)h(satisfy)f(the)g(inequalit)o(y)l(.)237
1837 y(This)k(sho)o(ws)g(that)g(w)o(e)f(can)g(\014nd)h(a)g
Fm(\032)g(>)f Fs(0)h(for)f(eac)o(h)g Fm(\013)h Fn(2)f(W)24
b Fs(and)c Fm(\014)i Fn(2)d(U)g(\000)13 b(W)164 1897
y Fs(suc)o(h)k(that)h(a)g Fm(\032)p Fs(-step)f(from)g
Fm(b)g Fs(to)g Fm(e)807 1904 y Fk(s)843 1897 y Fs(giv)o(es)f(a)1003
1884 y(~)1005 1897 y Fm(b)h Fs(suc)o(h)g(that)h Fm(\013)12
b Fn(\001)1328 1884 y Fs(~)1330 1897 y Fm(b)j(>)h(\014)e
Fn(\001)1486 1884 y Fs(~)1487 1897 y Fm(b)j Fs(\(that)h(is,)f(the)164
1957 y(set)f Fn(W)k Fs(still)15 b(con)o(tains)h(the)g(winners\).)21
b(Since)15 b(there)g(are)h(a)h(\014nite)e(n)o(um)o(b)q(er)f(of)j(w)o(a)
o(ys)f(of)164 2017 y(pairing)g(elemen)o(ts)e(in)i Fn(W)21
b Fs(with)16 b(those)h(in)f Fn(U)h(\000)10 b(W)t Fs(,)17
b(there)f(is)g(a)h Fm(\032)d(>)g Fs(0)j(that)g(w)o(orks)g(for)164
2078 y Fr(al)r(l)h Fs(pairs)e(\(namely)l(,)e(the)i(minim)n(um)c
Fm(\032)k Fs(for)h(an)o(y)f(pair\).)21 b Fc(2)237 2138
y Fs(W)l(e)16 b(can)h(no)o(w)f(use)g(the)g(lemma)e(to)i(pro)o(v)o(e)g
(the)g(follo)o(wing)g(theorem.)164 2252 y Fd(Theorem)h(8)24
b Fr(\(L)n(exic)n(o)n(gr)n(aphic)14 b(winner\):)22 b(If)15
b Fn(W)20 b Fr(is)15 b(the)h(set)g(of)f(ve)n(ctors)h(in)g
Fn(U)k Fr(that)c(ar)n(e)164 2312 y(maximal)f(at)f Fm(b)p
Fr(,)h(then)g(ther)n(e)g(is)f(some)g(b)n(elief)i(state,)1108
2299 y Fs(~)1109 2312 y Fm(b)p Fr(,)f(such)g(that)f(the)h(lexic)n(o)n
(gr)n(aphic)n(al)r(ly)164 2372 y(maximum)h(ve)n(ctor,)h
Fm(\025)e Fn(2)f(W)t Fr(,)i(is)h(the)g(sole)g(winner)g(at)1165
2359 y Fs(~)1167 2372 y Fm(b)o Fr(.)22 b(This)16 b(me)n(ans)h(that)f
(the)h(p)n(olicy)164 2433 y(tr)n(e)n(e)g(c)n(orr)n(esp)n(onding)g(to)g
Fm(\025)h Fr(is)f(not)h(extr)n(ane)n(ous.)949 2607 y
Fs(44)p eop
%%Page: 45 45
45 44 bop 237 315 a Fs(Pro)q(of:)34 b(Let)22 b Fm(s)517
322 y Fk(i)553 315 y Fs(b)q(e)g(the)g(state)g(corresp)q(onding)h(to)f
(the)g Fm(i)p Fs(th)g(comp)q(onen)o(t)f(of)h(the)164
376 y(v)o(ectors.)e(Let)15 b Fn(W)483 383 y Fj(0)517
376 y Fs(=)f Fn(W)19 b Fs(b)q(e)c(the)g(set)g(of)g(v)o(ectors)g
(maximal)d(at)j Fm(b)1356 383 y Fj(0)1389 376 y Fs(=)f
Fm(b)p Fs(.)21 b(By)14 b(Lemma)f(2,)164 436 y(there)g(is)h(a)h(p)q(oin)
o(t,)f Fm(b)532 443 y Fj(1)551 436 y Fs(,)h(strictly)d(di\013eren)o(t)i
(from)f Fm(b)1069 443 y Fj(0)1102 436 y Fs(and)i(in)f(the)f(direction)g
(of)i Fm(e)1609 443 y Fk(s)1625 448 y Fa(1)1658 436 y
Fs(where)164 496 y(the)h(v)o(ectors)f(in)g Fn(W)518 503
y Fj(0)554 496 y Fs(are)h(still)f(bigger)h(than)g(the)g(others.)22
b(A)15 b(subset)h(of)g(these)g(v)o(ectors,)164 556 y
Fn(W)213 563 y Fj(1)233 556 y Fs(,)g(are)g(maximal)d(at)k
Fm(b)624 563 y Fj(1)643 556 y Fs(.)237 616 y(It)g(should)g(b)q(e)h
(clear)e(that)i(the)e(v)o(ectors)h(in)g Fn(W)1096 623
y Fj(1)1133 616 y Fs(are)g(precisely)e(those)i Fm(\013)f
Fn(2)g(W)1688 623 y Fj(0)1725 616 y Fs(for)164 677 y(whic)o(h)j
Fm(\013)p Fs([)p Fm(s)375 684 y Fj(1)394 677 y Fs(])g(=)h
Fm(\025)p Fs([)p Fm(s)550 684 y Fj(1)569 677 y Fs(],)g(that)g(is,)f
(those)h(tied)f(with)g(the)h(lexicographically)d(maximal)164
737 y(v)o(ector)e(in)h(the)g(\014rst)h(comp)q(onen)o(t.)237
797 y(If)h(w)o(e)f(con)o(tin)o(ue)g(to)h(apply)g(this)g(argumen)o(t)e
(for)j(eac)o(h)e(comp)q(onen)o(t,)g Fn(W)1573 804 y Fk(i)1605
797 y Fs(b)q(ecomes)164 857 y(the)f(set)h(of)g(all)f(v)o(ectors)g(in)h
Fn(W)k Fs(that)c(agree)g(with)f Fm(\025)i Fs(in)e(the)h(\014rst)g
Fm(i)f Fs(comp)q(onen)o(ts.)22 b(The)164 917 y(v)o(ectors)c(in)h
Fn(W)441 924 y Fk(i)475 917 y Fs(are)g(strictly)f(greater)h(than)g(the)
g(other)h(v)o(ectors)e(at)i Fm(b)1483 924 y Fk(i)1496
917 y Fs(.)30 b(After)18 b(ev)o(ery)164 978 y(comp)q(onen)o(t)f(has)i
(b)q(een)f(considered,)f(w)o(e)h(are)g(left)f(with)h
Fn(W)1281 985 y Fl(jS)r(j)1343 978 y Fs(=)f Fn(f)p Fm(\025)p
Fn(g)h Fs(with)g Fm(\025)h Fs(as)f(the)164 1038 y(sole)e(winner)g(at)h
Fm(b)500 1046 y Fl(jS)r(j)545 1038 y Fs(.)k Fc(2)237
1098 y Fs(This)f(sho)o(ws)g(that)g(the)f(lexicographically)f(maxim)n
(um)d(v)o(ector)k(in)g(the)g(set)h(of)f(all)164 1158
y(tied)d(v)o(ectors)h(at)h Fm(b)f Fs(is)g(guaran)o(teed)g(to)h(b)q(e)f
(the)g(sole)g(winner)g(at)h(some)e(p)q(oin)o(t)h(in)g(b)q(elief)164
1218 y(space)12 b(and)h(therefore)e(that)i(its)e(p)q(olicy)h(tree)f(is)
h(not)h(extraneous)f(in)g(the)f(represen)o(tation)164
1279 y(of)17 b Fm(V)248 1286 y Fk(t)263 1279 y Fs(.)237
1339 y(This)e(tie)f(breaking)h(is)f(needed)g(at)i(t)o(w)o(o)e(places)h
(in)f(the)h(pseudo)q(co)q(de)h(giv)o(en)e(earlier.)164
1399 y(The)j(\014rst)h(is)f(in)g Ff(best)p Fs(,)f(whic)o(h)h(\014nds)h
(the)f(b)q(est)h(p)q(olicy)f(tree)f(in)i(a)f(set.)25
b(Cho)q(osing)19 b(the)164 1459 y(lexicographic)11 b(maxim)o(um)e(is)j
(easy)h(in)f(this)h(case.)20 b(The)12 b(second)h(place)f(is)h(in)f
Ff(besttree)p Fs(,)164 1519 y(whic)o(h)g(returns)h(the)f(b)q(est)h(p)q
(olicy)g(tree)f(giv)o(en)g(a)h(p)q(oin)o(t)g(in)f(b)q(elief)g(space.)20
b(It)12 b(is)h(not)g(giv)o(en)164 1579 y(the)j(set)f(of)h(all)g(p)q
(olicy)f(trees)g(in)h(adv)m(ance)g(b)q(ecause)g(this)g(list)f(could)g
(b)q(e)h(exp)q(onen)o(tially)164 1640 y(long.)22 b(Instead)16
b(it)g(constructs)g(the)g(tree)g(b)o(y)g(setting)g Fd(c)n(hoice)g
Fs(for)g(eac)o(h)g(observ)m(ation.)237 1700 y(The)d(correct)f(c)o
(hoice)g(for)h(eac)o(h)f(observ)m(ation)i(is)f(deriv)o(ed)e(in)i
(Equation)g(13.)21 b(It)12 b(tak)o(es)164 1760 y(eac)o(h)18
b(p)q(olicy)g(tree)g(in)h Fn(V)613 1767 y Fk(t)p Fl(\000)p
Fj(1)691 1760 y Fs(and)g(transforms)g(it)f(using)i Fd(bac)n(k)p
Fs(.)29 b(It)18 b(then)h(c)o(ho)q(oses)g(the)164 1820
y(p)q(olicy)e(tree)f(whose)i(transformed)f(v)o(ector)f(has)i(a)g(maxim)
n(um)13 b(dot)18 b(pro)q(duct)g(with)f(the)164 1880 y(giv)o(en)d(b)q
(elief)g(state.)22 b(This)15 b(pro)q(cess)h(is)f(implem)o(en)o(te)o(d)e
(in)h Ff(besttree)f Fs(\(T)l(able)i(3\))h(whic)o(h)164
1941 y(breaks)21 b(ties)e(b)q(et)o(w)o(een)h(c)o(hoices)f(using)i(the)g
(lexicographic)e(maxim)n(um)e(transformed)164 2001 y(v)o(ector.)237
2061 y(W)l(e)h(claim)e(that)i(breaking)g(ties)f(this)h(w)o(a)o(y)g(is)g
(guaran)o(teed)g(to)g(generate)g(a)h(p)q(olicy)164 2121
y(tree)12 b(whose)i(v)o(ector)f(is)g(lexicographically)e(largest)i(of)h
(all)e(p)q(olicy)h(trees)g(optimal)f(at)h(the)164 2181
y(giv)o(en)18 b(b)q(elief)f(state.)29 b(The)19 b(argumen)o(t)e(is)i(in)
o(v)o(olv)o(ed)d(but)j(the)f(in)o(tuition)g(is)g(somewhat)164
2242 y(simple:)26 b(Equation)21 b(12)f(sho)o(ws)h(that)f(the)g(v)o
(ector)f(for)h(a)g(p)q(olicy)g(tree)f(is)g(the)h(comp)q(o-)164
2302 y(nen)o(t)o(wise)f(sum)g(of)i(the)f(imm)o(ediate)d(rew)o(ard)j
(and)h(the)f(comp)q(onen)o(t)o(wise)e(discoun)o(ted)164
2362 y(comp)q(onen)o(ts)12 b(of)h(the)f(transformed)g(c)o(hoice)f(v)o
(ector.)20 b(Since)11 b(eac)o(h)h(c)o(hoice)g(v)o(ector)f(is)i(c)o(ho-)
164 2422 y(sen)i(to)f(b)q(e)h(the)g(lexicographically)d(largest)j(of)g
(all)f(the)g(options,)h(the)g(sum)e(will)h(also)h(b)q(e)164
2482 y(the)h(lexicographically)e(largest)j(of)g(all)e(p)q(ossible)i
(sums.)k(Th)o(us)16 b(the)g(generated)h(p)q(olicy)949
2607 y(45)p eop
%%Page: 46 46
46 45 bop 164 315 a Fs(tree)19 b(will)g(ha)o(v)o(e)g(a)i(v)o(ector)e
(whic)o(h)g(is)h(the)g(lexicographic)f(maxim)n(um)d(of)k(all)g(p)q
(ossible)164 376 y(p)q(olicy)c(trees)f(tied)h(at)h(the)f(giv)o(en)f(b)q
(elief)g(state.)164 542 y Ft(8)83 b(Con)n(tributions)164
652 y Fs(This)12 b(pap)q(er)h(describ)q(ed)e(a)i(no)o(v)o(el)d(metho)q
(d)i(for)g(solving)g(\014nite-horizon)g(POMDP)g(prob-)164
712 y(lems)k(exactly)h(using)i(the)e(b)q(elief)g(state)i(MDP)l(.)e(It)h
(rep)q(eated)g(a)h(classic)e(analysis)h(that)164 772
y(sho)o(ws)23 b(that)f(an)g(in\014nite-horizon)g(POMDP)g(problem)e(can)
i(b)q(e)g(appro)o(ximated)e(ar-)164 832 y(bitrarily)h(w)o(ell)h(b)o(y)g
(a)h(\014nite-horizon)f(solution.)40 b(It)22 b(ga)o(v)o(e)g(a)h(new)g
(\(to)g(us\))g(analysis)164 892 y(that)17 b(b)q(ounds)g(the)f
(in\014nite-horizon)g(p)q(erformance)f(of)h(solving)g(a)h(sequence)e
(of)h(\014nite-)164 953 y(horizon)g(problems)f(appro)o(ximately)l(.)237
1013 y(The)e(pap)q(er)h(rep)q(eated)g(a)f(result)g(of)h(Sondik)1046
1009 y([)1060 1013 y(Smallw)o(o)q(o)q(d)f(and)h(Sondik,)f(1973)1665
1009 y(])1693 1013 y(that)164 1073 y(states)i(that)f(a)h
(\014nite-horizon)f(v)m(alue)g(function)g(is)g(piecewise-linear)e(and)j
(con)o(v)o(ex)e(o)o(v)o(er)164 1133 y(b)q(elief)k(space.)28
b(It)18 b(ga)o(v)o(e)g(a)g(no)o(v)o(el)g(pro)q(of)h(of)g(this)f(that)h
(sho)o(ws)g(that)g(w)o(e)f(can)g(in)o(terpret)164 1193
y(the)c(comp)q(onen)o(ts)g(of)h(the)f(linear)f(functions)i(as)g(the)f
(p)q(erformance)g(of)g(a)h(\014nite-horizon)164 1253
y(p)q(olicy)l(.)237 1314 y(The)i(pap)q(er)h(sho)o(w)o(ed)f(ho)o(w)h(a)f
Fm(t)p Fs(-step)g(p)q(olicy)g(tree)f(represen)o(tation)h(could)g(b)q(e)
g(used)164 1374 y(to)e(solv)o(e)e(POMDP)i(problems.)k(It)14
b(rep)q(eated)h(a)g(w)o(ell-kno)o(wn)e(result)h(that)h(w)o(e)f(can)h
(\014nd)164 1434 y(the)d(optimal)e(p)q(olicy)i(tree)f(at)h(a)h(p)q(oin)
o(t)f(in)g(b)q(elief)f(space)h(and)g(pro)o(vided)g(a)g(no)o(v)o(el)f
(analysis)164 1494 y(that)h(sho)o(w)o(ed)g(that)g(breaking)g(ties)f
(using)h(a)h(lexicographic)d(ordering)i(ensures)g(that)g(the)164
1554 y(\014nal)g(p)q(olicy)g(tree)g(represen)o(tation)f(will)h(b)q(e)g
(of)h(minim)n(um)8 b(size.)19 b(It)12 b(also)h(describ)q(ed)f(ho)o(w)
164 1615 y(lexicographic)f(maxim)o(um)d(v)o(ectors)k(can)g(b)q(e)h
(iden)o(ti\014ed)e(without)i(forfeiting)f(e\016ciency)l(.)164
1675 y(In)19 b(addition,)g(t)o(w)o(o)g(algorithms)g(are)g(giv)o(en)f
(for)h(\014nding)h(the)f(Bellman)d(residual)j(of)h(a)164
1735 y(v)m(alue)c(function)g(represen)o(ted)f(as)i(a)g(set)f(of)g(p)q
(olicy)g(trees.)237 1795 y(The)21 b(most)f(signi\014can)o(t)g(con)o
(tribution)g(is)h(a)g(philosophical)f(one.)35 b(The)21
b(dev)o(elop-)164 1855 y(men)o(t)15 b(of)j(previous)f(POMDP)h
(algorithms)f(has)h(b)q(een)f(motiv)m(ated)f(b)o(y)h(v)m(ague)h
(notions)164 1916 y(of)12 b(algorithmic)e(e\016ciency)l(.)17
b(This)12 b(pap)q(er)h(attempted)d(to)i(apply)g(the)f(theory)h(of)g
(compu-)164 1976 y(tational)h(complexit)o(y)d(to)j(help)g(iden)o(tify)e
(promising)h(algorithms)g(and)i(to)f(help)g(discard)164
2036 y(ones)k(that)f(will)f(tend)i(to)f(tak)o(e)g(to)q(o)h(long.)164
2202 y Ft(Ac)n(kno)n(wledgmen)n(ts)164 2312 y Fs(This)12
b(is)g(join)o(t)f(w)o(ork)h(with)g(T)l(on)o(y)g(Cassandra)i(and)e
(Leslie)f(Kaelbling)g(\(advisor\).)20 b(Loren)164 2372
y(Platzman)13 b(pro)o(vided)h(sev)o(eral)f(helpful)h(bac)o(kground)h
(discussions.)21 b(Philip)13 b(Klein)g(pro-)164 2432
y(vided)h(guidance)h(on)g(some)e(of)i(the)g(more)e(complicated)g
(argumen)o(ts)h(and)h(p)q(oin)o(ted)f(out)949 2607 y(46)p
eop
%%Page: 47 47
47 46 bop 164 315 a Fs(problems)12 b(with)i(the)f(old)h(algorithm.)19
b(Ron)14 b(P)o(arr)f(w)o(as)i(kind)e(enough)h(to)g(read)g(an)g(early)
164 376 y(draft)j(fron)o(t)f(to)g(bac)o(k)g(and)h(pro)o(vided)f(man)o
(y)e(useful)i(commen)o(ts.)164 542 y Ft(References)164
648 y Fs([)178 652 y(Astrom,)e(1965)462 648 y(])502 652
y(Astrom,)24 b(K.)f(J.)h(1965.)46 b(Optimal)22 b(con)o(trol)i(of)g
(Mark)o(o)o(v)g(decision)215 712 y(pro)q(cesses)17 b(with)f(incomplete)
e(state)j(estimation.)i Fr(J.)e(Math.)g(A)o(nal.)h(Appl.)f
Fs(10:174{)215 772 y(205.)164 870 y([)178 874 y(Bellm)o(an,)d(1957)479
870 y(])518 874 y(Bellman,)h(Ric)o(hard)i(1957.)26 b
Fr(Dynamic)18 b(Pr)n(o)n(gr)n(amming)p Fs(.)23 b(Princeton)215
934 y(Univ)o(ersit)o(y)14 b(Press,)i(Princeton,)g(New)f(Jersey)l(.)164
1032 y([)178 1036 y(Bertsek)m(as,)g(1987)505 1032 y(])545
1036 y(Bertsek)m(as,)g(D.)i(P)l(.)f(1987.)23 b Fr(Dynamic)18
b(Pr)n(o)n(gr)n(amming:)j(Determin-)215 1096 y(istic)d(and)g(Sto)n
(chastic)g(Mo)n(dels)p Fs(.)j(Pren)o(tice-Hall.)164 1193
y([)178 1197 y(Cassandra)d Fr(et)g(al.)p Fs(,)e(1994)648
1193 y(])687 1197 y(Cassandra,)g(An)o(thon)o(y)d(R.;)g(Kaelbling,)g
(Leslie)f(P)o(ac)o(k;)h(and)215 1258 y(Littman,)e(Mic)o(hael)e(L.)i
(1994.)k(Acting)10 b(optimally)f(in)h(partially)h(observ)m(able)g(sto)q
(c)o(has-)215 1318 y(tic)16 b(domains.)k(In)c Fr(Pr)n(o)n(c)n(e)n(e)n
(dings)g(of)h(the)g(Twelfth)i(National)f(Confer)n(enc)n(e)g(on)f(A)o
(rti\014-)215 1378 y(cial)i(Intel)r(ligenc)n(e)p Fs(,)g(Seattle,)c(W)-5
b(A.)164 1476 y([)178 1480 y(Cassandra,)17 b(1994)523
1476 y(])563 1480 y(Cassandra,)j(An)o(thon)o(y)e(1994.)29
b(Optimal)17 b(p)q(olicies)g(for)i(partially)215 1540
y(observ)m(able)d(Mark)o(o)o(v)f(decision)g(pro)q(cesses.)21
b(T)l(ec)o(hnical)14 b(Rep)q(ort)i(CS-94-14,)i(Bro)o(wn)215
1600 y(Univ)o(ersit)o(y)l(,)c(Departmen)o(t)g(of)j(Computer)e(Science,)
f(Pro)o(vidence)h(RI.)164 1698 y([)178 1702 y(Cheng,)h(1988)439
1698 y(])478 1702 y(Cheng,)24 b(Hsien-T)l(e)d(1988.)40
b Fr(A)o(lgorithms)23 b(for)f(Partial)r(ly)i(Observable)215
1762 y(Markov)j(De)n(cision)h(Pr)n(o)n(c)n(esses)p Fs(.)51
b(Ph.D.)27 b(Dissertation,)i(Univ)o(ersit)o(y)24 b(of)j(British)215
1822 y(Colum)o(bia,)15 b(British)g(Colum)o(bia,)f(Canada.)164
1920 y([)178 1924 y(Drak)o(e,)h(1962)430 1920 y(])469
1924 y(Drak)o(e,)f(A.)g(W.)g(1962.)19 b Fr(Observation)e(of)e(a)h
(Markov)f(Pr)n(o)n(c)n(ess)g(Thr)n(ough)215 1984 y(a)i(Noisy)g(Channel)
p Fs(.)k(Ph.D.)15 b(Dissertation,)h(Massac)o(h)o(usetts)g(Institute)e
(of)i(T)l(ec)o(hnol-)215 2044 y(ogy)l(,)h(Cam)o(bridge,)d(Massac)o(h)o
(usetts.)164 2142 y([)178 2146 y(Eagle,)i(1984)421 2142
y(])460 2146 y(Eagle,)f(James)f(N.)h(1984.)21 b(The)15
b(optimal)f(searc)o(h)h(for)g(a)h(mo)o(ving)e(target)215
2206 y(when)g(the)f(searc)o(h)g(path)h(is)f(constrained.)k
Fr(Op)n(er)n(ations)d(r)n(ese)n(ar)n(ch)e Fs(32\(5\):1107{11)q(15.)164
2304 y([)178 2308 y(Garey)k(and)h(Johnson,)g(1979)718
2304 y(])757 2308 y(Garey)l(,)e(M.)g(R.)f(and)i(Johnson,)g(D.)f(S.)g
(1979.)21 b Fr(Comput-)215 2368 y(ers)15 b(and)f(intr)n(actability:)22
b(A)14 b(guide)i(to)e(the)h(the)n(ory)f(of)g(NP-c)n(ompleteness)p
Fs(.)k(F)l(reeman,)215 2428 y(San)f(F)l(rancisco,)f(CA.)949
2607 y(47)p eop
%%Page: 48 48
48 47 bop 164 311 a Fs([)178 315 y(Heyman)14 b(and)j(Sob)q(el,)f(1984)
706 311 y(])745 315 y(Heyman,)c(D.)h(and)h(Sob)q(el,)g(M.)f(1984.)18
b Fr(Sto)n(chastic)d(Mo)n(d-)215 376 y(els)k(in)f(Op)n(er)n(ations)g(R)
n(ese)n(ar)n(ch:)k(Sto)n(chastic)c(Optimization)p Fs(,)f(v)o(olume)e
(2.)23 b(McGra)o(w-)215 436 y(Hill,)14 b(New)i(Y)l(ork.)164
534 y([)178 538 y(Monahan,)g(1982)502 534 y(])542 538
y(Monahan,)e(George)f(E.)g(1982.)k(A)c(surv)o(ey)f(of)h(partially)f
(observ)m(able)215 598 y(Mark)o(o)o(v)j(decision)f(pro)q(cesses:)21
b(Theory)l(,)15 b(mo)q(dels,)f(and)i(algorithms.)i Fr(Management)215
658 y(Scienc)n(e)h Fs(28:1{16.)164 756 y([)178 760 y(Platzman,)14
b(1977)507 756 y(])547 760 y(Platzman,)i(Loren)j(K.)e(1977.)28
b Fr(Finite-memory)19 b(estimation)h(and)215 820 y(c)n(ontr)n(ol)g(of)g
(\014nite)i(pr)n(ob)n(abilistic)e(systems)p Fs(.)30 b(Ph.D.)19
b(Dissertation,)h(Massac)o(h)o(usetts)215 880 y(Institute)c(of)g(T)l
(ec)o(hnology)l(.)164 978 y([)178 982 y(Puterman,)e(1994)515
978 y(])555 982 y(Puterman,)20 b(Martin)h(X.)f(1994.)36
b Fr(Markov)21 b(De)n(cision)h(Pr)n(o)n(c)n(esses)p Fs(.)215
1042 y(unkno)o(wn.)164 1140 y([)178 1144 y(Sc)o(hrijv)o(er,)13
b(1986)490 1140 y(])530 1144 y(Sc)o(hrijv)o(er,)24 b(Alexander)f(1986.)
46 b Fr(The)n(ory)24 b(of)g(line)n(ar)h(and)g(inte)n(ger)215
1204 y(pr)n(o)n(gr)n(amming)p Fs(.)20 b(Wiley-In)o(terscience)o(.)164
1302 y([)178 1306 y(Smallw)o(o)q(o)q(d)15 b(and)i(Sondik,)f(1973)791
1302 y(])831 1306 y(Smallw)o(o)q(o)q(d,)36 b(Ric)o(hard)d(D.)g(and)h
(Sondik,)j(Ed-)215 1366 y(w)o(ard)13 b(J.)e(1973.)16
b(The)c(optimal)f(con)o(trol)g(of)i(partially)e(observ)m(able)h(Mark)o
(o)o(v)f(pro)q(cesses)215 1426 y(o)o(v)o(er)16 b(a)g(\014nite)g
(horizon.)21 b Fr(Op)n(er)n(ations)c(R)n(ese)n(ar)n(ch)e
Fs(21:1071{108)q(8.)164 1524 y([)178 1528 y(Sondik,)g(1971)448
1524 y(])488 1528 y(Sondik,)e(E.)g(1971.)k Fr(The)d(Optimal)h(Contr)n
(ol)f(of)h(Partial)r(ly)g(Observable)215 1588 y(Markov)j(Pr)n(o)n(c)n
(esses)p Fs(.)i(Ph.D.)c(Dissertation,)g(Stanford)h(Univ)o(ersit)o(y)l
(.)164 1685 y([)178 1689 y(W)l(atkins,)e(1989)478 1685
y(])518 1689 y(W)l(atkins,)20 b(C.)f(J.C.H.)f(1989.)32
b Fr(L)n(e)n(arning)20 b(with)g(Delaye)n(d)h(R)n(ewar)n(ds)p
Fs(.)215 1750 y(Ph.D.)16 b(Dissertation,)g(Cam)o(bridge)f(Univ)o(ersit)
o(y)l(.)164 1847 y([)178 1851 y(Williams)e(and)k(Baird,)f(1993)722
1847 y(])761 1851 y(Williams,)j(Ronald)i(J.)g(and)g(Baird,)g(Leemon)f
(C.)g(I)q(I)q(I)215 1912 y(1993.)37 b(Tigh)o(t)21 b(p)q(erformance)f(b)
q(ounds)i(on)g(greedy)e(p)q(olicies)g(based)i(on)f(imp)q(erfect)215
1972 y(v)m(alue)f(functions.)33 b(T)l(ec)o(hnical)18
b(Rep)q(ort)j(NU-CCS-93-13,)h(Northeastern)e(Univ)o(er-)215
2032 y(sit)o(y)l(,)15 b(College)h(of)h(Computer)e(Science,)f(Boston,)j
(MA.)949 2607 y(48)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
